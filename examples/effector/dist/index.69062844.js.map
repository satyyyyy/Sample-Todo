{"mappings":"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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-e9b9bab3c5d2a580.js","js/app.js","node_modules/effector-dom/effector-dom.es.js","node_modules/effector-dom/effector-dom/own.ts","node_modules/effector-dom/effector-dom/render/locality.ts","node_modules/effector-dom/effector-dom/render/createSignal.ts","node_modules/effector-dom/effector-dom/render/document.ts","node_modules/effector-dom/effector-dom/render/using.ts","node_modules/effector-dom/effector-dom/render/createWatch.ts","node_modules/effector-dom/effector-dom/batch.ts","node_modules/effector-dom/effector-dom/env.ts","node_modules/effector-dom/effector-dom/render/renderer.ts","node_modules/effector-dom/effector-dom/render/nearestNode.ts","node_modules/effector-dom/effector-dom/render/bindings.ts","node_modules/effector-dom/effector-dom/render/h.ts","node_modules/effector-dom/effector-dom/render/bind.ts","node_modules/effector-dom/effector-dom/storeField.ts","node_modules/effector-dom/effector-dom/render/list.ts","node_modules/effector-dom/effector-dom/h.ts","node_modules/effector-dom/effector-dom/op.ts","node_modules/effector-dom/effector-dom/variant.ts","node_modules/effector-dom/effector-dom/render/stack.ts","node_modules/effector-dom/effector-dom/render/documentResolver.ts","node_modules/effector-dom/effector-dom/render/mark.ts","node_modules/effector-dom/effector-dom/render/platform/now.ts","node_modules/process/browser.js","node_modules/effector/effector.mjs","node_modules/effector/effector/collection.ts","node_modules/effector/effector/throw.ts","node_modules/effector/effector/region.ts","node_modules/effector/effector/createNode.ts","node_modules/effector/effector/tag.ts","node_modules/effector/effector/kernel.ts","node_modules/effector/effector/naming.ts","node_modules/effector/effector/config.ts","node_modules/effector/effector/template.ts","node_modules/effector/effector/createUnit.ts","node_modules/effector/effector/combine.ts","node_modules/effector/effector/defer.ts","node_modules/effector/effector/createEffect.ts","node_modules/effector/effector/attach.ts","node_modules/effector/effector/createApi.ts","node_modules/effector/effector/createDomain.ts","node_modules/effector/effector/fromObservable.ts","node_modules/effector/effector/merge.ts","node_modules/effector/effector/sample.ts","node_modules/effector/effector/guard.ts","node_modules/effector/effector/restore.ts","node_modules/effector/effector/split.ts","node_modules/effector/effector/fork/allSettled.ts","node_modules/effector/effector/fork/util.ts","node_modules/effector/effector/fork/fork.ts","node_modules/effector/effector/fork/createScope.ts","node_modules/effector/effector/fork/hydrate.ts","node_modules/effector/effector/fork/scopeBind.ts","node_modules/effector/effector/fork/serialize.ts","node_modules/effector/effector/observable.ts","node_modules/effector/effector/validate.ts","node_modules/effector/effector/is.ts","node_modules/effector/effector/id.ts","node_modules/effector/effector/step.ts","node_modules/effector/effector/stateRef.ts","node_modules/effector/effector/caller.ts","node_modules/effector/effector/getter.ts","node_modules/effector/effector/own.ts","node_modules/effector/effector/clearNode.ts","node_modules/effector/effector/subscription.ts","node_modules/effector/effector/forward.ts","node_modules/effector/effector/watch.ts","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","js/header.js","js/title.js","js/model.js","node_modules/effector-localstorage/sync.js","js/main.js","js/todoItem.js","js/footer.js"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"4a236f9275d0a351\";module.bundle.HMR_BUNDLE_ID = \"b884aa5669062844\";\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */\n\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: mixed;\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function accept(fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function dispose(fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData = undefined;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets\n/*: {|[string]: boolean|} */\n, acceptedAssets\n/*: {|[string]: boolean|} */\n, assetsToAccept\n/*: Array<[ParcelRequire, string]> */\n;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\n\nfunction getPort() {\n  return HMR_PORT || location.port;\n} // eslint-disable-next-line no-redeclare\n\n\nvar parent = module.bundle.parent;\n\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe\n\n  ws.onmessage = function (event\n  /*: {data: string, ...} */\n  ) {\n    checkedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    acceptedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    assetsToAccept = [];\n    var data\n    /*: HMRMessage */\n    = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n\n      var assets = data.assets.filter(function (asset) {\n        return asset.envHash === HMR_ENV_HASH;\n      }); // Handle HMR Update\n\n      var handled = assets.every(function (asset) {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n\n      if (handled) {\n        console.clear();\n        assets.forEach(function (asset) {\n          hmrApply(module.bundle.root, asset);\n        });\n\n        for (var i = 0; i < assetsToAccept.length; i++) {\n          var id = assetsToAccept[i][1];\n\n          if (!acceptedAssets[id]) {\n            hmrAcceptRun(assetsToAccept[i][0], id);\n          }\n        }\n      } else {\n        window.location.reload();\n      }\n    }\n\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var ansiDiagnostic = _step.value;\n          var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n          console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe\n\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\n\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  var errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n\n  var _iterator2 = _createForOfIteratorHelper(diagnostics),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var diagnostic = _step2.value;\n      var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;\n      errorHTML += \"\\n      <div>\\n        <div style=\\\"font-size: 18px; font-weight: bold; margin-top: 20px;\\\">\\n          \\uD83D\\uDEA8 \".concat(diagnostic.message, \"\\n        </div>\\n        <pre>\").concat(stack, \"</pre>\\n        <div>\\n          \").concat(diagnostic.hints.map(function (hint) {\n        return '<div>💡 ' + hint + '</div>';\n      }).join(''), \"\\n        </div>\\n        \").concat(diagnostic.documentation ? \"<div>\\uD83D\\uDCDD <a style=\\\"color: violet\\\" href=\\\"\".concat(diagnostic.documentation, \"\\\" target=\\\"_blank\\\">Learn more</a></div>\") : '', \"\\n      </div>\\n    \");\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\n\nfunction getParents(bundle, id)\n/*: Array<[ParcelRequire, string]> */\n{\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n\n  newLink.setAttribute('href', // $FlowFixMe\n  link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe\n\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\n\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href\n      /*: string */\n      = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;\n\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nfunction hmrApply(bundle\n/*: ParcelRequire */\n, asset\n/*:  HMRAsset */\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n\n    if (deps) {\n      var fn = new Function('require', 'module', 'exports', asset.output);\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\n\nfunction hmrAcceptCheck(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n\n  if (checkedAssets[id]) {\n    return true;\n  }\n\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  var parents = getParents(module.bundle.root, id); // If no parents, the asset is new. Prevent reloading the page.\n\n  if (!parents.length) {\n    return true;\n  }\n\n  return parents.some(function (v) {\n    return hmrAcceptCheck(v[0], v[1], null);\n  });\n}\n\nfunction hmrAcceptRun(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n  cached = bundle.cache[id];\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n\n  acceptedAssets[id] = true;\n}","import {h, spec, using} from 'effector-dom';\nimport {Header} from './header';\nimport {Main} from './main';\nimport {Footer} from './footer';\n\nexport const App = () => {\n  // создадим section элемент\n  h('section', () => {\n    // и укажем ему класс\n    spec({attr: {class: 'todoapp'}});\n\n    // также выведем остальные части приложения\n    Header();\n    Main();\n    Footer();\n  });\n};\n\nusing(document.body, () => {\n  App();\n});\n",null,"export function own(ownerUnit, ownedUnits) {\n  const owner = getGraph(ownerUnit)\n  for (let i = 0; i < ownedUnits.length; i++) {\n    const link = getGraph(ownedUnits[i])\n    link.family.type = 'crosslink'\n    const owners = getOwners(link)\n    const links = getLinks(owner)\n    if (!owners.includes(owner)) owners.push(owner)\n    if (!links.includes(link)) links.push(link)\n  }\n}\n\nconst getGraph = unit => unit.graphite || unit\nconst getOwners = node => node.family.owners\nconst getLinks = node => node.family.links\n","import {Stack} from './index.h'\n\nexport function makeSiblings(left: Stack | null, right: Stack | null) {\n  setRightSibling(left, right)\n  setLeftSibling(right, left)\n}\n\nexport function setRightSibling(target: Stack | null, value: Stack | null) {\n  if (!target) return\n  if (target === value) return\n  target.locality.sibling.right.ref = value\n}\n\nexport function setLeftSibling(target: Stack | null, value: Stack | null) {\n  if (!target) return\n  if (target === value) return\n  target.locality.sibling.left.ref = value\n}\n\nexport function getRightSibling(target: Stack | null): Stack | null {\n  if (!target) return null\n  return target.locality.sibling.right.ref\n}\n","import {step, createNode, clearNode} from 'effector'\nimport {activeStack} from './stack'\nimport {Signal, Stack} from './index.h'\nimport {makeSiblings, setRightSibling, setLeftSibling} from './locality'\n\nconst clearSelf = createNode({\n  node: [\n    step.run({\n      fn(self) {\n        clearNode(self)\n      },\n    }),\n  ],\n})\nconst clearLocality = step.compute({\n  //@ts-ignore\n  fn(_, scope: {stack: Stack | null; self: Signal}) {\n    scope.self.next.push(clearSelf)\n    const {stack} = scope\n    const {parent} = stack\n    const {left, right} = stack.locality.sibling\n    if (parent) {\n      if (parent.locality.child.last.ref === stack) {\n        parent.locality.child.last.ref = left.ref\n      }\n      if (parent.locality.child.first.ref === stack) {\n        parent.locality.child.first.ref = right.ref\n      }\n    }\n    if (\n      left.ref &&\n      left.ref.locality.sibling.right.ref === stack &&\n      right.ref &&\n      right.ref.locality.sibling.left.ref === stack\n    ) {\n      makeSiblings(left.ref, right.ref)\n    } else if (left.ref && left.ref.locality.sibling.right.ref === stack) {\n      setRightSibling(left.ref, null)\n    } else if (right.ref && right.ref.locality.sibling.left.ref === stack) {\n      setLeftSibling(right.ref, null)\n    }\n  },\n})\nconst sendSelf = step.compute({\n  fn: (_, {self}) => self,\n})\nexport function createSignal(): Signal {\n  const scope = {stack: null} as any\n  const parent = activeStack.get()\n  const signal = createNode({\n    node: [clearLocality, sendSelf],\n    //@ts-ignore\n    parent: [parent && parent.signal].filter(Boolean),\n    meta: {unit: 'signal'},\n    scope,\n  })\n  scope.self = signal\n  return signal\n}\n","import {DOMElement} from './index.h'\nconst invalidToken = /[^a-zA-Z0-9\\-]/g\nconst invalidValue = /[\\\\<>\"]/g\nconst dataValue = /[A-Z]/g\nconst escaped = /[&<>'\"]/g\n\nclass DOMNode {\n  child: {\n    first: DOMNode | null\n    last: DOMNode | null\n  } = {\n    first: null,\n    last: null,\n  }\n  sibling: {\n    left: DOMNode | null\n    right: DOMNode | null\n  } = {\n    left: null,\n    right: null,\n  }\n  parent: DOMNode | null = null\n  tagName = ''\n  namespaceURI = 'http://www.w3.org/1999/xhtml' as const\n  dataset = Object.create(null)\n  style = new CSSStyle()\n  value?: string\n  firstChild: DOMNode | null = null\n  transform = {\n    baseVal: new DOMSVGTransformList(),\n  }\n  isFragment = true\n  attributes: {[attributeName: string]: string} = Object.create(null)\n  textContent: string | null = null\n  __STATIC__ = true\n  appendChild(node: DOMNode): void {\n    if (node.parent) node.remove()\n    if (node.isFragment && node.textContent === null) {\n      let child = node.firstChild\n      let nextChild\n      while (child) {\n        nextChild = child.sibling.right\n        this.appendChild(child)\n        child = nextChild\n      }\n      return\n    }\n    if (!this.child.last) {\n      this.child.first = node\n      this.firstChild = node\n    } else {\n      this.child.last.sibling.right = node\n      node.sibling.left = this.child.last\n    }\n    this.child.last = node\n    node.parent = this\n  }\n  prepend(node: DOMNode): void {\n    if (node.parent) node.remove()\n    if (!this.child.last) {\n      this.child.first = node\n      this.child.last = node\n    } else {\n      this.child.first!.sibling.left = node\n      node.sibling.right = this.child.first\n    }\n    this.child.first = node\n    this.firstChild = node\n    node.parent = this\n  }\n  contains(node: DOMNode): boolean {\n    let parent: DOMNode | null = node\n    while (parent) {\n      if (parent === this) return true\n      parent = parent.parent\n    }\n    return false\n  }\n  remove(): void {\n    if (!this.parent) return\n    const {parent} = this\n    if (parent.child.first === this && parent.child.last === this) {\n      parent.firstChild = null\n      parent.child.first = null\n      parent.child.last = null\n    } else if (parent.child.first === this) {\n      parent.child.first = this.sibling.right\n      parent.firstChild = this.sibling.right\n      this.sibling.right!.sibling.left = null\n    } else if (parent.child.last === this) {\n      parent.child.last = this.sibling.left\n      this.sibling.left!.sibling.right = null\n    } else {\n      this.sibling.right!.sibling.left = this.sibling.left\n      this.sibling.left!.sibling.right = this.sibling.right\n    }\n    this.sibling.left = null\n    this.sibling.right = null\n    this.parent = null\n  }\n  addEventListener(key: string, fn: Function, options: object): void {}\n  removeEventListener(key: string, fn: Function, options: object): void {}\n  setAttribute(property: string, value: string): void {\n    this.attributes[escapeTag(property)] = escapeTagValue(value)\n  }\n  removeAttribute(property: string): void {\n    delete this.attributes[escapeTag(property)]\n  }\n  replaceWith(node: DOMNode): void {\n    if (!this.parent) return\n    const {parent} = this\n    if (node.parent) node.remove()\n    if (parent.child.first === this && parent.child.last === this) {\n      parent.firstChild = node\n      parent.child.first = node\n      parent.child.last = node\n    } else if (parent.child.first === this) {\n      parent.child.first = node\n      parent.firstChild = node\n      this.sibling.right!.sibling.left = node\n    } else if (parent.child.last === this) {\n      parent.child.last = node\n      this.sibling.left!.sibling.right = node\n    } else {\n      this.sibling.right!.sibling.left = node\n      this.sibling.left!.sibling.right = node\n    }\n    node.sibling.left = this.sibling.left\n    node.sibling.right = this.sibling.right\n    node.parent = parent\n    this.sibling.left = null\n    this.sibling.right = null\n    this.parent = null\n  }\n  focus(): void {}\n  blur(): void {}\n  createSVGTransform(): DOMSVGTransform {\n    return new DOMSVGTransform()\n  }\n  replaceData(offset: number, length: number, content: string) {\n    if (typeof this.textContent !== 'string') return\n    this.textContent = `${this.textContent.slice(\n      0,\n      offset,\n    )}${content}${this.textContent.slice(offset + length)}`\n  }\n}\nclass CSSStyle {\n  properties = Object.create(null)\n  setProperty(property: string, value: string): void {\n    this.properties[escapeTag(property)] = escapeTagValue(value)\n  }\n  removeProperty(property: string): void {\n    delete this.properties[escapeTag(property)]\n  }\n}\nclass DOMSVGTransformList {\n  items: DOMSVGTransform[] = []\n  appendItem(newItem: DOMSVGTransform) {\n    this.items.push(newItem)\n  }\n}\nclass DOMSVGTransform {\n  value = ''\n  setTranslate(tx: number, ty: number): void {\n    this.value = `translate(${tx} ${ty})`\n  }\n  setScale(sx: number, sy: number): void {\n    this.value = `scale(${sx} ${sy})`\n  }\n  setRotate(angle: number, cx: number, cy: number): void {\n    if (cx !== 0 || cy !== 0) {\n      this.value = `rotate(${angle} ${cx} ${cy})`\n    } else {\n      this.value = `rotate(${angle})`\n    }\n  }\n  setSkewX(angle: number): void {\n    this.value = `skewX(${angle})`\n  }\n  setSkewY(angle: number): void {\n    this.value = `skewY(${angle})`\n  }\n}\nfunction convertDataChar(char: string) {\n  return `-${char.toLowerCase()}`\n}\nfunction convertDataAttr(value: string) {\n  return escapeTag(value).replace(dataValue, convertDataChar)\n}\nfunction escapeContentHandler(char: string) {\n  switch (char) {\n    case '&':\n      return '&amp;'\n    case '<':\n      return '&lt;'\n    case '>':\n      return '&gt;'\n    case '\"':\n      return '&quot;'\n    case \"'\":\n      return '&#39;'\n    default:\n      return char\n  }\n}\nfunction escapeTag(value: string) {\n  value = String(value)\n  switch (value) {\n    case '__proto__':\n    case '__defineGetter__':\n    case '__defineSetter__':\n    case 'constructor':\n    case 'prototype':\n    case 'hasOwnProperty':\n    case 'toString':\n    case 'valueOf':\n      return 'blacklisted'\n    default:\n      return value.replace(invalidToken, '')\n  }\n}\nfunction escapeTagValue(value: string) {\n  return String(value).replace(invalidValue, '')\n}\nfunction escapeContent(value: string) {\n  return String(value).replace(escaped, escapeContentHandler)\n}\n\nexport const body = new DOMNode()\n//@ts-ignore\nbody.isBody = true\nexport function createTextNode(text: string) {\n  const node = new DOMNode()\n  node.textContent = escapeContent(text)\n  return node\n}\nexport function createElement(tag: string) {\n  const node = new DOMNode()\n  node.tagName = escapeTag(tag)\n  node.isFragment = false\n  return node\n}\nexport function createElementNS(\n  namespace: 'http://www.w3.org/1999/xhtml' | 'http://www.w3.org/2000/svg',\n  tag: string,\n) {\n  switch (namespace) {\n    case 'http://www.w3.org/1999/xhtml':\n    case 'http://www.w3.org/2000/svg':\n      break\n    default:\n      namespace = 'http://www.w3.org/1999/xhtml'\n  }\n  const node = new DOMNode()\n  node.tagName = escapeTag(tag)\n  //@ts-ignore\n  node.namespaceURI = namespace\n  node.isFragment = false\n  return node\n}\n\nexport function createDocumentFragment(): DOMNode & DOMElement {\n  //@ts-ignore\n  return new DOMNode()\n}\n\nfunction renderPart(node: DOMNode, parts: string[]) {\n  if (node.textContent !== null) {\n    parts.push(node.textContent)\n  }\n  if (node.isFragment) {\n    let child = node.firstChild\n    while (child) {\n      renderPart(child, parts)\n      child = child.sibling.right\n    }\n    return\n  }\n  parts.push('<', node.tagName)\n  for (const key in node.attributes) {\n    parts.push(' ', key, '=', '\"', escapeTagValue(node.attributes[key]), '\"')\n  }\n  for (const key in node.dataset) {\n    parts.push(\n      ' ',\n      'data-',\n      convertDataAttr(key),\n      '=',\n      '\"',\n      escapeTagValue(node.dataset[key]),\n      '\"',\n    )\n  }\n  const styles = [] as string[]\n  for (const property in node.style.properties) {\n    if (property.startsWith('--')) {\n      styles.push(`${property}: ${node.style.properties[property]}`)\n    } else {\n      const dashedProperty = property.replace(\n        /[A-Z]/,\n        char => `-${char.toLowerCase()}`,\n      )\n      styles.push(`${dashedProperty}: ${node.style.properties[property]}`)\n    }\n  }\n  if (styles.length > 0) {\n    parts.push(' ', 'style', '=', '\"', styles.join(';'), '\"')\n  }\n  if (node.transform.baseVal.items.length > 0) {\n    parts.push(' ', 'transform', '=', '\"')\n    const transforms = node.transform.baseVal.items.map(({value}) => value)\n    parts.push(transforms.join(' '), '\"')\n  }\n  if (!node.firstChild) {\n    if (node.tagName === 'meta' || node.tagName === 'link') {\n      parts.push('>')\n    } else {\n      parts.push('/>')\n    }\n    return\n  }\n  parts.push('>')\n  let child: DOMNode | null = node.firstChild\n  while (child) {\n    renderPart(child, parts)\n    child = child.sibling.right\n  }\n  parts.push('</', node.tagName, '>')\n}\n\nexport function render(node: DOMNode) {\n  const parts = [] as string[]\n  renderPart(node, parts)\n  const content = parts.join('')\n  if (detectFullPageRender(node)) {\n    return `<!DOCTYPE html>${content}`\n  }\n  return content\n}\n\nfunction detectFullPageRender(node: DOMNode): boolean {\n  if (node.tagName === 'html') return true\n  if (node.isFragment && node.textContent === null) {\n    const firstChild = node.firstChild\n    if (firstChild && node.child.last === firstChild) {\n      return detectFullPageRender(firstChild)\n    }\n  }\n  return false\n}\n","import {step, withRegion} from 'effector'\nimport {nodeStack, activeStack} from './stack'\nimport {DOMElement, NSType, Stack} from './index.h'\nimport {createSignal} from './createSignal'\nimport {document} from './documentResolver'\n\nexport function using(node: DOMElement, cb: () => any): void {\n  const namespaceURI = node.namespaceURI\n  const tag = node.tagName.toLowerCase()\n  const ns: NSType =\n    namespaceURI === 'http://www.w3.org/2000/svg'\n      ? 'svg'\n      : tag === 'foreignObject'\n      ? 'foreignObject'\n      : 'html'\n  const parentStack = activeStack.get()\n  const stack: Stack = {\n    parent: parentStack,\n    signal:\n      parentStack && parentStack.signal ? parentStack.signal : createSignal(),\n    namespace: ns,\n    targetElement: node,\n    svgRoot:\n      tag === 'svg' ? (node as any) : parentStack ? parentStack.svgRoot : null,\n    child: [],\n    locality: {\n      sibling: {\n        left: {ref: null},\n        right: {ref: null},\n      },\n      child: {\n        first: {ref: null},\n        last: {ref: null},\n      },\n    },\n    node: {\n      type: 'using',\n      pure: false,\n      attr: [],\n      data: [],\n      visible: [],\n      text: [],\n      styleVar: [],\n      styleProp: [],\n      handler: [],\n      transform: [],\n      focus: [],\n      blur: [],\n    },\n    mountStatus: 'initial',\n    visible: true,\n  }\n  // if (!parentStack || !parentStack.signal) {\n  //   stack.signal.scope.stack = stack\n  // }\n  activeStack.replace(stack)\n  nodeStack.push({node, append: [], reverse: false})\n  try {\n    withRegion(stack.signal, cb)\n  } finally {\n    appendBatch(nodeStack.pop()!)\n    activeStack.replace(parentStack)\n  }\n}\nexport function appendBatch({\n  node,\n  append,\n  reverse = false,\n}: {\n  node: DOMElement\n  append: DOMElement[]\n  reverse?: boolean\n}) {\n  if (append.length === 0) return\n  const frag = document.createDocumentFragment()\n  if (!reverse) {\n    for (let i = 0; i < append.length; i++) {\n      frag.appendChild(append[i])\n    }\n    node.appendChild(frag)\n  } else {\n    for (let i = append.length - 1; i >= 0; i--) {\n      frag.appendChild(append[i])\n    }\n    node.prepend(frag)\n  }\n}\n\nexport function forwardStacks(parent: Stack, child: Stack) {\n  child.parent = parent\n  child.signal.seq.push(removeFromParent)\n  child.signal.scope.stack = child\n  parent.child.push(child)\n}\n\nconst removeFromParent = step.compute({\n  //@ts-ignore\n  fn(upd, scope: {stack: Stack}) {\n    if (!scope.stack) return upd\n    const {stack} = scope\n    //@ts-ignore\n    scope.stack = null\n    const index = stack.parent!.child.indexOf(stack)\n    if (index !== -1) {\n      stack.parent!.child.splice(index, 1)\n    }\n    stack.parent = null\n    return upd\n  },\n})\n","import {step, createNode} from 'effector'\nimport {Signal} from './index.h'\n\nconst runner = step.run({\n  fn(upd, {fn}) {\n    fn(upd)\n  },\n})\n\nexport function createWatch(parent: Signal, fn) {\n  return createNode({\n    node: [runner],\n    //@ts-ignore\n    parent,\n    meta: {op: 'watch'},\n    scope: {fn},\n    family: {\n      type: 'crosslink',\n      owners: [parent],\n    },\n  })\n}\n","import {createEvent, launch, Store, Event, is, createNode, step} from 'effector'\nimport {own} from './own'\nimport {beginMark, endMark} from './render/mark'\nimport {TASK_DEADLINE} from './env'\nimport {now} from './render/platform/now'\n\nexport type Priority = 'low' | 'high'\ntype Time = number\ntype QueuedItem<T> = {\n  inserted: Time\n  retry: number\n  value: T\n}\n\nconst executeTasks = createEvent()\nlet bonusTime = false\nlet isBatched = false\nlet rafID: number | NodeJS.Timeout\nfunction batchRAFrs() {\n  isBatched = false\n  beginMark('batchRAF')\n  executeTasks()\n  endMark('batchRAF')\n}\nconst raf =\n  typeof requestAnimationFrame !== 'undefined'\n    ? requestAnimationFrame\n    : (cb: Function) => setTimeout(cb, 0)\n//@ts-ignore\nconst cancelRaf: (id: number | NodeJS.Timeout) => void =\n  typeof cancelAnimationFrame !== 'undefined'\n    ? cancelAnimationFrame\n    : clearTimeout\nconst batchWindow = () => {\n  if (isBatched) return\n  isBatched = true\n  rafID = raf(batchRAFrs)\n}\n\nconst targets = new Map<number, Store<any> | Event<any>>()\nconst importantTasks = new Map<number, any>()\nconst tasks = new Map<number, any>()\nconst priorities = new Map<number, Priority>()\n\nlet nextTaskID = 0\nlet startTime = 0\n\nconst executionEndMark = createNode({\n  node: [\n    step.run({fn: () => {}}),\n    step.filter({\n      fn() {\n        if (importantTasks.size === 0 && tasks.size === 0) return false\n        if (now() - startTime >= TASK_DEADLINE) return false\n        cancelRaf(rafID)\n        bonusTime = true\n        isBatched = false\n        return true\n      },\n    }),\n  ],\n  child: [executeTasks],\n})\nexecuteTasks.watch(() => {\n  if (isBatched) return\n  if (importantTasks.size === 0 && tasks.size === 0) {\n    bonusTime = false\n    return\n  }\n  let interrupted = false\n  if (!bonusTime) {\n    startTime = now()\n  }\n  bonusTime = false\n  beginMark('plan')\n  for (const [id, data] of importantTasks) {\n    if (now() - startTime >= TASK_DEADLINE) {\n      batchWindow()\n      interrupted = true\n      break\n    }\n    importantTasks.delete(id)\n    launch({\n      target: targets.get(id)!,\n      params: data,\n      defer: true,\n    })\n  }\n  if (!interrupted) {\n    for (const [id, data] of tasks) {\n      if (now() - startTime >= TASK_DEADLINE) {\n        batchWindow()\n        interrupted = true\n        break\n      }\n      tasks.delete(id)\n      launch({\n        target: targets.get(id)!,\n        params: data,\n        defer: true,\n      })\n    }\n  }\n  launch({\n    target: executionEndMark,\n    params: null,\n    defer: true,\n  })\n  endMark('plan')\n})\nconst unwrapDone = step.compute({\n  fn: ({done}) => done,\n})\nconst unwrapFail = step.compute({\n  fn: ({fail}) => fail,\n})\nconst dropEmptyList = step.filter({\n  fn: list => list.length > 0,\n})\n\nconst pushSingleValue = step.compute({\n  fn(value, {taskID}) {\n    const taskList = priorities.get(taskID) === 'high' ? importantTasks : tasks\n    let list: any[] = taskList.get(taskID)\n    if (!list) {\n      list = []\n      taskList.set(taskID, list)\n    }\n    for (let i = 0; i < value.length; i++) {\n      list.push(value[i])\n    }\n    batchWindow()\n  },\n})\nconst runBatchFn = step.run({\n  fn(values, {fn}) {\n    return fn(values, startTime)\n  },\n})\n\nfunction backpressureEvent<T, S>(\n  trigger: Event<T[]> | Store<T[]>,\n  fn: (\n    values: T[],\n    start: number,\n  ) => {\n    done: S[]\n    fail: T[]\n  },\n  priority: Priority,\n): Event<S[]> {\n  const taskID = ++nextTaskID\n  const result = createEvent<S[]>()\n  const unit = is.store(trigger) ? trigger.updates : trigger\n  const family = {\n    type: 'crosslink',\n    owners: [unit, result],\n  }\n  createNode({\n    node: [pushSingleValue],\n    //@ts-ignore\n    parent: [unit],\n    scope: {taskID},\n    //@ts-ignore\n    family,\n  })\n\n  own(trigger, [result])\n  targets.set(\n    taskID,\n    createNode({\n      node: [runBatchFn],\n      child: [\n        createNode({\n          node: [unwrapFail, dropEmptyList, pushSingleValue],\n          scope: {taskID},\n          //@ts-ignore\n          family,\n        }),\n        createNode({\n          node: [unwrapDone, dropEmptyList],\n          child: [result],\n          //@ts-ignore\n          family,\n        }),\n      ],\n      scope: {fn},\n      //@ts-ignore\n      family,\n    }),\n  )\n\n  priorities.set(taskID, priority)\n  return result\n}\n\nexport function dynamicQueueFlat<T, R = null>({\n  trigger = createEvent(),\n  fn,\n  priority = 'low',\n  timeout = Infinity,\n  batchWindow = 0,\n  retries = Infinity,\n  mark = trigger.shortName,\n}: {\n  trigger?: Event<T>\n  fn: ((item: T) => R | undefined) | ((item: T) => void)\n  priority?: Priority\n  timeout?: number\n  batchWindow?: number\n  retries?: number\n  mark?: string\n}): {\n  trigger: Event<T>\n  processed: Event<R[]>\n} {\n  const prepared = trigger.map(value => [\n    {\n      inserted: now(),\n      retry: 0,\n      value,\n    } as QueuedItem<T>,\n  ])\n  const processed = backpressureEvent(\n    prepared,\n    (list, start) => {\n      let interrupted = false\n      let i\n      const done = [] as R[]\n      const batched = [] as Array<QueuedItem<T>>\n      beginMark(mark)\n      for (i = 0; i < list.length; i++) {\n        const item = list[i]\n        const timeNow = now()\n        if (item.inserted + batchWindow > timeNow) {\n          batched.push(item)\n          continue\n        }\n        if (item.inserted + timeout < timeNow) continue\n        if (timeNow - start >= TASK_DEADLINE) {\n          interrupted = true\n          break\n        }\n        const result = fn(item.value)\n        if (result === undefined) continue\n        //@ts-ignore\n        done.push(result)\n      }\n      if (interrupted) {\n        for (let j = i; j < list.length; j++) {\n          const item = list[j]\n          item.retry += 1\n          if (item.retry >= retries) continue\n          batched.push(item)\n        }\n      }\n      endMark(mark)\n      return {done, fail: batched}\n    },\n    priority,\n  )\n  return {\n    trigger,\n    processed,\n  }\n}\nexport function dynamicQueue<T, S, R>({\n  trigger = createEvent(),\n  fn,\n  priority = 'low',\n  timeout = Infinity,\n  batchWindow = 0,\n  retries = Infinity,\n  mark = trigger.shortName,\n  flatten,\n}: {\n  trigger?: Event<T[]>\n  fn: (item: S) => R | undefined\n  priority?: Priority\n  timeout?: number\n  batchWindow?: number\n  retries?: number\n  mark?: string\n  flatten: (item: T) => S[]\n}) {\n  const prepared = trigger.map(items => {\n    const result = [] as Array<QueuedItem<S>>\n    const inserted = now()\n    for (let i = 0; i < items.length; i++) {\n      const block = flatten(items[i])\n      for (let j = 0; j < block.length; j++) {\n        result.push({\n          inserted,\n          retry: 0,\n          value: block[j],\n        })\n      }\n    }\n    return result\n  })\n  const processed = backpressureEvent(\n    prepared,\n    (list, start) => {\n      let interrupted = false\n      let i\n      const done = [] as R[]\n      const batched = [] as Array<QueuedItem<S>>\n      beginMark(mark)\n      for (i = 0; i < list.length; i++) {\n        const item = list[i]\n        const timeNow = now()\n        if (item.inserted + batchWindow > timeNow) {\n          batched.push(item)\n          continue\n        }\n        if (item.inserted + timeout < timeNow) continue\n        if (timeNow - start >= TASK_DEADLINE) {\n          interrupted = true\n          break\n        }\n        const result = fn(item.value)\n        if (result === undefined) continue\n        done.push(result)\n      }\n      if (interrupted) {\n        for (let j = i; j < list.length; j++) {\n          const item = list[j]\n          item.retry += 1\n          if (item.retry >= retries) continue\n          batched.push(item)\n        }\n      }\n      endMark(mark)\n      return {done, fail: batched}\n    },\n    priority,\n  )\n  return {\n    trigger,\n    processed,\n  }\n}\n","export const USE_PERF = false\n\nexport const TASK_DEADLINE = 10\n","import {is, createNode, step, launch} from 'effector'\nimport {Signal} from './index.h'\nimport {createWatch} from './createWatch'\nimport {dynamicQueueFlat} from '../batch'\n\nfunction noDebounceRaf<T>(signal: Signal, source: any, cb: (data: T) => any) {\n  createWatch(signal, source.watch(cb))\n}\n\nconst toDomOp = step.run({\n  fn: (data, {handler}) => ({data, handler}),\n})\nexport function debounceRaf<T>(\n  signal: Signal,\n  source: any,\n  cb: (data: T) => any,\n) {\n  createNode({\n    node: [toDomOp],\n    //@ts-ignore\n    parent: source,\n    child: [domOp],\n    //@ts-ignore\n    family: {\n      type: 'crosslink',\n      owners: signal,\n    },\n    scope: {handler: cb},\n    meta: {op: 'debounceRaf'},\n  })\n  if (is.store(source)) {\n    //@ts-ignore\n    launch(domOp, {data: source.getState(), handler: cb}, true)\n  }\n}\n\nconst {trigger: domOp} = dynamicQueueFlat<{\n  data: any\n  handler: (data: any) => void\n}>({\n  priority: 'high',\n  mark: 'domOperation',\n  fn({handler, data}) {\n    handler(data)\n  },\n})\n\nexport function domOperation(\n  immediate: boolean,\n  signal: Signal,\n  data: any,\n  handler: (data: any) => void,\n) {\n  if (is.unit(data)) {\n    ;(immediate ? noDebounceRaf : debounceRaf)(signal, data, handler)\n  } else {\n    handler(data)\n  }\n}\n","import {Stack} from './index.h'\n\nfunction findLastVisibleNode(\n  stack: Stack,\n  fromIndex: number = stack.child.length - 1,\n): Stack | null {\n  for (let i = fromIndex; i >= 0; i--) {\n    const item = stack.child[i]\n    switch (item.node.type) {\n      case 'element':\n      case 'using':\n        if (!item.visible) continue\n        return item\n    }\n    const visibleChild = findLastVisibleNode(item)\n    if (visibleChild) return visibleChild\n  }\n  return null\n}\nexport function findNearestVisibleNode(stack: Stack) {\n  if (!stack.parent) return null\n  switch (stack.parent.node.type) {\n    case 'element':\n    case 'using': {\n      const found = findLastVisibleNode(\n        stack.parent,\n        stack.parent.child.indexOf(stack) - 1,\n      )\n      if (found) return found\n      break\n    }\n    case 'list':\n    case 'listItem': {\n      let child = stack\n      let target: Stack | null = stack.parent\n      while (target) {\n        const found = findLastVisibleNode(\n          target,\n          target.child.indexOf(child) - 1,\n        )\n        if (found) return found\n        child = target\n        target = target.parent\n      }\n      break\n    }\n  }\n  return null\n}\n","import {is, Store, Event, combine} from 'effector'\nimport {debounceRaf, domOperation} from './renderer'\n\nimport {\n  PropertyMap,\n  TransformMap,\n  StoreOrData,\n  StylePropertyMap,\n  Signal,\n  DOMElement,\n  HandlerRecord,\n  DOMProperty,\n  Stack,\n} from './index.h'\nimport {activeStack} from './stack'\nimport {createWatch} from './createWatch'\nimport {document} from './documentResolver'\nimport {findNearestVisibleNode} from './nearestNode'\n\nfunction isFalse(val: any) {\n  return (\n    val !== '' &&\n    val !== 0 &&\n    val !== '0' &&\n    (val === false || val === undefined || val === null)\n  )\n}\nconst finalizeHandler = (\n  element: DOMElement,\n  {map, options}: HandlerRecord,\n) => {\n  for (const key in map) {\n    //@ts-ignore\n    element.removeEventListener(key, map[key], options)\n  }\n}\nexport function bindHandler(\n  element: DOMElement,\n  signal: Signal,\n  handlers: HandlerRecord[],\n) {\n  for (let i = 0; i < handlers.length; i++) {\n    const {options, map} = handlers[i]\n    for (const key in map) {\n      //@ts-ignore\n      element.addEventListener(key, map[key], options)\n    }\n    createWatch(signal, finalizeHandler.bind(null, element, handlers[i]))\n  }\n}\nfunction applyData(dataset: DOMStringMap, field: string, value: any) {\n  if (isFalse(value)) {\n    delete dataset[field]\n  } else {\n    dataset[field] = `${value}`\n  }\n}\n\nexport function bindData(\n  element: DOMElement,\n  signal: Signal,\n  dataset: PropertyMap,\n) {\n  for (const field in dataset) {\n    domOperation(\n      false,\n      signal,\n      dataset[field],\n      applyData.bind(null, element.dataset, field),\n    )\n  }\n}\n\nfunction applyVisible(\n  node: DOMElement,\n  parent: DOMElement,\n  stack: Stack,\n  visible: boolean,\n) {\n  stack.visible = visible\n  if (visible) {\n    if (!parent.contains(node)) {\n      const nearestVisible = findNearestVisibleNode(stack)\n      if (nearestVisible && parent.contains(nearestVisible.targetElement)) {\n        nearestVisible.targetElement.after(node)\n      } else {\n        parent.prepend(node)\n      }\n    }\n  } else {\n    node.remove()\n  }\n}\n\nexport function bindVisible(\n  element: DOMElement,\n  signal: Signal,\n  visible: Store<boolean> | null,\n) {\n  if (visible === null) return\n  const stack = activeStack.get()\n  debounceRaf(\n    signal,\n    visible,\n    applyVisible.bind(null, element, stack.parent!.targetElement, stack),\n  )\n}\nconst applyStyleProp = (\n  style: CSSStyleDeclaration,\n  propName: any,\n  value: any,\n) => {\n  if (isFalse(value)) {\n    delete style[propName]\n  } else {\n    style[propName] = value\n  }\n}\nconst applyStyleVal = (\n  style: CSSStyleDeclaration,\n  variableName: string,\n  value: any,\n) => {\n  if (isFalse(value)) {\n    style.removeProperty(variableName)\n  } else {\n    style.setProperty(variableName, value)\n  }\n}\nexport function bindStyleProp(\n  element: DOMElement,\n  signal: Signal,\n  map: StylePropertyMap,\n) {\n  const style = element.style\n  for (const propName in map) {\n    domOperation(\n      false,\n      signal,\n      map[propName],\n      applyStyleProp.bind(null, style, propName),\n    )\n  }\n}\nexport function bindStyleVar(\n  element: DOMElement,\n  signal: Signal,\n  map: PropertyMap,\n) {\n  const style = element.style\n  for (const propName in map) {\n    domOperation(\n      false,\n      signal,\n      map[propName],\n      applyStyleVal.bind(null, style, `--${propName}`),\n    )\n  }\n}\n\nfunction applyAttr(\n  element: DOMElement,\n  attr: string,\n  value: string | number | boolean | null,\n) {\n  if (isFalse(value)) {\n    switch (attr) {\n      case 'value':\n        //@ts-ignore\n        delete element.value\n        break\n      case 'checked':\n        //@ts-ignore\n        element.checked = false\n        break\n      case 'spellcheck':\n        if (value === false) {\n          element.setAttribute('spellcheck', 'false')\n          return\n        }\n        break\n    }\n    element.removeAttribute(attr)\n  } else {\n    switch (attr) {\n      case 'value':\n        //@ts-ignore\n        element.value = `${value}`\n        break\n      case 'checked':\n        //@ts-ignore\n        element.checked = `${value}`\n        break\n    }\n    element.setAttribute(attr, `${value}`)\n  }\n}\n\nexport function bindAttr(\n  element: DOMElement,\n  signal: Signal,\n  map: PropertyMap,\n) {\n  for (const attr in map) {\n    domOperation(\n      attr !== 'value' &&\n        attr !== 'checked' &&\n        attr !== 'min' &&\n        attr !== 'max',\n      signal,\n      map[attr],\n      applyAttr.bind(null, element, attr),\n    )\n  }\n}\nconst xShape = (y: number, x: number) => ({x, y})\nconst yShape = (x: number, y: number) => ({x, y})\nfunction normalizeTranslateShape(\n  data:\n    | Store<{x?: number; y?: number}>\n    | {x?: StoreOrData<number>; y?: StoreOrData<number>},\n): StoreOrData<{\n  x?: number\n  y?: number\n}> {\n  if (is.store(data)) return data\n  //@ts-ignore\n  if (is.store(data.x)) {\n    //@ts-ignore\n    if (is.store(data.y)) return combine({x: data.x, y: data.y})\n    //@ts-ignore\n    return data.x.map(xShape.bind(null, data.y))\n  }\n  //@ts-ignore\n  if (is.store(data.y)) return data.y.map(yShape.bind(null, data.x))\n  return data as any\n}\n\nfunction applyTransform<T>(\n  svg: SVGSVGElement,\n  signal: Signal,\n  transformList: SVGTransformList,\n  data: StoreOrData<T>,\n  handler: (transform: SVGTransform, data: T) => void,\n  key: keyof typeof transformResolvers,\n) {\n  const transform = svg.createSVGTransform()\n  switch (key) {\n    case 'translate':\n    case 'scale':\n      data = normalizeTranslateShape(data as any) as any\n      break\n  }\n  domOperation(false, signal, data, handler.bind(null, transform))\n  transformList.appendItem(transform)\n}\nconst transformResolvers = {\n  translate(transform: SVGTransform, {x = 0, y = 0}: {x?: number; y?: number}) {\n    transform.setTranslate(x, y)\n  },\n  scale(transform: SVGTransform, {x = 0, y = 0}: {x?: number; y?: number}) {\n    transform.setScale(x, y)\n  },\n  rotate(\n    transform: SVGTransform,\n    data:\n      | number\n      | {\n          angle?: number\n          x?: number\n          y?: number\n        },\n  ) {\n    if (typeof data === 'number') {\n      transform.setRotate(data, 0, 0)\n    } else {\n      transform.setRotate(data.angle || 0, data.x || 0, data.y || 0)\n    }\n  },\n  skewX(transform: SVGTransform, angle: number) {\n    transform.setSkewX(angle)\n  },\n  skewY(transform: SVGTransform, angle: number) {\n    transform.setSkewY(angle)\n  },\n}\nexport function bindTransform(\n  element: DOMElement,\n  signal: Signal,\n  operationsSeq: Partial<TransformMap>[],\n) {\n  const stack = activeStack.get()\n  if (stack.namespace !== 'svg') return\n  if (operationsSeq.length === 0) return\n  //@ts-ignore\n  const transformList: SVGTransformList = element.transform.baseVal\n  const svg = stack.svgRoot\n  for (let i = 0; i < operationsSeq.length; i++) {\n    const operations = operationsSeq[i]\n    for (const key in operations) {\n      applyTransform(\n        svg!,\n        signal,\n        transformList,\n        //@ts-ignore\n        operations[key],\n        //@ts-ignore\n        transformResolvers[key],\n        key as any,\n      )\n    }\n  }\n}\nfunction setText(textNode: Text, text: string | number | boolean) {\n  textNode.replaceData(0, (textNode.textContent || '').length, String(text))\n}\n\nexport function bindText(\n  element: DOMElement,\n  signal: Signal,\n  stores: StoreOrData<DOMProperty>[],\n) {\n  for (let i = 0; i < stores.length; i++) {\n    const store = stores[i]\n    if (store === null) continue\n    const textNode = document.createTextNode('')\n    element.appendChild(textNode)\n    if (is.unit(store)) {\n      debounceRaf(signal, store, setText.bind(null, textNode))\n    } else {\n      setText(textNode, store)\n    }\n  }\n}\nfunction setFocus(element: DOMElement) {\n  element.focus()\n}\nexport function bindFocus(\n  element: DOMElement,\n  signal: Signal,\n  events: Event<any>[],\n) {\n  for (let i = 0; i < events.length; i++) {\n    domOperation(true, signal, events[i], setFocus.bind(null, element))\n  }\n}\nfunction setBlur(element: DOMElement) {\n  element.blur()\n}\nexport function bindBlur(\n  element: DOMElement,\n  signal: Signal,\n  events: Event<any>[],\n) {\n  for (let i = 0; i < events.length; i++) {\n    domOperation(true, signal, events[i], setBlur.bind(null, element))\n  }\n}\n","import {Store, Event, withRegion} from 'effector'\n\nimport {\n  DOMElement,\n  Stack,\n  ElementDraft,\n  MergedBindings,\n  NSType,\n  PropertyMap,\n  TransformMap,\n  StoreOrData,\n  DOMProperty,\n  StylePropertyMap,\n  Signal,\n} from './index.h'\nimport {nodeStack, activeStack} from './stack'\nimport {appendBatch, forwardStacks} from './using'\nimport {createSignal} from './createSignal'\nimport {\n  bindAttr,\n  bindData,\n  bindHandler,\n  bindStyleProp,\n  bindStyleVar,\n  bindTransform,\n  bindText,\n  bindVisible,\n  bindFocus,\n  bindBlur,\n} from './bindings'\nimport {document} from './documentResolver'\nimport {spec} from '../h'\n\nexport function h(tag: string, cb: () => void): void\nexport function h(\n  tag: string,\n  spec: {\n    attr?: PropertyMap\n    data?: PropertyMap\n    transform?: Partial<TransformMap>\n    text?: StoreOrData<DOMProperty>\n    visible?: Store<boolean>\n    style?: StylePropertyMap\n    styleVar?: PropertyMap\n    focus?: {\n      focus?: Event<any>\n      blur?: Event<any>\n    }\n    handler?: Partial<\n      {[K in keyof HTMLElementEventMap]: Event<HTMLElementEventMap[K]>}\n    >\n  },\n): void\nexport function h(\n  tag: string,\n  opts: {type?: 'svg'; noAppend?: boolean},\n  cb?: () => void,\n): void\nexport function h(tag: string, opts: any, cb?: any) {\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  }\n  if (opts === undefined) opts = {}\n  const {noAppend = false} = opts\n  const parent = activeStack.get()\n  const parentNS: NSType = parent ? parent.namespace : 'html'\n  let ns: NSType = parentNS\n  let type = 'html'\n  if ('type' in opts) {\n    type = opts.type\n    ns = opts.type\n  } else {\n    ns = type = parentNS === 'svg' ? 'svg' : 'html'\n  }\n  if (tag === 'svg') {\n    type = 'svg'\n    ns = 'svg'\n  }\n  const node =\n    type === 'svg'\n      ? document.createElementNS('http://www.w3.org/2000/svg', tag)\n      : document.createElement(tag)\n  if (parentNS === 'foreignObject') {\n    node.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml')\n    ns = 'html'\n  } else if (tag === 'svg') {\n    node.setAttribute('xmlns', 'http://www.w3.org/2000/svg')\n    ns = 'svg'\n  } else if (tag === 'foreignObject') {\n    ns = 'foreignObject'\n  }\n  const signal = createSignal()\n  const draft: ElementDraft = {\n    type: 'element',\n    pure: false,\n    tag,\n    attr: [],\n    data: [],\n    visible: [],\n    text: [],\n    styleVar: [],\n    styleProp: [],\n    handler: [],\n    transform: [],\n    focus: [],\n    blur: [],\n  }\n  const currentStack: Stack = {\n    parent: null,\n    signal,\n    namespace: ns,\n    targetElement: node,\n    svgRoot: null,\n    child: [],\n    locality: {\n      sibling: {\n        left: {ref: null},\n        right: {ref: null},\n      },\n      child: {\n        first: {ref: null},\n        last: {ref: null},\n      },\n    },\n    node: draft,\n    mountStatus: 'initial',\n    visible: true,\n  }\n  if (parent) {\n    forwardStacks(parent, currentStack)\n  }\n  if (tag === 'svg') {\n    currentStack.svgRoot = node as SVGSVGElement\n  } else if (parent) {\n    currentStack.svgRoot = parent.svgRoot\n  }\n  activeStack.replace(currentStack)\n  // node.__SIGNAL__ = signal\n  if (cb) {\n    initNode(signal, node, parent, cb)\n  } else {\n    draft.pure = true\n    spec(opts)\n  }\n  const merged = applyNodeDraft()\n  activeStack.replace(parent)\n  currentStack.visible = !merged.visible || merged.visible.getState()\n  if (!noAppend) {\n    if (nodeStack.length > 0) {\n      if (currentStack.visible)\n        nodeStack[nodeStack.length - 1].append.push(node)\n    }\n  }\n}\n\nfunction applyNodeDraft() {\n  const merged = mergeNodeDraft()\n  const stack = activeStack.get()\n  const element = stack.targetElement\n  const signal = stack.signal\n  bindAttr(element, signal, merged.attr)\n  bindData(element, signal, merged.data)\n  bindHandler(element, signal, merged.handler)\n  bindStyleProp(element, signal, merged.styleProp)\n  bindStyleVar(element, signal, merged.styleVar)\n  bindTransform(element, signal, merged.transform)\n  bindText(element, signal, merged.text)\n  bindVisible(element, signal, merged.visible)\n  bindFocus(element, signal, merged.focus)\n  bindBlur(element, signal, merged.blur)\n  return merged\n}\n\nfunction mergeNodeDraft() {\n  const draft = activeStack.getElementNode()\n  const merged: MergedBindings = {\n    attr: {},\n    data: {},\n    visible: null,\n    text: [],\n    styleVar: {},\n    styleProp: {},\n    handler: [],\n    transform: draft.transform,\n    focus: draft.focus,\n    blur: draft.blur,\n  }\n  for (let i = 0; i < draft.handler.length; i++) {\n    const {options, map} = draft.handler[i]\n    options.passive = options.prevent ? false : options.passive\n\n    for (const key in map) {\n      //@ts-ignore\n      const evt = map[key]\n      //@ts-ignore\n      map[key] = function(e) {\n        if (options.prevent) e.preventDefault()\n        if (options.stop) e.stopPropagation()\n        evt(e)\n      }\n    }\n    merged.handler.push({options, map})\n  }\n  for (let i = 0; i < draft.attr.length; i++) {\n    const map = draft.attr[i]\n    for (const key in map) {\n      if (key === 'xlink:href') {\n        merged.attr.href = map[key]\n      } else {\n        merged.attr[key] = map[key]\n      }\n    }\n  }\n  for (let i = 0; i < draft.data.length; i++) {\n    const map = draft.data[i]\n    for (const key in map) {\n      merged.data[key] = map[key]\n    }\n  }\n  if (draft.visible.length > 0) {\n    merged.visible = draft.visible[draft.visible.length - 1]\n  }\n  merged.text = draft.text\n  for (let i = 0; i < draft.styleVar.length; i++) {\n    const map = draft.styleVar[i]\n    for (const key in map) {\n      merged.styleVar[key] = map[key]\n    }\n  }\n  for (let i = 0; i < draft.styleProp.length; i++) {\n    const map = draft.styleProp[i]\n    for (const key in map) {\n      merged.styleProp[key] = map[key]\n    }\n  }\n  return merged\n}\n\nfunction initNode(\n  signal: Signal,\n  node: DOMElement,\n  parent: Stack,\n  cb: () => void,\n) {\n  let succ = false\n  nodeStack.push({node, append: [], reverse: false})\n  try {\n    withRegion(signal, cb)\n    succ = true\n  } finally {\n    appendBatch(nodeStack.pop()!)\n    if (!succ) {\n      activeStack.replace(parent)\n    }\n  }\n}\n","export function bind<A, R>(cb: (a: A) => R, a: A): (() => R)\nexport function bind<A, B, R>(cb: (a: A, b: B) => R, a: A): ((b: B) => R)\nexport function bind<A, B, C, R>(cb: (a: A, b: B, c: C) => R, a: A): ((b: B, c: C) => R)\nexport function bind<A, B, C, D, R>(cb: (a: A, b: B, c: C, d: D) => R, a: A): ((b: B, c: C, d: D) => R)\nexport function bind(cb: Function, data: any) {\n  return cb.bind(null, data)\n}\n","import {Store} from 'effector'\nimport {activeStack} from './render/stack'\nimport {own} from './own'\nimport {bind} from './render/bind'\n\nexport function remap<T extends {[field: string]: any}, S extends keyof T>(\n  store: Store<T>,\n  key: S,\n): Store<T[S]>\nexport function remap<\n  T extends {[field: string]: any},\n  S extends {[field: number]: keyof T} | {[field: string]: keyof T}\n>(\n  store: Store<T>,\n  shape: S,\n): {[K in keyof S]: S[K] extends keyof T ? Store<T[S[K]]> : never}\n\nexport function remap(\n  store: Store<any>,\n  shape: string | Array<any> | {[field: string]: any},\n) {\n  const stack = activeStack.get()\n  if (Array.isArray(shape)) {\n    const result = [] as any\n    for (let i = 0; i < shape.length; i++) {\n      result[i] = store.map(bind(readField, shape[i]))\n    }\n    if (stack) {\n      own(stack.signal, result)\n    }\n    return result\n  }\n  if (typeof shape === 'object' && shape !== null) {\n    const owned = [] as any[]\n    const result = {} as any\n    for (const key in shape) {\n      result[key] = store.map(bind(readField as any, shape[key]))\n      owned.push(result[key])\n    }\n    if (stack) {\n      own(stack.signal, owned)\n    }\n    return result\n  }\n  const result = store.map(bind(readField as any, shape))\n  if (stack) {\n    own(stack.signal, result)\n  }\n  return result\n}\n\nexport function storeField<T extends {[field: string]: any}, K extends keyof T>(\n  store: Store<T>,\n  key: K,\n): Store<T[K]> {\n  const result = store.map(bind(readField, key))\n  const stack = activeStack.get()\n  if (stack) {\n    own(stack.signal, [result])\n  }\n  return result\n}\n\nfunction readField<T extends {[field: string]: any}, K extends keyof T>(\n  key: K,\n  value: T,\n) {\n  return value[key]\n}\n","import {\n  Store,\n  createStore,\n  createEvent,\n  is,\n  launch,\n  sample,\n  withRegion,\n} from 'effector'\nimport {Signal, DOMElement, Stack, ListItemType} from './index.h'\nimport {own} from '../own'\nimport {beginMark, endMark} from './mark'\nimport {nodeStack, activeStack} from './stack'\nimport {forwardStacks} from './using'\nimport {createSignal} from './createSignal'\nimport {createWatch} from './createWatch'\nimport {dynamicQueue, dynamicQueueFlat} from '../batch'\nimport {bind} from './bind'\nimport {remap} from '../storeField'\nimport {setRightSibling, setLeftSibling, makeSiblings} from './locality'\nimport {findNearestVisibleNode} from './nearestNode'\nimport {document} from './documentResolver'\nimport {h} from './h'\n\ntype ListContext = {\n  parentNode: DOMElement\n  cb: (opts: any) => void\n  shortName: string\n  reverse: boolean\n  parentStack: Stack\n  getID: (item: any, i: number) => string | number | symbol\n  fields: string[] | null\n  visible: ((state: any) => boolean) | null\n}\n\nexport function tree<T, K extends keyof T, C extends keyof T>(\n  {\n    key,\n    child,\n    source,\n  }: {\n    key: T[K] extends string | number | symbol ? K : never\n    child: T[C] extends T[] ? C : never\n    source: Store<T[]>\n  },\n  cb: (\n    opts: {store: Store<T>; key: T[K]; signal: Signal},\n    child: () => void,\n  ) => void,\n) {\n  list({source, key}, ({store, key: currentKey, signal}) => {\n    const childList = remap(store, child)\n    cb({store, key: currentKey, signal}, () => {\n      //@ts-ignore\n      tree({key, child, source: childList as Store<T[]>}, cb)\n    })\n  })\n}\n\nexport function list<T>(\n  source: Store<T[]>,\n  cb: (opts: {store: Store<T>; index: number; signal: Signal}) => void,\n): void\nexport function list<\n  T,\n  K extends keyof T,\n  Query extends [keyof T] | ReadonlyArray<keyof T> | (keyof T)[]\n>(\n  opts: {\n    key: T[K] extends string | number ? K : never\n    source: Store<T[]>\n    fields: Query\n    visible?: (state: T) => boolean\n  },\n  cb: (opts: {\n    store: Store<T>\n    fields: {\n      [K in keyof Query]: Query[K] extends keyof T ? Store<T[Query[K]]> : never\n    }\n    key: T[K]\n    signal: Signal\n  }) => void,\n): void\nexport function list<T, K extends keyof T>(\n  {\n    key,\n    source,\n    reverse,\n  }: {\n    key: T[K] extends string | number | symbol ? K : never\n    source: Store<T[]>\n    reverse?: boolean\n    visible?: (state: T) => boolean\n  },\n  cb: (opts: {store: Store<T>; key: T[K]; signal: Signal}) => void,\n): void\nexport function list<T, K extends keyof T>(\n  {\n    key,\n    source,\n    reverse,\n    fields,\n  }: {\n    key: T[K] extends string | number | symbol ? K : never\n    source: Store<T[]>\n    reverse?: boolean\n    fields?: string[]\n    visible?: (state: T) => boolean\n  },\n  cb: (opts: {store: Store<T>; key: T[K]; signal: Signal}) => void,\n): void\nexport function list<T, K extends keyof T>({\n  source,\n  fn,\n  key,\n  reverse,\n  fields,\n}: {\n  source: Store<T[]>\n  fn: (opts: {store: Store<T>; key: T[K]; signal: Signal}) => void\n  key: T[K] extends string | number | symbol ? K : never\n  reverse?: boolean\n  fields?: string[]\n  visible?: (state: T) => boolean\n}): void\nexport function list<T>(opts: any, cb = (opts: any) => {}) {\n  cb = opts.fn ? opts.fn : cb\n\n  let source\n  let reverse = false\n  let getID: (item: T, i: number) => string | number | symbol\n  if (is.store(opts)) {\n    getID = indexIDGetter\n    source = opts\n  } else {\n    const key = opts.key\n    getID = bind(keyIDGetter, key)\n    source = opts.source\n    reverse = !!opts.reverse\n  }\n  const parentStack = activeStack.get()\n\n  const parentSignal = createSignal()\n  const currentStack: Stack = {\n    parent: parentStack,\n    signal: parentSignal,\n    namespace: parentStack.namespace,\n    targetElement: parentStack.targetElement,\n    svgRoot: parentStack.svgRoot,\n    child: [],\n    locality: {\n      sibling: {\n        left: {ref: null},\n        right: {ref: null},\n      },\n      child: {\n        first: {ref: null},\n        last: {ref: null},\n      },\n    },\n    node: {\n      type: 'list',\n      pure: false,\n      reverse,\n      key: is.store(opts) ? {type: 'index'} : {type: 'key', key: opts.key},\n      store: source,\n      cb,\n    },\n    mountStatus: 'initial',\n    visible: true,\n  }\n  // parentSignal.scope.stack = currentStack\n  forwardStacks(parentStack, currentStack)\n  activeStack.replace(currentStack)\n\n  const context: ListContext = {\n    parentNode: parentStack.targetElement,\n    cb,\n    shortName: source.shortName,\n    reverse,\n    parentStack: currentStack,\n    getID,\n    fields: opts.fields ? opts.fields : null,\n    visible: opts.visible ? opts.visible : null,\n  }\n\n  const updates = createStore(update(context, [], source.getState()))\n  own(parentSignal, [updates])\n\n  createWatch(parentSignal, bind(clearParentSignal, updates))\n  sample({\n    source: updates,\n    clock: source,\n    fn: bind(update as any, context),\n    target: updates,\n  })\n  activeStack.replace(parentStack)\n}\n\nfunction update<T>(context: ListContext, records: Stack[], input: T[]) {\n  beginMark('list update [' + context.shortName + ']')\n  const skipNode: boolean[] = Array(input.length).fill(false)\n  const keys = input.map(context.getID)\n  const newRecords: Stack[] = []\n  const resultRecords: Stack[] = []\n  const removedRecords: Stack[] = []\n  for (let i = 0; i < records.length; i++) {\n    const stack = records[i]\n    const record = stack.node as ListItemType\n    const index = keys.indexOf(record.key)\n    if (index !== -1) {\n      resultRecords.push(stack)\n      skipNode[index] = true\n      if (record.store.getState() !== input[index])\n        launch({\n          target: record.store,\n          params: input[index],\n          defer: true,\n        })\n    } else {\n      removedRecords.push(stack)\n    }\n  }\n  if (removedRecords.length > 0) {\n    for (let i = 0; i < removedRecords.length; i++) {\n      const item = removedRecords[i]\n      const {node, locality} = item\n      ;(node as ListItemType).active = false\n      //@ts-ignore\n      ;(node as ListItemType).store = null\n      const left = locality.sibling.left.ref\n      const right = locality.sibling.right.ref\n      makeSiblings(left, right)\n      setRightSibling(item, null)\n      setLeftSibling(item, null)\n    }\n    launch({\n      target: removeNodesFromDOM,\n      params: removedRecords,\n      defer: true,\n    })\n  }\n  let lastItem: Stack | null =\n    resultRecords.length > 0 ? resultRecords[resultRecords.length - 1] : null\n  for (let i = 0; i < input.length; i++) {\n    if (skipNode[i]) continue\n    const item = input[i]\n    const store = createStore(item)\n    const signal = createSignal()\n    const fields = context.fields ? remap(store, context.fields as any[]) : null\n    own(signal, [store])\n    const id = context.getID(item, i)\n    const stack: Stack = {\n      parent: context.parentStack,\n      signal,\n      namespace: context.parentStack.namespace,\n      targetElement: context.parentStack.targetElement,\n      svgRoot: context.parentStack.svgRoot,\n      child: [],\n      locality: {\n        sibling: {\n          left: {ref: null},\n          right: {ref: null},\n        },\n        child: {\n          first: {ref: null},\n          last: {ref: null},\n        },\n      },\n      node: {\n        type: 'listItem',\n        pure: false,\n        key: id as any,\n        index: id as any,\n        store,\n        signal,\n        active: true,\n        nodes: [],\n        fields,\n        visible: context.visible ? [store.map(context.visible)] : [],\n      },\n      mountStatus: 'initial',\n      visible: true,\n    }\n    makeSiblings(lastItem, stack)\n    lastItem = stack\n    forwardStacks(context.parentStack, stack)\n    newRecords.push(stack)\n    resultRecords.push(stack)\n  }\n  if (newRecords.length > 0) {\n    launch({\n      target: applyNewRecordsEvent,\n      params: {context, list: newRecords},\n      defer: true,\n    })\n  }\n  endMark('list update [' + context.shortName + ']')\n  return resultRecords\n}\ntype AppendElements = {\n  node: DOMElement\n  append: Array<{\n    listItemStack: Stack\n    listItem: ListItemType\n    appended: DOMElement[]\n  }>\n  reverse: boolean\n}\n\nconst {trigger: appendBatchEvent} = dynamicQueueFlat<AppendElements>({\n  mark: 'append DOM nodes',\n  fn: function appendDOMNode(block) {\n    for (let i = 0; i < block.append.length; i++) {\n      const child = block.append[i]\n      if (child.listItem.active === false) continue\n      if (child.appended.length === 0) continue\n      const frag = document.createDocumentFragment()\n      if (!block.reverse) {\n        for (let j = 0; j < child.appended.length; j++) {\n          frag.appendChild(child.appended[j])\n        }\n      } else {\n        for (let j = child.appended.length - 1; j >= 0; j--) {\n          frag.appendChild(child.appended[j])\n        }\n      }\n      insertElement(child.listItemStack, frag, block.reverse, block.node)\n    }\n  },\n})\n\nfunction insertElement(\n  stack: Stack,\n  element: Node,\n  reverse: boolean,\n  parent: DOMElement,\n) {\n  const nearestVisible = findNearestVisibleNode(stack)\n  if (nearestVisible && parent.contains(nearestVisible.targetElement)) {\n    if (reverse) {\n      nearestVisible.targetElement.before(element)\n    } else {\n      nearestVisible.targetElement.after(element)\n    }\n  } else {\n    parent.appendChild(element)\n  }\n}\n\ntype AddRecords = {\n  context: ListContext\n  list: Stack[]\n}\n\nconst {trigger: applyNewRecordsEvent} = dynamicQueueFlat<AddRecords>({\n  mark: 'addRecords',\n  fn: function addRecords({context, list}) {\n    const {shortName, parentStack, parentNode, cb, reverse} = context\n    beginMark('initRecord ' + shortName)\n    const currentActiveStack = activeStack.get()\n    activeStack.replace(parentStack)\n\n    const nodes = [] as {\n      listItemStack: Stack\n      listItem: ListItemType\n      appended: DOMElement[]\n    }[]\n    const appended = [] as DOMElement[]\n    nodeStack.push({\n      node: parentNode,\n      append: appended,\n      reverse,\n    })\n    for (let j = 0; j < list.length; j++) {\n      const stack: Stack = list[j]\n      const item = stack.node as ListItemType\n      if (!item.active) continue\n      activeStack.replace(stack)\n      withRegion(stack.signal, bind(cb, item))\n      for (let k = 0; k < appended.length; k++) {\n        item.nodes.push(appended[k])\n      }\n      if (item.visible.length > 0) {\n        withRegion(stack.signal, () => {\n          const visible = item.visible[item.visible.length - 1]\n          visible.updates.watch(visible => {\n            if (item.active === false) return\n            if (visible) {\n              const frag = document.createDocumentFragment()\n              if (!reverse) {\n                for (let j = 0; j < item.nodes.length; j++) {\n                  frag.appendChild(item.nodes[j])\n                }\n              } else {\n                for (let j = item.nodes.length - 1; j >= 0; j--) {\n                  frag.appendChild(item.nodes[j])\n                }\n              }\n              insertElement(stack, frag, reverse, parentNode)\n            } else {\n              for (let i = 0; i < item.nodes.length; i++) {\n                item.nodes[i].remove()\n              }\n            }\n          })\n          if (visible.getState()) {\n            nodes.push({\n              listItemStack: stack,\n              appended: appended.slice(),\n              listItem: item,\n            })\n          }\n        })\n      } else {\n        nodes.push({\n          listItemStack: stack,\n          appended: appended.slice(),\n          listItem: item,\n        })\n      }\n      appended.length = 0\n    }\n    nodeStack.pop()\n    if (nodes.length > 0) {\n      launch({\n        target: appendBatchEvent,\n        params: {\n          node: parentNode,\n          append: nodes,\n          reverse,\n        },\n        defer: true,\n      })\n    }\n    activeStack.replace(currentActiveStack)\n    endMark('initRecord ' + shortName)\n  },\n})\n\nconst indexIDGetter = (item: any, i: number) => i\nconst keyIDGetter = (key: string, item: any, i: number) => item[key]\n\nconst removeNodesFromDOM = createEvent<Stack[]>()\n\ndynamicQueue<Stack, Signal, any>({\n  trigger: removeNodesFromDOM,\n  priority: 'high',\n  mark: 'runSignals',\n  flatten: ({signal}) => [signal],\n  fn: function launchSignal(signal) {\n    if (!signal.scope) return\n    launch({\n      target: signal,\n      params: null,\n      defer: false,\n    })\n  },\n})\n\ndynamicQueue<Stack, DOMElement, DOMElement>({\n  trigger: removeNodesFromDOM,\n  priority: 'high',\n  mark: 'remove DOM nodes',\n  flatten({node}) {\n    const {nodes} = node as ListItemType\n    return nodes\n  },\n  fn: function removeDOMNode(item) {\n    item.remove()\n    return item\n  },\n})\n\nconst clearParentSignal = (updates: Store<Stack[]>) => {\n  const allRecords = updates.getState()\n  for (let i = 0; i < allRecords.length; i++) {\n    const listItem = allRecords[i].node as ListItemType\n    listItem.active = false\n    //@ts-ignore\n    listItem.store = null\n  }\n  launch({\n    target: removeNodesFromDOM,\n    params: allRecords,\n    defer: true,\n  })\n}\n","import {Store, Event, createNode} from 'effector'\n\nimport {\n  PropertyMap,\n  TransformMap,\n  StoreOrData,\n  StylePropertyMap,\n  DOMProperty,\n  DOMElement,\n} from './render/index.h'\nimport {activeStack} from './render/stack'\nimport {own} from './own'\n\nexport {using} from './render/using'\nexport {h} from './render/h'\n// export {Signal} from './render/index.h'\nexport {list, tree} from './render/list'\n\nexport function explicitUnmount(unmountOn: Event<any>) {\n  const stack = activeStack.get()\n  if (stack) {\n    createNode({\n      node: [],\n      //@ts-ignore\n      parent: unmountOn,\n      //@ts-ignore\n      child: stack.signal,\n      //@ts-ignore\n      family: {\n        type: 'crosslink',\n        owners: [stack.signal, unmountOn],\n      },\n    })\n  }\n}\n\nexport function signalOwn<T>(value: T): T {\n  const stack = activeStack.get()\n  if (stack) {\n    own(stack.signal, [value])\n  }\n  return value\n}\n\nfunction assertElementNode(extensionName: string) {\n  const stack = activeStack.get()\n  if (stack.node.type !== 'element' && stack.node.type !== 'using') {\n    throw Error(\n      `\"${extensionName}\" extension can be used only with element nodes, got \"${stack.node.type}\"`,\n    )\n  }\n}\n\nexport function nodeMethod<K extends keyof DOMElement>(\n  method: K,\n): DOMElement[K] extends Function ? DOMElement[K] : never\nexport function nodeMethod<T extends DOMElement, K extends keyof T>(\n  method: K,\n): T[K] extends Function ? T[K] : never\nexport function nodeMethod<K extends keyof DOMElement>(\n  method: K,\n): DOMElement[K] extends Function ? DOMElement[K] : never {\n  let item: DOMElement\n  node(e => {\n    item = e\n  })\n  return ((...args: any[]) => {\n    if (!item) {\n      // throw Error('node not mounted yet')\n      return\n    }\n    return item[method](...args)\n  }) as any\n}\n\nexport function node(fn: (node: DOMElement) => void) {\n  const stack = activeStack.get()\n  //@ts-ignore\n  if (!stack.targetElement.__STATIC__) {\n    fn(stack.targetElement)\n  }\n}\nexport type Specification = {\n  attr?: PropertyMap\n  data?: PropertyMap\n  transform?: Partial<TransformMap>\n  text?: StoreOrData<DOMProperty>\n  visible?: Store<boolean>\n  style?: {\n    prop?: StylePropertyMap\n    val?: PropertyMap\n  }\n  focus?: {\n    focus?: Event<any>\n    blur?: Event<any>\n  }\n  handler?: Partial<\n    {[K in keyof HTMLElementEventMap]: Event<HTMLElementEventMap[K]>}\n  >\n}\nexport function spec(spec: {\n  attr?: PropertyMap\n  data?: PropertyMap\n  transform?: Partial<TransformMap>\n  text?: StoreOrData<DOMProperty>\n  visible?: Store<boolean>\n  style?: StylePropertyMap\n  styleVar?: PropertyMap\n  focus?: {\n    focus?: Event<any>\n    blur?: Event<any>\n  }\n  handler?: Partial<\n    {[K in keyof HTMLElementEventMap]: Event<HTMLElementEventMap[K]>}\n  >\n}) {\n  if (spec.attr) attr(spec.attr)\n  if (spec.data) data(spec.data)\n  if (spec.transform) transform(spec.transform)\n  //@ts-ignore\n  if ('text' in spec) text(spec.text)\n  //@ts-ignore\n  if ('visible' in spec) visible(spec.visible)\n  if (spec.style || spec.styleVar)\n    style({\n      prop: spec.style,\n      val: spec.styleVar,\n    })\n  if (spec.focus) focus(spec.focus)\n  if (spec.handler) handler(spec.handler)\n}\n\nexport function attr(map: PropertyMap) {\n  assertElementNode('attr')\n  activeStack.getElementNode().attr.push(map)\n}\nexport function data(dataset: PropertyMap) {\n  assertElementNode('data')\n  activeStack.getElementNode().data.push(dataset)\n}\nexport function transform(operations: Partial<TransformMap>) {\n  assertElementNode('transform')\n  activeStack.getElementNode().transform.push(operations)\n}\nexport function text(store: StoreOrData<DOMProperty>) {\n  assertElementNode('text')\n  activeStack.getElementNode().text.push(store)\n}\nexport function visible(visible: Store<boolean>) {\n  const stack = activeStack.get()\n  if (\n    stack.node.type !== 'element' &&\n    stack.node.type !== 'using' &&\n    stack.node.type !== 'listItem'\n  ) {\n    throw Error(\n      `\"visible\" extension can be used only with element or listItem nodes, got \"${stack.node.type}\"`,\n    )\n  }\n  activeStack.getElementNode().visible.push(visible)\n}\n\nexport function style({\n  prop,\n  val,\n}: {\n  prop?: StylePropertyMap\n  val?: PropertyMap\n}) {\n  assertElementNode('style')\n  if (prop) {\n    activeStack.getElementNode().styleProp.push(prop)\n  }\n  if (val) {\n    activeStack.getElementNode().styleVar.push(val)\n  }\n}\n\nexport function handler(\n  map: Partial<\n    {[K in keyof HTMLElementEventMap]: Event<HTMLElementEventMap[K]>}\n  >,\n): void\nexport function handler(\n  options: {passive?: boolean; capture?: boolean},\n  map: Partial<\n    {[K in keyof HTMLElementEventMap]: Event<HTMLElementEventMap[K]>}\n  >,\n): void\nexport function handler(options: any, map?: any) {\n  assertElementNode('handler')\n  if (map === undefined) {\n    map = options\n    options = {}\n  }\n  const {\n    passive = true,\n    capture = false,\n    prevent = false,\n    stop = false,\n  } = options\n  activeStack.getElementNode().handler.push({\n    options: {passive, capture, prevent, stop},\n    map,\n  })\n}\n\nexport function focus({focus, blur}: {focus?: Event<any>; blur?: Event<any>}) {\n  assertElementNode('focus')\n  const node = activeStack.getElementNode()\n  if (focus) node.focus.push(focus)\n  if (blur) node.blur.push(blur)\n}\n","import {combine as originalCombine, Store} from 'effector'\nimport {signalOwn} from './h'\n\ntype Tuple<T = unknown> = [T] | T[]\ntype Combinable = {[key: string]: Store<any>} | Tuple<Store<any>>\ntype GetCombinedValue<T> = {\n  [K in keyof T]: T[K] extends Store<infer U> ? U : never\n}\n\nexport function map<T, S>(\n  store: Store<T>,\n  {fn}: {fn: (value: T) => S},\n): Store<S> {\n  console.error('separate map method is deprecated, use store.map as usual')\n  return signalOwn(store.map(fn))\n}\n\nexport function combine<A extends Combinable, B>({\n  source,\n  fn,\n}: {\n  source: A\n  fn(source: GetCombinedValue<A>): B\n}): Store<B> {\n  console.error('separate combine method is deprecated, use common combine method as usual')\n  return signalOwn(originalCombine(source, fn))\n}\n","import {Store, createStore, combine} from 'effector'\nimport {list} from './render/list'\n\nexport function variant<State extends {[key: string]: any}>(\n  key: Store<keyof State>,\n  cases: Partial<{[K in keyof State]: () => void}>,\n) {\n  const caseList = createStore(\n    Object.entries(cases).map(([key, val]) => ({key, val: val!})),\n  )\n  const caseListWithVisibility = combine(caseList, key, (list, key) =>\n    list.map(e => ({\n      key: e.key,\n      val: e.val,\n      visible: e.key === key,\n    })),\n  )\n  list({\n    source: caseListWithVisibility,\n    key: 'key',\n    visible: ({visible}) => visible,\n    fn({store}) {\n      store.getState().val()\n    },\n  })\n}\n","import {StackRecord, Stack, BindingsDraft} from './index.h'\n\nexport const nodeStack: StackRecord[] = []\n\nlet currentActiveStack: Stack\n\nexport const activeStack = {\n  get: () => currentActiveStack,\n  replace(stack: Stack) {\n    currentActiveStack = stack\n  },\n  getElementNode: () => currentActiveStack.node as BindingsDraft\n}\n","import * as customDocument from './document'\nexport const domDocument = typeof document !== 'undefined' ? document : null\nexport {customDocument}\nlet doc = domDocument!\nexport {doc as document}\nexport const useCustomDocument = () => {\n  //@ts-ignore\n  doc = customDocument\n}\n\nexport const useDOMDocument = () => {\n  //@ts-ignore\n  doc = domDocument\n}\n","import {USE_PERF} from '../env'\n\nexport let beginMark: (label: string) => void\nexport let endMark: (label: string) => void\nif (USE_PERF && typeof performance !== 'undefined' && performance.mark) {\n  beginMark = label => {\n    performance.mark('☄️ ' + label + ' start')\n  }\n  endMark = label => {\n    try {\n      performance.measure('☄️ ' + label, '☄️ ' + label + ' start')\n    } catch (err) {} // Clear marks immediately to avoid growing buffer.\n\n    performance.clearMarks('☄️ ' + label + ' start')\n    performance.clearMeasures('☄️ ' + label)\n  }\n} else {\n  beginMark = label => {}\n  endMark = label => {}\n}\n","export let now: () => number\n\nif (typeof performance !== 'undefined' && performance.now) {\n  now = () => performance.now()\n} else if (typeof process !== 'undefined' && process.hrtime) {\n  now = () => {\n    const hr = process.hrtime()\n    return (hr[0] * 1e9 + hr[1]) / 1e6\n  }\n} else {\n  now = () => Date.now()\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n",null,"export function forIn<T>(\n  obj: Record<string, T>,\n  cb: (value: T, key: string) => void,\n) {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = (list: any[], item: any) => list.includes(item)\n\nexport const removeItem = (list: any[], item: any) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport const add = <T>(list: T[], item: T) => list.push(item)\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<K, T>(\n  list: Map<K, T>,\n  fn: (item: T, key: K) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list: any, fn: Function) {\n  list.forEach(fn)\n}\n","export function assert(condition: any, message: string): asserts condition {\n  if (!condition) throw Error(message)\n}\n\nexport const deprecate = (\n  condition: any,\n  subject: string,\n  suggestion: string,\n) =>\n  !condition &&\n  console.error(`${subject} is deprecated, use ${suggestion} instead`)\n","import {getParent, getMeta} from './getter'\nimport {createNode} from './createNode'\nimport type {Template} from '../forest/index.h'\n\ntype RegionStack = {\n  parent: RegionStack | null\n  value: any\n  template: any\n  sidRoot?: string\n}\n\nexport let regionStack: RegionStack | null = null\n\nexport const readTemplate = (): Template | null =>\n  regionStack && regionStack.template\nexport const readSidRoot = (sid?: string | null) => {\n  if (sid && regionStack && regionStack.sidRoot)\n    sid = `${regionStack.sidRoot}|${sid}`\n  return sid\n}\n\nexport function withRegion(unit: any, cb: () => void) {\n  regionStack = {\n    parent: regionStack,\n    value: unit,\n    template: getMeta(unit, 'template') || readTemplate(),\n    sidRoot: getMeta(unit, 'sidRoot') || (regionStack && regionStack.sidRoot),\n  }\n  try {\n    return cb()\n  } finally {\n    regionStack = getParent(regionStack)\n  }\n}\n\nexport const withFactory = ({\n  sid,\n  name,\n  loc,\n  method,\n  fn,\n}: {\n  sid: string\n  name?: string\n  loc?: any\n  method?: string\n  fn: () => any\n}) => {\n  const sidNode = createNode({\n    meta: {sidRoot: readSidRoot(sid), name, loc, method},\n  })\n  return withRegion(sidNode, fn)\n}\n","import type {Node, NodeUnit, Cmd} from './index.h'\nimport {getGraph, getOwners, getLinks, getValue} from './getter'\nimport {nextNodeID} from './id'\nimport {CROSSLINK} from './tag'\nimport {regionStack} from './region'\nimport {own} from './own'\nimport {add, forEach} from './collection'\n\nconst arrifyNodes = (\n  list: NodeUnit | Array<NodeUnit | NodeUnit[]> = [],\n): Node[] => (Array.isArray(list) ? list : [list]).flat().map(getGraph)\n\nexport function createNode({\n  node = [],\n  from,\n  source,\n  parent = from || source,\n  to,\n  target,\n  child = to || target,\n  scope = {},\n  meta = {},\n  family: familyRaw = {type: 'regular'},\n  regional,\n}: {\n  node?: Array<Cmd | false | void | null>\n  from?: NodeUnit | NodeUnit[]\n  source?: NodeUnit | NodeUnit[]\n  parent?: NodeUnit | NodeUnit[]\n  to?: NodeUnit | NodeUnit[]\n  target?: NodeUnit | NodeUnit[]\n  child?: NodeUnit | NodeUnit[]\n  scope?: {[name: string]: any}\n  meta?: {[name: string]: any}\n  family?: {\n    type?: 'regular' | 'crosslink' | 'domain'\n    links?: NodeUnit | NodeUnit[]\n    owners?: NodeUnit | Array<NodeUnit | NodeUnit[]>\n  }\n  regional?: boolean\n} = {}): Node {\n  const sources = arrifyNodes(parent)\n  const links = arrifyNodes(familyRaw.links)\n  const owners = arrifyNodes(familyRaw.owners)\n  const seq: Cmd[] = []\n  forEach(node, item => item && add(seq, item))\n  const result: Node = {\n    id: nextNodeID(),\n    seq,\n    next: arrifyNodes(child),\n    meta,\n    scope,\n    family: {\n      type: familyRaw.type || CROSSLINK,\n      links,\n      owners,\n    },\n  }\n  forEach(links, link => add(getOwners(link), result))\n  forEach(owners, owner => add(getLinks(owner), result))\n  forEach(sources, source => add(source.next, result))\n  if (regional && regionStack) {\n    own(getValue(regionStack), [result])\n  }\n  return result\n}\n","export const STORE = 'store'\nexport const EVENT = 'event'\nexport const EFFECT = 'effect'\nexport const DOMAIN = 'domain'\nexport const SCOPE = 'scope'\nexport const SAMPLER = 'sampler'\nexport const CROSSLINK = 'crosslink'\nexport const MAP = 'map'\nexport const STACK = 'stack'\nexport const BARRIER = 'barrier'\nexport const VALUE = 'value'\nexport const SAMPLE = 'sample'\nexport const FILTER = 'filter'\nexport const REG_A = 'a'\n","import type {Leaf} from '../forest/index.h'\n\nimport type {Node, NodeUnit, StateRef} from './index.h'\nimport {readRef} from './stateRef'\nimport {getForkPage, getGraph, getMeta, getParent, getValue} from './getter'\nimport {STORE, EFFECT, SAMPLER, STACK, BARRIER, VALUE, REG_A, MAP} from './tag'\nimport type {Scope} from './unit.h'\nimport {add, forEach} from './collection'\n\n/** Names of priority groups */\ntype PriorityTag = 'child' | 'pure' | 'read' | 'barrier' | 'sampler' | 'effect'\n\nexport type BarrierPriorityTag = 'read' | 'barrier' | 'sampler' | 'effect'\n\n/**\n * Position in the current branch,\n * including call stack, priority type\n * and index of next step in the executed Node\n */\ntype Layer = {\n  idx: number\n  stack: Stack\n  type: PriorityTag\n  id: number\n}\n\n/** Call stack */\nexport type Stack = {\n  value: any\n  a: any\n  b: any\n  c?: any\n  parent: Stack | null\n  node: Node\n  page: Leaf | null\n  scope?: Scope | null | void\n}\n\n/** Queue as linked list or skew heap */\ntype QueueItem = {\n  /** node value */\n  v: Layer\n  /** left node. always null in queue but used in skew heap */\n  l: QueueItem | null\n  /** right node */\n  r: QueueItem | null\n}\ntype QueueBucket = {\n  first: QueueItem | null\n  last: QueueItem | null\n  size: number\n}\n\n/** Dedicated local metadata */\ntype Local = {\n  fail: boolean\n  scope: {[key: string]: any}\n}\n\nlet heap: QueueItem | null = null\n\nconst merge = (a: QueueItem | null, b: QueueItem | null): QueueItem | null => {\n  if (!a) return b\n  if (!b) return a\n\n  let ret\n  if (\n    /**\n     * if both nodes has the same PriorityType\n     * and first node is created after second one\n     */\n    (a.v.type === b.v.type && a.v.id > b.v.id) ||\n    /**\n     * greater priority mean bucket of first node is executed later\n     * e.g  a: \"sampler\", b: \"barrier\"\n     */\n    getPriority(a.v.type) > getPriority(b.v.type)\n  ) {\n    ret = a\n    a = b\n    b = ret\n  }\n  ret = merge(a.r, b)\n  a.r = a.l\n  a.l = ret\n\n  return a\n}\n\n/** queue buckets for each PriorityType */\nconst queue: QueueBucket[] = []\nlet ix = 0\nwhile (ix < 6) {\n  /**\n   * although \"sampler\" and \"barrier\" are using heap instead of linked list,\n   * their buckets are still useful: they maintains size of heap queue\n   */\n  add(queue, {first: null, last: null, size: 0})\n  ix += 1\n}\n\nconst deleteMin = () => {\n  for (let i = 0; i < 6; i++) {\n    const list = queue[i]\n    if (list.size > 0) {\n      /**\n       * bucket 3 is for \"barrier\" PriorityType (used in combine)\n       * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n       */\n      if (i === 3 || i === 4) {\n        list.size -= 1\n        const value = heap!.v\n        heap = merge(heap!.l, heap!.r)\n        return value\n      }\n      if (list.size === 1) {\n        list.last = null\n      }\n      const item = list.first\n      list.first = item!.r\n      list.size -= 1\n      return item!.v\n    }\n  }\n}\nconst pushFirstHeapItem = (\n  type: PriorityTag,\n  page: Leaf | null,\n  node: Node,\n  parent: Stack | null,\n  value: any,\n  scope?: Scope | null | void,\n) =>\n  pushHeap(\n    0,\n    {\n      a: null,\n      b: null,\n      node,\n      parent,\n      value,\n      page,\n      scope,\n    },\n    type,\n  )\nconst pushHeap = (\n  idx: number,\n  stack: Stack,\n  type: PriorityTag,\n  id: number = 0,\n) => {\n  const priority = getPriority(type)\n  const bucket: QueueBucket = queue[priority]\n  const item: QueueItem = {\n    v: {\n      idx,\n      stack,\n      type,\n      id,\n    },\n    l: null,\n    r: null,\n  }\n  /**\n   * bucket 3 is for \"barrier\" PriorityType (used in combine)\n   * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n   */\n  if (priority === 3 || priority === 4) {\n    heap = merge(heap, item)\n  } else {\n    if (bucket.size === 0) {\n      bucket.first = item\n    } else {\n      bucket.last!.r = item\n    }\n    bucket.last = item\n  }\n  bucket.size += 1\n}\n\nconst getPriority = (t: PriorityTag) => {\n  switch (t) {\n    case 'child':\n      return 0\n    case 'pure':\n      return 1\n    case 'read':\n      return 2\n    case BARRIER:\n      return 3\n    case SAMPLER:\n      return 4\n    case EFFECT:\n      return 5\n    default:\n      return -1\n  }\n}\n\nconst barriers = new Set<string | number>()\n\nlet isRoot = true\nexport let isWatch = false\nexport let currentPage: Leaf | null = null\nexport let forkPage: Scope | void | null\nexport const setForkPage = (newForkPage: Scope) => {\n  forkPage = newForkPage\n}\nexport const setCurrentPage = (newPage: Leaf | null) => {\n  currentPage = newPage\n}\n\nconst getPageForRef = (page: Leaf | null, id: string) => {\n  if (page) {\n    while (page && !page.reg[id]) {\n      page = getParent(page)\n    }\n    if (page) return page\n  }\n  return null\n}\nexport const getPageRef = (\n  page: Leaf | null,\n  forkPage: Scope | null | void,\n  node: Node | null,\n  ref: StateRef,\n  isGetState?: boolean,\n) => {\n  const pageForRef = getPageForRef(page, ref.id)\n  if (pageForRef) return pageForRef.reg[ref.id]\n  if (forkPage) {\n    initRefInScope(forkPage!, ref, isGetState)\n    return forkPage.reg[ref.id]\n  }\n  return ref\n}\n\nexport function launch(config: {\n  target: NodeUnit | NodeUnit[]\n  params?: any\n  defer?: boolean\n  page?: Leaf | void | null\n  scope?: Scope | void\n  stack?: Stack | void\n}): void\nexport function launch(unit: NodeUnit, payload?: any, upsert?: boolean): void\nexport function launch(unit: any, payload?: any, upsert?: boolean) {\n  let pageForLaunch = currentPage\n  let stackForLaunch = null\n  let forkPageForLaunch = forkPage\n  if (unit.target) {\n    payload = unit.params\n    upsert = unit.defer\n    pageForLaunch = 'page' in unit ? unit.page : pageForLaunch\n    if (unit[STACK]) stackForLaunch = unit[STACK]\n    forkPageForLaunch = getForkPage(unit) || forkPageForLaunch\n    unit = unit.target\n  }\n  if (forkPageForLaunch && forkPage && forkPageForLaunch !== forkPage) {\n    forkPage = null\n  }\n  if (Array.isArray(unit)) {\n    for (let i = 0; i < unit.length; i++) {\n      pushFirstHeapItem(\n        'pure',\n        pageForLaunch,\n        getGraph(unit[i]),\n        stackForLaunch,\n        payload[i],\n        forkPageForLaunch,\n      )\n    }\n  } else {\n    pushFirstHeapItem(\n      'pure',\n      pageForLaunch,\n      getGraph(unit),\n      stackForLaunch,\n      payload,\n      forkPageForLaunch,\n    )\n  }\n  if (upsert && !isRoot) return\n  /** main execution code */\n  const lastStartedState = {isRoot, currentPage, scope: forkPage, isWatch}\n  isRoot = false\n  let stop: boolean\n  let skip: boolean\n  let node: Node\n  let value: Layer | undefined\n  let page: Leaf | null\n  let reg: Record<string, StateRef> | void\n  kernelLoop: while ((value = deleteMin())) {\n    const {idx, stack, type} = value\n    node = stack.node\n    currentPage = page = stack.page\n    forkPage = getForkPage(stack)\n    if (page) reg = page.reg\n    else if (forkPage) reg = forkPage.reg\n    // reg = (page ? page : forkPage ? forkPage : node).reg\n    const hasPageReg = !!page\n    const hasScopeReg = !!forkPage\n    const local: Local = {\n      fail: false,\n      scope: node.scope,\n    }\n    stop = skip = false\n    for (let stepn = idx; stepn < node.seq.length && !stop; stepn++) {\n      const step = node.seq[stepn]\n      if (step.order) {\n        const {priority, barrierID} = step.order\n        const id = barrierID\n          ? page\n            ? `${page.fullID}_${barrierID}`\n            : barrierID\n          : 0\n        if (stepn !== idx || type !== priority) {\n          if (barrierID) {\n            if (!barriers.has(id)) {\n              barriers.add(id)\n              pushHeap(stepn, stack, priority, barrierID)\n            }\n          } else {\n            pushHeap(stepn, stack, priority)\n          }\n          continue kernelLoop\n        }\n        barrierID && barriers.delete(id)\n      }\n      switch (step.type) {\n        case 'mov': {\n          const data = step.data\n          let value\n          //prettier-ignore\n          switch (data.from) {\n            case STACK: value = getValue(stack); break\n            case REG_A: /** fall-through case */\n            case 'b':\n              value = stack[data.from]\n              break\n            case VALUE: value = data.store; break\n            case STORE:\n              if (reg && !reg[data.store.id]) {\n                // if (!page.parent) {\n                if (hasPageReg) {\n                  const pageForRef = getPageForRef(page, data.store.id)\n                  stack.page = page = pageForRef\n                  if (pageForRef) {\n                    reg = pageForRef.reg\n                  } else if (hasScopeReg) {\n                    initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                    reg = forkPage!.reg\n                  } else {\n                    reg = undefined //node.reg\n                  }\n                } else if (hasScopeReg) {\n                  /** StateRef in Scope.reg created only when needed */\n                  initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                } else {\n                  // console.error('should not happen')\n                  /** StateRef should exists at least in Node itself, but it is not found */\n                }\n                // }\n              }\n              // value = getPageRef(page, forkPage, node, data.store.id).current\n              value = readRef(reg ? reg[data.store.id] || data.store : data.store)\n              break\n          }\n          //prettier-ignore\n          switch (data.to) {\n            case STACK: stack.value = value; break\n            case REG_A: /** fall-through case */\n            case 'b':\n              stack[data.to] = value\n              break\n            case STORE:\n              getPageRef(page, forkPage, node, data.target).current = value\n              break\n          }\n          break\n        }\n        case 'compute':\n          const data = step.data\n          if (data.fn) {\n            isWatch = getMeta(node, 'op') === 'watch'\n            const computationResult = data.safe\n              ? (0 as any, data.fn)(getValue(stack), local.scope, stack)\n              : tryRun(local, data.fn, stack)\n            if (data.filter) {\n              /**\n               * handled edge case: if step.fn will throw,\n               * tryRun will return null\n               * thereby forcing that branch to stop\n               */\n              skip = !computationResult\n            } else {\n              stack.value = computationResult\n            }\n            isWatch = lastStartedState.isWatch\n          }\n          break\n      }\n      stop = local.fail || skip\n    }\n    if (!stop) {\n      const finalValue = getValue(stack)\n      forEach(node.next, nextNode => {\n        pushFirstHeapItem(\n          'child',\n          page,\n          nextNode,\n          stack,\n          finalValue,\n          getForkPage(stack),\n        )\n      })\n      const forkPage = getForkPage(stack)\n      if (forkPage) {\n        if (getMeta(node, 'needFxCounter'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.fxCount,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'storeChange'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.storeChange,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        const additionalLinks = forkPage.additionalLinks[node.id]\n        if (additionalLinks) {\n          forEach(additionalLinks, nextNode => {\n            pushFirstHeapItem(\n              'child',\n              page,\n              nextNode,\n              stack,\n              finalValue,\n              forkPage,\n            )\n          })\n        }\n      }\n    }\n  }\n  isRoot = lastStartedState.isRoot\n  currentPage = lastStartedState.currentPage\n  forkPage = getForkPage(lastStartedState)\n}\n\nexport const initRefInScope = (\n  scope: {\n    reg: Record<string, StateRef>\n    sidValuesMap: Record<string, any>\n    sidIdMap: Record<string, string>\n  },\n  sourceRef: StateRef,\n  isGetState?: boolean,\n  isKernelCall?: boolean,\n  softRead?: boolean,\n) => {\n  const refsMap = scope.reg\n  const sid = sourceRef.sid\n  if (refsMap[sourceRef.id]) return\n  const ref: StateRef = {\n    id: sourceRef.id,\n    current: sourceRef.current,\n  }\n\n  if (sid && sid in scope.sidValuesMap && !(sid in scope.sidIdMap)) {\n    ref.current = scope.sidValuesMap[sid]\n  } else {\n    if (sourceRef.before && !softRead) {\n      let isFresh = false\n      const needToAssign = isGetState || !sourceRef.noInit || isKernelCall\n      forEach(sourceRef.before, cmd => {\n        switch (cmd.type) {\n          case MAP: {\n            const from = cmd.from\n            if (from || cmd.fn) {\n              if (from) initRefInScope(scope, from, isGetState, isKernelCall)\n              const value = from && refsMap[from.id].current\n              if (needToAssign) {\n                ref.current = cmd.fn ? cmd.fn(value) : value\n              }\n            }\n            break\n          }\n          case 'field': {\n            if (!isFresh) {\n              isFresh = true\n              if (Array.isArray(ref.current)) {\n                ref.current = [...ref.current]\n              } else {\n                ref.current = {...ref.current}\n              }\n            }\n            initRefInScope(scope, cmd.from, isGetState, isKernelCall)\n            if (needToAssign) {\n              const from = refsMap[cmd.from.id]\n              ref.current[cmd.field] = refsMap[from.id].current\n            }\n            break\n          }\n          // case 'closure':\n          //   break\n        }\n      })\n    }\n  }\n  if (sid) scope.sidIdMap[sid] = sourceRef.id\n  refsMap[sourceRef.id] = ref\n}\n\n/** try catch for external functions */\nconst tryRun = (local: Local, fn: Function, stack: Stack) => {\n  try {\n    return fn(getValue(stack), local.scope, stack)\n  } catch (err) {\n    console.error(err)\n    local.fail = true\n  }\n}\n","import type {Store, Domain} from './unit.h'\nimport {is} from './is'\nimport {getParent} from './getter'\nimport {forIn} from './collection'\n\nconst getCompostite = (unit: any): CompositeName => unit.compositeName\n\nexport function unitObjectName(objOrArr: any, method: string = 'combine') {\n  let name = method + '('\n  let comma = ''\n  let i = 0\n  forIn(objOrArr, (unit: any) => {\n    /* inlined max object names constant */\n    if (i < 25) {\n      if (unit != null) {\n        name += comma\n        name += is.unit(unit) ? getCompostite(unit).fullName : unit.toString()\n      }\n      i += 1\n      comma = ', '\n    }\n  })\n  return name + ')'\n}\n\nexport function setStoreName<State>(store: Store<State>, rawName: string) {\n  store.shortName = rawName\n  Object.assign(getCompostite(store), createName(rawName, getParent(store)))\n}\n\nexport type CompositeName = {\n  shortName: string\n  fullName: string\n  path: string[]\n}\n\nexport function createName(name: string, parent?: Domain): CompositeName {\n  let path: string[]\n  let fullName\n  const shortName = name\n  if (!parent) {\n    path = name.length === 0 ? [] : [name]\n    fullName = name\n  } else {\n    const composite = getCompostite(parent)\n    if (name.length === 0) {\n      path = composite.path\n      fullName = composite.fullName\n    } else {\n      path = composite.path.concat([name])\n      fullName =\n        composite.fullName.length === 0\n          ? name\n          : '' + composite.fullName + '/' + name\n    }\n  }\n  return {shortName, fullName, path}\n}\n","import {forIn} from './collection'\nimport {assertObject, isObject, isVoid} from './is'\n\nexport function processArgsToConfig(\n  arg: any,\n  singleArgument: true,\n): [any, any | void]\nexport function processArgsToConfig(args: any[]): [any[], any | void]\nexport function processArgsToConfig(\n  args: any,\n  singleArgument?: boolean,\n): [any[], any | void] {\n  const rawConfig = singleArgument ? args : args[0]\n  assertObject(rawConfig)\n  let metadata = rawConfig.or\n  if (rawConfig.and) {\n    args = rawConfig.and\n  }\n  return [args, metadata]\n}\n\n/**\nprocessed fields:\n\n'name',\n'sid',\n'loc',\n'handler',\n'updateFilter',\n'parent',\n'serialize',\n'named',\n'derived',\n*/\nexport const flattenConfig = (part: any, config: any = {}) => {\n  if (isObject(part)) {\n    flattenConfig(part.or, config)\n    forIn(part, (value, field) => {\n      if (!isVoid(value) && field !== 'or' && field !== 'and') {\n        config[field] = value\n      }\n    })\n    flattenConfig(part.and, config)\n  }\n  return config\n}\n","import {readTemplate} from './region'\nimport type {Template, TemplateHandlers} from '../forest/index.h'\n\nexport function applyTemplate<K extends keyof TemplateHandlers>(\n  method: K,\n  ...args: Parameters<TemplateHandlers[K]> extends [Template, ...infer Args]\n    ? Args\n    : never\n): ReturnType<TemplateHandlers[K]> | void {\n  const template = readTemplate()\n  if (template) {\n    const fn: any = template.handlers[method]\n    if (fn) return fn(template, ...args)\n  }\n}\n","import {observableSymbol} from './observable'\n\nimport {\n  is,\n  isObject,\n  isFunction,\n  assertObject,\n  assertNodeSet,\n  isVoid,\n} from './is'\nimport type {Store, Event} from './unit.h'\n\nimport {calc, compute, filter, mov, read} from './step'\nimport {createStateRef, readRef, addRefOp} from './stateRef'\nimport {nextUnitID} from './id'\nimport {callStackAReg, callARegStack, callStack} from './caller'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {\n  launch,\n  currentPage,\n  forkPage,\n  setCurrentPage,\n  initRefInScope,\n} from './kernel'\n\nimport type {Subscriber, Config} from './index.h'\nimport {createName} from './naming'\nimport {createLinkNode} from './forward'\nimport {watchUnit} from './watch'\nimport {createSubscription} from './subscription'\nimport {readTemplate, readSidRoot} from './region'\nimport {\n  getSubscribers,\n  getStoreState,\n  getGraph,\n  getParent,\n  setMeta,\n  getMeta,\n} from './getter'\nimport {assert, deprecate} from './throw'\nimport {DOMAIN, STORE, EVENT, MAP, FILTER, STACK, REG_A} from './tag'\nimport {applyTemplate} from './template'\nimport {forEach} from './collection'\nimport {flattenConfig} from './config'\n\nexport const applyParentHook = (\n  source: any,\n  target: any,\n  hookType: 'event' | 'effect' = EVENT,\n) => {\n  if (getParent(source)) getParent(source).hooks[hookType](target)\n}\n\nexport const initUnit = (kind: any, unit: any, configA: any, configB?: any) => {\n  const isDomain = kind === DOMAIN\n  const id = nextUnitID()\n  const config = flattenConfig({\n    or: configB,\n    and: typeof configA === 'string' ? {name: configA} : configA,\n  })\n  const {parent = null, sid = null, named = null} = config\n  const name = named ? named : config.name || (isDomain ? '' : id)\n  const compositeName = createName(name, parent)\n  const meta: Record<string, any> = {\n    op: (unit.kind = kind),\n    name: (unit.shortName = name),\n    sid: (unit.sid = readSidRoot(sid)),\n    named,\n    unitId: (unit.id = id),\n    serialize: config.serialize,\n    derived: config.derived,\n  }\n  unit.parent = parent\n  unit.compositeName = compositeName\n  unit.defaultConfig = config\n  unit.thru = (fn: Function) => {\n    deprecate(false, 'thru', 'js pipe')\n    return fn(unit)\n  }\n  unit.getType = () => compositeName.fullName\n  if (!isDomain) {\n    unit.subscribe = (observer: Subscriber<any>) => {\n      assertObject(observer)\n      return unit.watch(\n        isFunction(observer)\n          ? observer\n          : (upd: any) => observer.next && observer.next(upd),\n      )\n    }\n    unit[observableSymbol] = () => unit\n    const template = readTemplate()\n    if (template) meta.nativeTemplate = template\n  }\n  return meta\n}\nexport const createNamedEvent = (named: string) => createEvent({named})\n\nconst deriveEvent = (event: any, op: string, fn: any, node: any) => {\n  let config\n  if (isObject(fn)) {\n    config = fn\n    fn = fn.fn\n  }\n  const mapped = createEvent({\n    name: `${event.shortName} → *`,\n    derived: true,\n    and: config,\n  })\n  createLinkNode(event, mapped, node, op, fn)\n  return mapped\n}\n\nfunction callCreate(unit: any, template: any, payload: any, args: any[]): any {\n  const oldPage = currentPage\n  let page = null\n  if (template) {\n    page = currentPage\n    while (page && page.template !== template) {\n      page = getParent(page)\n    }\n  }\n  setCurrentPage(page)\n  const result = unit.create(payload, args)\n  setCurrentPage(oldPage)\n  return result\n}\n\nexport function createEvent<Payload = any>(\n  nameOrConfig?: any,\n  maybeConfig?: any,\n): Event<Payload> {\n  const event: any = (payload: Payload, ...args: any[]) => {\n    deprecate(\n      !getMeta(event, 'derived'),\n      'call of derived event',\n      'createEvent',\n    )\n    if (currentPage) {\n      return callCreate(event, template, payload, args)\n    }\n    return event.create(payload, args)\n  }\n  const template = readTemplate()\n  return Object.assign(event, {\n    graphite: createNode({\n      meta: initUnit(EVENT, event, nameOrConfig, maybeConfig),\n      regional: true,\n    }),\n    create(params: any, _: any) {\n      launch({target: event, params, scope: forkPage!})\n      return params\n    },\n    watch: (fn: (payload: Payload) => any) => watchUnit(event, fn),\n    map: (fn: any) => deriveEvent(event, MAP, fn, [compute({fn: callStack})]),\n    filter: (fn: any) =>\n      deriveEvent(event, FILTER, fn.fn ? fn : fn.fn, [filter({fn: callStack})]),\n    filterMap: (fn: any) =>\n      deriveEvent(event, 'filterMap', fn, [\n        compute({fn: callStack}),\n        calc(value => !isVoid(value), true),\n      ]),\n    prepend(fn: any) {\n      const contramapped: Event<any> = createEvent('* → ' + event.shortName, {\n        parent: getParent(event),\n      })\n      applyTemplate('eventPrepend', getGraph(contramapped))\n      createLinkNode(\n        contramapped,\n        event,\n        [compute({fn: callStack})],\n        'prepend',\n        fn,\n      )\n      applyParentHook(event, contramapped)\n      return contramapped\n    },\n  })\n}\n\nexport function createStore<State>(\n  defaultState: State,\n  props?: Config,\n): Store<State> {\n  const plainState = createStateRef(defaultState)\n  const updates = createNamedEvent('updates')\n  applyTemplate('storeBase', plainState)\n  const plainStateId = plainState.id\n  const store: any = {\n    subscribers: new Map(),\n    updates,\n    defaultState,\n    stateRef: plainState,\n    getState() {\n      let targetRef = plainState\n      let reachedPage\n      if (currentPage) {\n        let page = currentPage\n        while (page && !page.reg[plainStateId]) {\n          page = getParent(page)\n        }\n        if (page) reachedPage = page\n      }\n      if (!reachedPage && forkPage) {\n        initRefInScope(forkPage, plainState, true)\n        reachedPage = forkPage\n      }\n      if (reachedPage) targetRef = reachedPage.reg[plainStateId]\n      return readRef(targetRef)\n    },\n    setState: (state: any) =>\n      launch({\n        target: store,\n        params: state,\n        defer: true,\n        scope: forkPage!,\n      }),\n    reset(...units: any[]) {\n      forEach(units, unit => store.on(unit, () => store.defaultState))\n      return store\n    },\n    on(nodeSet: any, fn: Function) {\n      assertNodeSet(nodeSet, '.on', 'first argument')\n      deprecate(\n        !getMeta(store, 'derived'),\n        '.on in derived store',\n        'createStore',\n      )\n      forEach(Array.isArray(nodeSet) ? nodeSet : [nodeSet], trigger => {\n        store.off(trigger)\n        getSubscribers(store).set(\n          trigger,\n          createSubscription(\n            updateStore(trigger, store, 'on', callARegStack, fn),\n          ),\n        )\n      })\n      return store\n    },\n    off(unit: any) {\n      const currentSubscription = getSubscribers(store).get(unit)\n      if (currentSubscription) {\n        currentSubscription()\n        getSubscribers(store).delete(unit)\n      }\n      return store\n    },\n    map(fn: any, firstState?: any) {\n      let config\n      if (isObject(fn)) {\n        config = fn\n        fn = fn.fn\n      }\n      deprecate(\n        isVoid(firstState),\n        'second argument of store.map',\n        'updateFilter',\n      )\n      let lastResult\n      const storeState = store.getState()\n      const template = readTemplate()\n      if (template) {\n        lastResult = null\n      } else if (!isVoid(storeState)) {\n        lastResult = fn(storeState, firstState)\n      }\n\n      const innerStore: Store<any> = createStore(lastResult, {\n        name: `${store.shortName} → *`,\n        derived: true,\n        and: config,\n      })\n      const linkNode = updateStore(store, innerStore, MAP, callStackAReg, fn)\n      addRefOp(getStoreState(innerStore), {\n        type: MAP,\n        fn,\n        from: plainState,\n      })\n      getStoreState(innerStore).noInit = true\n      applyTemplate('storeMap', plainState, linkNode)\n      return innerStore\n    },\n    watch(eventOrFn: any, fn?: Function) {\n      if (!fn || !is.unit(eventOrFn)) {\n        const subscription = watchUnit(store, eventOrFn)\n        if (!applyTemplate('storeWatch', plainState, eventOrFn)) {\n          eventOrFn(store.getState())\n        }\n        return subscription\n      }\n      assert(isFunction(fn), 'second argument should be a function')\n      return eventOrFn.watch((payload: any) => fn(store.getState(), payload))\n    },\n  }\n  const meta = initUnit(STORE, store, props)\n  const updateFilter = store.defaultConfig.updateFilter\n  store.graphite = createNode({\n    scope: {state: plainState, fn: updateFilter},\n    node: [\n      calc((upd, _, stack) => {\n        if (stack.scope && !stack.scope.reg[plainState.id]) {\n          stack.b = true\n        }\n        return upd\n      }),\n      read(plainState),\n      calc((upd, _, {a, b}) => !isVoid(upd) && (upd !== a || b), true),\n      updateFilter && filter({fn: callStackAReg}),\n      mov({from: STACK, target: plainState}),\n    ],\n    child: updates,\n    meta,\n    regional: true,\n  })\n  const sid: string | null = getMeta(store, 'sid')\n  if (sid) {\n    if (getMeta(store, 'serialize') !== 'ignore')\n      setMeta(store, 'storeChange', true)\n    plainState.sid = sid\n  }\n  assert(\n    getMeta(store, 'derived') || !isVoid(defaultState),\n    \"current state can't be undefined, use null instead\",\n  )\n  own(store, [updates])\n  return store\n}\n\nconst updateStore = (\n  from: any,\n  store: Store<any>,\n  op: string,\n  caller: typeof callStackAReg,\n  fn: Function,\n) => {\n  const storeRef = getStoreState(store)\n  const reader = mov({\n    store: storeRef,\n    to: REG_A,\n    priority: 'read',\n  })\n  if (op === MAP) reader.data.softRead = true\n  const node = [reader, compute({fn: caller})]\n  applyTemplate(\n    'storeOnMap',\n    storeRef,\n    node,\n    is.store(from) && getStoreState(from),\n  )\n  return createLinkNode(from, store, node, op, fn)\n}\n","import type {Store} from './unit.h'\nimport {createStore} from './createUnit'\nimport {createStateRef, addRefOp} from './stateRef'\nimport {mov, compute, calc, read} from './step'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, setMeta} from './getter'\nimport {is, isFunction, isObject, isVoid} from './is'\nimport {unitObjectName} from './naming'\nimport {createLinkNode} from './forward'\nimport {assert, deprecate} from './throw'\nimport {readTemplate} from './region'\nimport {forIn} from './collection'\nimport {BARRIER, MAP, REG_A, VALUE} from './tag'\nimport {applyTemplate} from './template'\nimport {callStack} from './caller'\nimport type {Config} from './index.h'\n\nexport function combine(...args: any[]): Store<any> {\n  let handler\n  let stores\n  let config\n  ;[args, config] = processArgsToConfig(args)\n  const rawHandler = args[args.length - 1]\n  if (isFunction(rawHandler)) {\n    stores = args.slice(0, -1)\n    handler = rawHandler\n  } else {\n    stores = args\n  }\n\n  let structStoreShape\n  let shapeReady\n  if (stores.length === 1) {\n    const obj = stores[0]\n    /*\n      without edge case combine(Color, (Color) => '~')\n      */\n    if (!is.store(obj)) {\n      /*\n      case combine([R,G,B], ([R,G,B]) => '~')\n      case combine({R,G,B}, ({R,G,B}) => '~')\n\n      edge case combine([Color], ([Color]) => '~')\n      edge case combine({Color}, ({Color}) => '~')\n\n      edge case combine([R,G,B])\n      edge case combine({R,G,B})\n\n      edge case combine([Color])\n      edge case combine({Color})\n      */\n      structStoreShape = obj\n      shapeReady = true\n    }\n  }\n  let noArraySpread: boolean | void\n  if (!shapeReady) {\n    /*\n    case combine(R,G,B, (R,G,B) => '~')\n    */\n    structStoreShape = stores\n    /*\n    without edge case combine(R,G,B)\n    without edge case combine(Color)\n    */\n    if (handler) {\n      noArraySpread = true\n      const fn = handler\n      handler = (list: any[]) => fn(...list)\n    }\n  }\n  assert(isObject(structStoreShape), 'shape should be an object')\n  return storeCombination(\n    Array.isArray(structStoreShape),\n    !noArraySpread,\n    structStoreShape,\n    config,\n    handler,\n  )\n}\n\nconst storeCombination = (\n  isArray: boolean,\n  needSpread: boolean,\n  obj: any,\n  config?: Config,\n  fn?: (upd: any) => any,\n) => {\n  const clone = isArray ? (list: any) => list.slice() : (obj: any) => ({...obj})\n  const defaultState: any = isArray ? [] : {}\n\n  const stateNew = clone(defaultState)\n  const rawShape = createStateRef(stateNew)\n  const isFresh = createStateRef(true)\n  rawShape.type = isArray ? 'list' : 'shape'\n  rawShape.noInit = true\n  applyTemplate('combineBase', rawShape, isFresh)\n  const store = createStore(stateNew, {\n    name: unitObjectName(obj),\n    derived: true,\n    and: config,\n  })\n  const storeStateRef = getStoreState(store)\n  storeStateRef.noInit = true\n  setMeta(store, 'isCombine', true)\n  const node = [\n    calc((upd, _, stack) => {\n      if (stack.scope && !stack.scope.reg[rawShape.id]) {\n        stack.c = true\n      }\n      return upd\n    }),\n    read(rawShape),\n    mov({store: isFresh, to: 'b'}),\n    calc((upd, {key}, reg) => {\n      if (reg.c || upd !== reg.a[key]) {\n        if (needSpread && reg.b) {\n          reg.a = clone(reg.a)\n        }\n        reg.a[key] = upd\n        return true\n      }\n    }, true),\n    mov({from: REG_A, target: rawShape}),\n    mov({from: VALUE, store: false, target: isFresh}),\n    mov({\n      from: VALUE,\n      store: true,\n      target: isFresh,\n      priority: BARRIER,\n      batch: true,\n    }),\n    read(rawShape, true),\n    fn && compute({fn: callStack}),\n  ]\n  forIn(obj, (child: Store<any> | any, key) => {\n    if (!is.store(child)) {\n      assert(\n        !is.unit(child) && !isVoid(child),\n        `combine expects a store in a field ${key}`,\n      )\n      stateNew[key] = defaultState[key] = child\n      return\n    }\n    defaultState[key] = child.defaultState\n    stateNew[key] = child.getState()\n    const linkNode = createLinkNode(child, store, node, 'combine', fn)\n    linkNode.scope.key = key\n    const childRef = getStoreState(child)\n    addRefOp(rawShape, {type: 'field', field: key, from: childRef})\n    applyTemplate('combineField', childRef, linkNode)\n  })\n\n  store.defaultShape = obj\n  addRefOp(storeStateRef, {\n    type: MAP,\n    from: rawShape,\n    fn,\n  })\n  if (!readTemplate()) {\n    store.defaultState = fn\n      ? (storeStateRef.current = fn(stateNew))\n      : defaultState\n  }\n  return store\n}\n\nexport function createStoreObject(...args: any[]) {\n  deprecate(false, 'createStoreObject', 'combine')\n  return combine(...args)\n}\n","export function createDefer(): {\n  rs: (value: any) => any\n  rj: (value: any) => any\n  req: Promise<any>\n} {\n  const result = {} as {\n    rs: (value: any) => any\n    rj: (value: any) => any\n    req: Promise<any>\n  }\n  result.req = new Promise((rs, rj) => {\n    result.rs = rs\n    result.rj = rj\n  })\n  result.req.catch(err => {})\n  return result\n}\n","import {calc, run} from './step'\nimport {getForkPage, getGraph, getMeta, getParent, setMeta} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, setForkPage, forkPage, isWatch, Stack} from './kernel'\nimport {createNamedEvent, createStore, createEvent} from './createUnit'\nimport {createDefer} from './defer'\nimport {isObject, isFunction} from './is'\nimport {assert} from './throw'\nimport {EFFECT} from './tag'\nimport type {Unit} from './index.h'\nimport {add} from './collection'\n\nexport function createEffect<Payload, Done>(\n  nameOrConfig: any,\n  maybeConfig?: any,\n) {\n  const instance: any = createEvent(\n    isFunction(nameOrConfig) ? {handler: nameOrConfig} : nameOrConfig,\n    maybeConfig,\n  )\n  const node = getGraph(instance)\n  setMeta(node, 'op', (instance.kind = EFFECT))\n  instance.use = (fn: Function) => {\n    assert(isFunction(fn), '.use argument should be a function')\n    runner.scope.handler = fn\n    return instance\n  }\n  instance.use.getCurrent = () => runner.scope.handler\n  const anyway = (instance.finally = createNamedEvent('finally'))\n  const done = (instance.done = (anyway as any).filterMap({\n    named: 'done',\n    fn({status, params, result}: any) {\n      if (status === 'done') return {params, result}\n    },\n  }))\n  const fail = (instance.fail = (anyway as any).filterMap({\n    named: 'fail',\n    fn({status, params, error}: any) {\n      if (status === 'fail') return {params, error}\n    },\n  }))\n  const doneData = (instance.doneData = done.map({\n    named: 'doneData',\n    fn: ({result}: any) => result,\n  }))\n  const failData = (instance.failData = fail.map({\n    named: 'failData',\n    fn: ({error}: any) => error,\n  }))\n\n  const runner = createNode({\n    scope: {\n      handlerId: getMeta(node, 'sid'),\n      handler:\n        instance.defaultConfig.handler ||\n        (() => assert(false, `no handler used in ${instance.getType()}`)),\n    },\n    node: [\n      calc(\n        (upd, scope_, stack) => {\n          const scope: {handlerId: string; handler: Function} = scope_ as any\n          let handler = scope.handler\n          if (getForkPage(stack)) {\n            const handler_ = getForkPage(stack)!.handlers[scope.handlerId]\n            if (handler_) handler = handler_\n          }\n          upd.handler = handler\n          return upd\n        },\n        false,\n        true,\n      ),\n      calc(\n        ({params, req, handler, args = [params]}, _, stack) => {\n          const onResolve = onSettled(params, req, true, anyway, stack)\n          const onReject = onSettled(params, req, false, anyway, stack)\n          const [ok, result] = runFn(handler, onReject, args)\n          if (ok) {\n            if (isObject(result) && isFunction(result.then)) {\n              result.then(onResolve, onReject)\n            } else {\n              onResolve(result)\n            }\n          }\n        },\n        false,\n        true,\n      ),\n    ],\n    meta: {op: 'fx', fx: 'runner'},\n  })\n  node.scope.runner = runner\n  add(\n    node.seq,\n    calc(\n      (params, {runner}, stack) => {\n        const upd = getParent(stack)\n          ? {params, req: {rs(data: any) {}, rj(data: any) {}}}\n          : /** empty stack means that this node was launched directly */\n            params\n        launch({\n          target: runner,\n          params: upd,\n          defer: true,\n          scope: getForkPage(stack),\n        })\n        return upd.params\n      },\n      false,\n      true,\n    ),\n  )\n  instance.create = (params: Payload) => {\n    const req = createDefer()\n    const payload = {params, req}\n    if (forkPage) {\n      if (!isWatch) {\n        const savedFork = forkPage\n        req.req\n          .finally(() => {\n            setForkPage(savedFork)\n          })\n          .catch(() => {})\n      }\n      launch({target: instance, params: payload, scope: forkPage})\n    } else {\n      launch(instance, payload)\n    }\n    return req.req\n  }\n\n  const inFlight = (instance.inFlight = createStore(0, {named: 'inFlight'})\n    .on(instance, x => x + 1)\n    .on(anyway, x => x - 1))\n  setMeta(anyway, 'needFxCounter', 'dec')\n  setMeta(instance, 'needFxCounter', true)\n  const pending = (instance.pending = inFlight.map({\n    //@ts-expect-error\n    fn: amount => amount > 0,\n    named: 'pending',\n  }))\n\n  own(instance, [anyway, done, fail, doneData, failData, pending, inFlight])\n  return instance\n}\nexport const runFn = (\n  fn: Function,\n  onReject: (data: any) => void,\n  args: any[],\n): [boolean, any] => {\n  try {\n    return [true, fn(...args)]\n  } catch (err) {\n    onReject(err)\n    return [false, null]\n  }\n}\n\nexport const onSettled =\n  (\n    params: any,\n    req: {\n      rs(_: any): any\n      rj(_: any): any\n    },\n    ok: boolean,\n    anyway: Unit,\n    stack: Stack,\n  ) =>\n  (data: any) =>\n    launch({\n      target: [anyway, sidechain],\n      params: [\n        ok\n          ? {status: 'done', params, result: data}\n          : {status: 'fail', params, error: data},\n        {value: data, fn: ok ? req.rs : req.rj},\n      ],\n      defer: true,\n      page: stack.page,\n      scope: getForkPage(stack),\n    })\n\nexport const sidechain = createNode({\n  node: [run({fn: ({fn, value}) => fn(value)})],\n  meta: {op: 'fx', fx: 'sidechain'},\n})\n","import {combine} from './combine'\nimport {createEffect, onSettled, runFn} from './createEffect'\nimport {applyParentHook} from './createUnit'\nimport {processArgsToConfig} from './config'\nimport {getGraph, getStoreState, setMeta} from './getter'\nimport {own} from './own'\nimport {is} from './is'\nimport {read, calc} from './step'\nimport {launch} from './kernel'\nimport {EFFECT} from './tag'\n\nexport function attach(config: any) {\n  let injected\n  ;[config, injected] = processArgsToConfig(config, true)\n  let {source, effect, mapParams} = config\n  const attached = createEffect(config, injected)\n  setMeta(attached, 'attached', true)\n  const {runner} = getGraph(attached).scope\n  let runnerSteps\n  const runnerFnStep = calc(\n    (upd, _, stack) => {\n      const {params, req, handler} = upd\n      const anyway = attached.finally\n      const rj = onSettled(params, req, false, anyway, stack)\n      const sourceData = stack.a\n      const isEffectHandler = is.effect(handler)\n      let ok = true\n      let computedParams: any\n      if (mapParams) {\n        ;[ok, computedParams] = runFn(mapParams, rj, [params, sourceData])\n      } else {\n        computedParams = source && isEffectHandler ? sourceData : params\n      }\n      if (ok) {\n        if (isEffectHandler) {\n          launch({\n            target: handler as any,\n            params: {\n              params: computedParams,\n              req: {rs: onSettled(params, req, true, anyway, stack), rj},\n            },\n            page: stack.page,\n            defer: true,\n          })\n        } else {\n          upd.args = [sourceData, computedParams]\n          return true\n        }\n      }\n    },\n    true,\n    true,\n  )\n  if (source) {\n    let state\n    if (is.store(source)) {\n      state = source\n      own(state, [attached])\n    } else {\n      state = combine(source)\n      own(attached, [state])\n    }\n    runnerSteps = [read(getStoreState(state)), runnerFnStep]\n  } else {\n    runnerSteps = [runnerFnStep]\n  }\n  runner.seq.splice(1, 0, ...runnerSteps)\n  attached.use(effect)\n  applyParentHook(effect, attached, EFFECT)\n  return attached\n}\n","import type {Store, Event} from './unit.h'\nimport {createEvent, applyParentHook} from './createUnit'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {processArgsToConfig} from './config'\n\nexport function createApi(...args: [Store<any>, {[key: string]: Function}]) {\n  let [[store, setters], metadata] = processArgsToConfig(args)\n  const result: Record<string, Event<any>> = {}\n  forIn(setters, (fn, key) => {\n    const event = (result[key] = createEvent(key, {\n      parent: getParent(store),\n      config: metadata,\n    }))\n    store.on(event, fn)\n    applyParentHook(store, event)\n  })\n  return result\n}\n","import type {Domain} from './unit.h'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport type {Config, NodeUnit} from './index.h'\nimport {\n  createEvent,\n  createStore,\n  createNamedEvent,\n  initUnit,\n} from './createUnit'\nimport {createEffect} from './createEffect'\nimport {createLinkNode} from './forward'\nimport {add, forEach, forIn} from './collection'\nimport {getGraph, getParent} from './getter'\nimport {DOMAIN} from './tag'\nimport {launch} from './kernel'\nimport {calc} from './step'\n\nexport function createDomain(nameOrConfig: any, maybeConfig?: any): Domain {\n  const node = createNode({family: {type: DOMAIN}, regional: true})\n\n  const result: any = {\n    history: {},\n    graphite: node,\n    hooks: {},\n  }\n\n  node.meta = initUnit(DOMAIN, result, nameOrConfig, maybeConfig)\n\n  forIn(\n    {\n      Event: createEvent,\n      Effect: createEffect,\n      Store: createStore,\n      Domain: createDomain,\n    },\n    (factory: any, tag) => {\n      const lowerCaseTag = tag.toLowerCase()\n\n      const trigger = createNamedEvent(`on${tag}`)\n      result.hooks[lowerCaseTag] = trigger\n\n      const acc = new Set<any>()\n      result.history[`${lowerCaseTag}s`] = acc\n\n      trigger.create = res => {\n        launch(trigger, res)\n        return res\n      }\n      add(\n        getGraph(trigger).seq,\n        calc((upd, _, stack) => {\n          stack.scope = null\n          return upd\n        }),\n      )\n      trigger.watch(data => {\n        own(result, [data])\n        acc.add(data)\n        if (!data.ownerSet) data.ownerSet = acc\n        if (!getParent(data)) data.parent = result\n      })\n      own(result, [trigger])\n\n      result[`onCreate${tag}`] = (hook: (data: any) => any) => {\n        forEach(acc, hook)\n        return trigger.watch(hook)\n      }\n      result[`create${tag}`] = result[lowerCaseTag] = (\n        nameOrConfig: any,\n        config?: Config,\n      ) => trigger(factory(nameOrConfig, {parent: result, or: config}))\n    },\n  )\n\n  const parent = getParent(result)\n  if (parent) {\n    forIn(result.hooks, (from: NodeUnit, key) =>\n      createLinkNode(from, parent.hooks[key]),\n    )\n  }\n  return result\n}\n","import {observableSymbol} from './observable'\nimport type {Event} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {assertObject} from './is'\nimport {assert} from './throw'\nimport {createSubscription} from './subscription'\n\nexport function fromObservable<T>(observable: any): Event<T> {\n  assertObject(observable)\n  const observableItem =\n    observableSymbol in observable ? observable[observableSymbol]() : observable\n  assert(observableItem.subscribe, 'expect observable to have .subscribe')\n  const event = createEvent<T>()\n  const disposer = createSubscription(event)\n  observableItem.subscribe({\n    next: event,\n    error: disposer,\n    complete: disposer,\n  })\n  return event\n}\n","import type {Store, Event, Effect} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {unitObjectName} from './naming'\nimport {assertNodeSet} from './is'\n\nexport function merge<T>(\n  events: Array<Event<T> | Store<T> | Effect<T, any, any>>,\n  config?: object,\n): Event<T> {\n  const result = createEvent(config || unitObjectName(events, 'merge'))\n  assertNodeSet(events, 'merge', 'first argument')\n  createLinkNode(events, result, [], 'merge')\n  return result\n}\n","import {combine} from './combine'\nimport {mov, compute, read, calc} from './step'\nimport {createStateRef, readRef} from './stateRef'\nimport {callStackAReg, callARegStack} from './caller'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, getGraph} from './getter'\nimport {own} from './own'\nimport {assertNodeSet, is, isObject, isVoid} from './is'\nimport {createStore} from './createUnit'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {createNode} from './createNode'\nimport {assert} from './throw'\nimport {forEach} from './collection'\nimport {SAMPLE, STACK, VALUE} from './tag'\nimport {merge} from './merge'\nimport {applyTemplate} from './template'\n\nconst sampleConfigFields = ['source', 'clock', 'target']\n\nconst fieldErrorMessage = (method: string, field: string) =>\n  method + `: ${field} should be defined`\n\nexport function validateSampleConfig(config: any, method: string) {\n  let atLeastOneFieldExists = false\n  forEach(sampleConfigFields, field => {\n    if (field in config) {\n      assert(config[field] != null, fieldErrorMessage(method, field))\n      atLeastOneFieldExists = true\n    }\n  })\n  return atLeastOneFieldExists\n}\nexport const groupInputs = (source: any, clock: any, method: string) => {\n  assert(\n    !isVoid(source) || !isVoid(clock),\n    fieldErrorMessage(method, 'either source or clock'),\n  )\n  if (isVoid(source)) {\n    assertNodeSet(clock, method, 'clock')\n    if (Array.isArray(clock)) {\n      clock = merge(clock)\n    }\n    source = clock\n  } else if (!is.unit(source)) {\n    source = combine(source)\n  }\n  return [source, clock] as const\n}\nexport function sample(...args: any): any {\n  let target\n  let name\n  let [[source, clock, fn], metadata] = processArgsToConfig(args)\n  let sid\n  let batched = true\n  /** config case */\n  if (\n    isVoid(clock) &&\n    isObject(source) &&\n    validateSampleConfig(source, 'sample')\n  ) {\n    clock = source.clock\n    fn = source.fn\n    batched = !source.greedy\n    /** optional target & name accepted only from config */\n    target = source.target\n    name = source.name\n    sid = source.sid\n    source = source.source\n  }\n  ;[source, clock] = groupInputs(source, clock, 'sample')\n  if (isVoid(clock)) {\n    /** still undefined! */\n    clock = source\n  }\n  assertNodeSet(clock, 'sample', 'clock')\n  if (!metadata && !name) name = source.shortName\n  const isUpward = !!target\n  if (!target) {\n    if (is.store(source) && is.store(clock)) {\n      const initialState = fn\n        ? fn(readRef(getStoreState(source)), readRef(getStoreState(clock)))\n        : readRef(getStoreState(source))\n      target = createStore(initialState, {name, sid, or: metadata})\n    } else {\n      target = createEvent(name, metadata)\n      applyTemplate('sampleTarget', getGraph(target))\n    }\n  }\n  // const targetTemplate =\n  //   isUpward && is.unit(target) && getGraph(target).meta.nativeTemplate\n  if (is.store(source)) {\n    const sourceRef = getStoreState(source)\n    own(source, [\n      createLinkNode(\n        clock,\n        target,\n        [\n          applyTemplate('sampleSourceLoader'),\n          read(sourceRef, !fn, batched),\n          fn && compute({fn: callARegStack}),\n          applyTemplate('sampleSourceUpward', isUpward),\n        ],\n        SAMPLE,\n        fn,\n        // scope: {fn, targetTemplate}\n      ),\n    ])\n    applyTemplate('sampleStoreSource', sourceRef)\n  } else {\n    const hasSource = createStateRef(false)\n    const sourceRef = createStateRef()\n    const clockState = createStateRef()\n    applyTemplate('sampleNonStoreSource', hasSource, sourceRef, clockState)\n    createNode({\n      parent: source,\n      node: [\n        mov({from: STACK, target: sourceRef}),\n        mov({from: VALUE, store: true, target: hasSource}),\n      ],\n      family: {owners: [source, target, clock], links: target},\n      meta: {op: SAMPLE},\n      regional: true,\n    })\n    own(source, [\n      createLinkNode(\n        clock,\n        target,\n        [\n          applyTemplate('sampleSourceLoader'),\n          mov({from: STACK, target: clockState}),\n          read(hasSource, true),\n          calc(hasSource => hasSource, true),\n          read(sourceRef, true, batched),\n          read(clockState),\n          fn && compute({fn: callStackAReg}),\n          applyTemplate('sampleSourceUpward', isUpward),\n        ],\n        SAMPLE,\n        fn,\n        // scope: {fn, targetTemplate}\n      ),\n    ])\n  }\n  return target\n}\n","import {processArgsToConfig} from './config'\nimport {createLinkNode} from './forward'\nimport {groupInputs, validateSampleConfig, sample} from './sample'\nimport {createEvent} from './createUnit'\nimport {calc, filter} from './step'\nimport {callStack} from './caller'\nimport {assertNodeSet, is, isFunction} from './is'\nimport {createNode} from './createNode'\nimport {assert} from './throw'\n\nexport function guard(...args: any[]) {\n  const METHOD = 'guard'\n  let [[source, config], metadata] = processArgsToConfig(args)\n  if (!config) {\n    config = source\n    source = config.source\n  }\n  validateSampleConfig(config, METHOD)\n  let {\n    filter: filterFn,\n    greedy,\n    clock,\n    name = metadata && metadata.name ? metadata.name : METHOD,\n  } = config\n  const target = config.target || createEvent(name, metadata)\n  const filterIsUnit = is.unit(filterFn)\n  ;[source, clock] = groupInputs(source, clock, METHOD)\n  if (clock) {\n    assertNodeSet(clock, METHOD, 'clock')\n    source = sample({\n      source,\n      clock,\n      greedy,\n      fn: filterIsUnit ? null : (source: any, clock: any) => ({source, clock}),\n    })\n  }\n  assertNodeSet(target, METHOD, 'target')\n  if (filterIsUnit) {\n    sample({\n      source: filterFn,\n      clock: source,\n      target: createNode({\n        node: [calc(({guard}) => guard, true), calc(({data}) => data)],\n        child: target,\n        meta: {op: METHOD},\n        family: {\n          owners: [source, filterFn, target, ...[].concat(clock ? clock : [])],\n          links: target,\n        },\n        regional: true,\n      }),\n      fn: (guard: any, data: any) => ({guard, data}),\n      greedy,\n      name,\n    })\n  } else {\n    assert(isFunction(filterFn), '`filter` should be function or unit')\n    createLinkNode(\n      source,\n      target,\n      clock\n        ? [\n            filter({fn: ({source, clock}, {fn}) => fn(source, clock)}),\n            calc(({source}) => source),\n          ]\n        : [filter({fn: callStack})],\n      METHOD,\n      filterFn,\n    )\n  }\n  return target\n}\n","import {createStore} from './createUnit'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {createLinkNode} from './forward'\n\nexport function restore(obj: any, defaultState: any, config?: any): any {\n  if (is.store(obj)) return obj\n  if (is.event(obj) || is.effect(obj)) {\n    const domain = getParent(obj)\n    const result = createStore(defaultState, {\n      parent: domain,\n      name: obj.shortName,\n      and: config,\n    })\n    createLinkNode(is.effect(obj) ? obj.doneData : obj, result)\n    if (domain) domain.hooks.store(result)\n    return result\n  }\n  const result: Record<string, any> = Array.isArray(obj) ? [] : {}\n  forIn(\n    obj,\n    (value, key) =>\n      (result[key] = is.store(value) ? value : createStore(value, {name: key})),\n  )\n  return result\n}\n","import type {Event} from './unit.h'\nimport type {NodeUnit, Cmd} from './index.h'\nimport {is, isFunction, isObject} from './is'\nimport {add, forIn, includes} from './collection'\nimport {addRefOp, createStateRef} from './stateRef'\nimport {createLinkNode} from './forward'\nimport {processArgsToConfig} from './config'\nimport {compute, filter, calc, read} from './step'\nimport {createNode} from './createNode'\nimport {launch} from './kernel'\nimport {getStoreState} from './getter'\nimport {assert} from './throw'\nimport {createEvent} from './createUnit'\nimport {applyTemplate} from './template'\n\nconst launchCase = (\n  scopeTargets: Record<string, NodeUnit>,\n  field: string,\n  data: any,\n  stack: any,\n) => {\n  const target = scopeTargets[field]\n  if (target) {\n    launch({\n      target,\n      params: Array.isArray(target) ? target.map(() => data) : data,\n      defer: true,\n      stack,\n    })\n  }\n}\n\nexport function split(...args: any[]): any {\n  let targets: Record<string, Event<any> | NodeUnit>\n  let [[source, match], metadata] = processArgsToConfig(args)\n  const knownCases = !match\n  if (knownCases) {\n    targets = source.cases\n    match = source.match\n    source = source.source\n  }\n  const matchIsUnit = is.store(match)\n  const matchIsFunction = !is.unit(match) && isFunction(match)\n  const matchIsShape = !matchIsUnit && !matchIsFunction && isObject(match)\n  if (!targets!) targets = {}\n  if (!knownCases) {\n    assert(matchIsShape, 'match should be an object')\n    forIn(match, (_, key) => (targets[key] = createEvent(metadata)))\n    targets.__ = createEvent(metadata)\n  }\n  const owners = new Set(\n    ([] as NodeUnit[]).concat(source, Object.values(targets)),\n  )\n  const caseNames = Object.keys(\n    matchIsUnit || matchIsFunction ? targets : match,\n  )\n  let splitterSeq: Array<Cmd | false>\n  if (matchIsUnit || matchIsFunction) {\n    if (matchIsUnit) owners.add(match)\n    splitterSeq = [\n      matchIsUnit && read(getStoreState(match), false, true),\n      compute({\n        safe: matchIsUnit,\n        filter: true,\n        fn(data, scopeTargets, stack) {\n          const value = String(matchIsUnit ? stack.a : match(data))\n          launchCase(\n            scopeTargets,\n            includes(caseNames, value) ? value : '__',\n            data,\n            stack,\n          )\n        },\n      }),\n    ]\n  } else if (matchIsShape) {\n    const lastValues = createStateRef({})\n    lastValues.type = 'shape'\n    const units = [] as string[]\n    let needBarrier: boolean\n    forIn(match, (storeOrFn: any, key) => {\n      if (is.unit(storeOrFn)) {\n        needBarrier = true\n        add(units, key)\n        owners.add(storeOrFn)\n        const updater = createLinkNode(\n          storeOrFn,\n          [],\n          [read(lastValues), calc((upd, _, {a}) => (a[key] = upd))],\n        )\n        if (is.store(storeOrFn)) {\n          lastValues.current[key] = storeOrFn.getState()\n          const storeRef = getStoreState(storeOrFn)\n          addRefOp(lastValues, {from: storeRef, field: key, type: 'field'})\n          applyTemplate('splitMatchStore', storeRef, updater)\n        }\n      }\n    })\n    if (needBarrier!) {\n      applyTemplate('splitBase', lastValues)\n    }\n    splitterSeq = [\n      needBarrier! && read(lastValues, false, true),\n      filter({\n        fn(data, scopeTargets, stack) {\n          for (let i = 0; i < caseNames.length; i++) {\n            const caseName = caseNames[i]\n            const caseValue = includes(units, caseName)\n              ? stack.a[caseName]\n              : match[caseName](data)\n            if (caseValue) {\n              launchCase(scopeTargets, caseName, data, stack)\n              return\n            }\n          }\n          launchCase(scopeTargets, '__', data, stack)\n        },\n      }),\n    ]\n  } else {\n    assert(false, 'expect match to be unit, function or object')\n  }\n  createNode({\n    meta: {op: 'split'},\n    parent: source,\n    scope: targets,\n    node: splitterSeq!,\n    family: {owners: Array.from(owners)},\n    regional: true,\n  })\n  if (!knownCases) return targets\n}\n","import {add} from '../collection'\nimport {createDefer} from '../defer'\nimport {is} from '../is'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope} from '../unit.h'\n\nexport function allSettled(\n  start: any,\n  {scope, params: ctx}: {scope: Scope; params?: any},\n) {\n  if (!is.unit(start))\n    return Promise.reject(Error('first argument should be unit'))\n  const defer = createDefer()\n  //@ts-expect-error\n  defer.parentFork = forkPage\n  const {fxCount} = scope\n  add(fxCount.scope.defers, defer)\n\n  const launchUnits = [start]\n  const launchParams = [] as Array<{params: any; req: any} | null>\n  add(\n    launchParams,\n    is.effect(start)\n      ? {\n          params: ctx,\n          req: {\n            rs(value: any) {\n              //@ts-ignore\n              defer.value = {status: 'done', value}\n            },\n            rj(value: any) {\n              //@ts-ignore\n              defer.value = {status: 'fail', value}\n            },\n          },\n        }\n      : ctx,\n  )\n  add(launchUnits, fxCount)\n  add(launchParams, null)\n  launch({\n    target: launchUnits,\n    params: launchParams,\n    scope,\n  })\n  return defer.req\n}\n","import {getMeta, getOwners, getLinks} from '../getter'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport type {Store} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, forEach, includes} from '../collection'\nimport {STORE} from '../tag'\n\nexport function traverseStores(\n  root: Node,\n  fn: (node: Node, sid: string) => void,\n) {\n  const list = [] as Node[]\n  ;(function visit(node) {\n    if (includes(list, node)) return\n    add(list, node)\n    if (getMeta(node, 'op') === STORE && getMeta(node, 'sid')) {\n      fn(node, getMeta(node, 'sid'))\n    }\n    forEach(node.next, visit)\n    forEach(getOwners(node), visit)\n    forEach(getLinks(node), visit)\n  })(root)\n}\n\nexport function normalizeValues(\n  values: Map<Store<any>, any> | Array<[any, any]> | Record<string, any>,\n  assertEach?: (key: any, value: any) => void,\n) {\n  if (Array.isArray(values)) values = new Map(values)\n  if (values instanceof Map) {\n    const result = {} as Record<string, any>\n    forEach(values, (value, key) => {\n      assert(is.unit(key), 'Map key should be a unit')\n      if (assertEach) assertEach(key, value)\n      assert(key.sid, 'unit should have a sid')\n      assert(!(key.sid! in result), 'duplicate sid found')\n      result[key.sid!] = value\n    })\n    return result\n  }\n  return values\n}\n","import {is} from '../is'\nimport {assert} from '../throw'\nimport type {Domain} from '../unit.h'\nimport {normalizeValues} from './util'\nimport {createScope} from './createScope'\n\nexport function fork(\n  domainOrConfig?: Domain | {values?: any; handlers?: any},\n  optiionalConfig?: {values?: any; handlers?: any},\n) {\n  let config: {values?: any; handlers?: any} | void = domainOrConfig as any\n  let domain: Domain\n  if (is.domain(domainOrConfig)) {\n    domain = domainOrConfig\n    config = optiionalConfig\n  }\n\n  const scope = createScope(domain!)\n\n  if (config) {\n    if (config.values) {\n      const valuesSidMap = normalizeValues(config.values, unit =>\n        assert(is.store(unit), 'Values map can contain only stores as keys'),\n      )\n      Object.assign(scope.sidValuesMap, valuesSidMap)\n    }\n    if (config.handlers) {\n      scope.handlers = normalizeValues(config.handlers, unit =>\n        assert(\n          is.effect(unit),\n          `Handlers map can contain only effects as keys`,\n        ),\n      )\n    }\n  }\n  return scope\n}\n","import {getForkPage, getGraph, getMeta, getParent} from '../getter'\nimport {setForkPage, getPageRef, currentPage} from '../kernel'\nimport {createNode} from '../createNode'\nimport {calc, compute} from '../step'\nimport type {Domain, Scope} from '../unit.h'\nimport type {StateRef} from '../index.h'\nimport {forEach} from '../collection'\nimport {DOMAIN, SAMPLER, SCOPE} from '../tag'\n\nexport function createScope(unit?: Domain): Scope {\n  const forkInFlightCounter = createNode({\n    scope: {\n      defers: [],\n      inFlight: 0,\n      fxID: 0,\n    },\n    node: [\n      calc((_, scope, stack) => {\n        if (!getParent(stack)) {\n          scope.fxID += 1\n          return\n        }\n        if (getMeta(getParent(stack).node, 'needFxCounter') === 'dec') {\n          scope.inFlight -= 1\n        } else {\n          scope.inFlight += 1\n          scope.fxID += 1\n        }\n      }),\n      compute({priority: SAMPLER, batch: true}),\n      calc(\n        (_, scope) => {\n          const {defers, fxID} = scope\n          if (scope.inFlight > 0 || defers.length === 0) return\n          Promise.resolve().then(() => {\n            if (scope.fxID !== fxID) return\n            forEach(defers.splice(0, defers.length), (defer: any) => {\n              setForkPage(defer.parentFork)\n              defer.rs(defer.value)\n            })\n          })\n        },\n        false,\n        true,\n      ),\n    ],\n  })\n  const page = {} as Record<string, StateRef>\n  const storeChange = createNode({\n    node: [\n      calc((value, __, stack) => {\n        const storeStack = getParent(stack)\n        if (storeStack && getParent(storeStack)) {\n          const storeNode = storeStack.node\n          if (\n            !getMeta(storeNode, 'isCombine') ||\n            getMeta(getParent(storeStack).node, 'op') !== 'combine'\n          ) {\n            const forkPage = getForkPage(stack)!\n            const id = storeNode.scope.state.id\n            const sid = getMeta(storeNode, 'sid')\n            forkPage.sidIdMap[sid] = id\n            forkPage.sidValuesMap[sid] = value\n          }\n        }\n      }),\n    ],\n  })\n  const resultScope: Scope = {\n    cloneOf: unit,\n    reg: page,\n    sidValuesMap: {},\n    sidIdMap: {},\n    getState(store: any) {\n      if ('current' in store) {\n        return getPageRef(currentPage, resultScope, null, store).current\n      }\n      const node = getGraph(store)\n      return getPageRef(currentPage, resultScope, node, node.scope.state, true)\n        .current\n    },\n    kind: SCOPE,\n    graphite: createNode({\n      family: {\n        type: DOMAIN,\n        links: [forkInFlightCounter, storeChange],\n      },\n      meta: {unit: 'fork'},\n      scope: {forkInFlightCounter},\n    }),\n    additionalLinks: {},\n    handlers: {},\n    fxCount: forkInFlightCounter,\n    storeChange,\n  }\n  return resultScope\n}\n","import {is, isObject} from '../is'\nimport {assert} from '../throw'\nimport {launch} from '../kernel'\nimport type {Domain, Scope} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, includes} from '../collection'\nimport {normalizeValues, traverseStores} from './util'\nimport {getGraph} from '../getter'\n\n/**\n hydrate state on client\n\n const root = createDomain()\n hydrate(root, {\n  values: window.__initialState__\n})\n\n */\nexport function hydrate(domain: Domain | Scope, {values}: {values: any}) {\n  assert(isObject(values), 'values property should be an object')\n  const normalizedValues = normalizeValues(values)\n  const valuesSidList = Object.getOwnPropertyNames(normalizedValues)\n  const storeNodes: Node[] = []\n  const storeValues: any[] = []\n  let forkPage: Scope\n  let traverseTarget: Node\n  let needToAssign: true | void\n  if (is.scope(domain)) {\n    forkPage = domain\n    needToAssign = true\n    assert(forkPage.cloneOf, 'scope should be created from domain')\n    traverseTarget = getGraph(forkPage.cloneOf)\n  } else if (is.domain(domain)) {\n    traverseTarget = getGraph(domain)\n  } else {\n    assert(false, 'first argument of hydrate should be domain or scope')\n  }\n  traverseStores(traverseTarget!, (node, sid) => {\n    // forkPage.sidIdMap[sid] = node.scope.state.id\n    if (includes(valuesSidList, sid)) {\n      add(storeNodes, node)\n      add(storeValues, normalizedValues[sid])\n    }\n  })\n  launch({\n    target: storeNodes,\n    params: storeValues,\n    scope: forkPage!,\n  })\n  if (needToAssign) {\n    Object.assign(forkPage!.sidValuesMap, normalizedValues)\n  }\n}\n","import {createDefer} from '../defer'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope} from '../unit.h'\n\n/** bind event to scope */\nexport function scopeBind(unit: any, {scope}: {scope?: Scope} = {}) {\n  assert(\n    scope || forkPage,\n    'scopeBind cannot be called outside of forked .watch',\n  )\n  const savedForkPage = scope || forkPage!\n  return is.effect(unit)\n    ? (params: any) => {\n        const req = createDefer()\n        launch({\n          target: unit,\n          params: {\n            params,\n            req,\n          },\n          scope: savedForkPage,\n        })\n        return req.req\n      }\n    : (params: any) => {\n        launch({target: unit, params, scope: savedForkPage})\n        return params\n      }\n}\n","import type {Scope, Store} from '../unit.h'\nimport {forIn, includes} from '../collection'\nimport {assert} from '../throw'\nimport {traverseStores} from './util'\nimport {getGraph, getMeta} from '../getter'\n\n/**\n serialize state on server\n */\nexport function serialize(\n  scope: Scope,\n  config: {ignore?: Array<Store<any>>; onlyChanges?: boolean} = {},\n) {\n  const ignoredStores = config.ignore ? config.ignore.map(({sid}) => sid) : []\n  const result = {} as Record<string, any>\n  forIn(scope.sidValuesMap, (value, sid) => {\n    if (includes(ignoredStores, sid)) return\n    const id = scope.sidIdMap[sid]\n    // if (!scope.changedStores.has(id)) return\n    if (id && id in scope.reg) {\n      result[sid] = scope.reg[id].current\n    } else {\n      result[sid] = value\n    }\n  })\n  if ('onlyChanges' in config && !config.onlyChanges) {\n    assert(scope.cloneOf, 'scope should be created from domain')\n    traverseStores(getGraph(scope.cloneOf), (node, sid) => {\n      if (\n        !(sid in result) &&\n        !includes(ignoredStores, sid) &&\n        !getMeta(node, 'isCombine') &&\n        getMeta(node, 'serialize') !== 'ignore'\n      )\n        result[sid] = scope.getState(node as any)\n    })\n  }\n  return result\n}\n","export const observableSymbol: any =\n  (typeof Symbol !== 'undefined' && Symbol.observable) || '@@observable'\n","import {kind} from './index.h'\nimport {DOMAIN, STORE, EVENT, EFFECT, SCOPE} from './tag'\nimport {isObject, isFunction} from './is'\nimport {Domain, Effect, Event, Scope, Store} from './unit.h'\n\nexport const unit = (obj: any) =>\n  (isFunction(obj) || isObject(obj)) && 'kind' in obj\n\nconst is = (type: kind) => (obj: any) => unit(obj) && obj.kind === type\n\nexport const store = is(STORE) as (value: any) => value is Store<unknown>\nexport const event = is(EVENT) as (value: any) => value is Event<unknown>\nexport const effect = is(EFFECT) as (\n  value: any,\n) => value is Effect<unknown, unknown, unknown>\nexport const domain = is(DOMAIN) as (value: any) => value is Domain\nexport const scope = is(SCOPE) as (value: any) => value is Scope\n","export * as is from './validate'\nimport {forEach} from './collection'\nimport {assert} from './throw'\n\nexport const isObject = (value: any) =>\n  typeof value === 'object' && value !== null\nexport const isFunction = (value: any) => typeof value === 'function'\n\nexport const isVoid = (value: any) => value === undefined\n\nexport const assertObject = (value: any) =>\n  assert(\n    isObject(value) || isFunction(value),\n    'expect first argument be an object',\n  ) // or function\n\nconst assertNodeSetItem = (\n  value: any,\n  method: string,\n  valueName: string,\n  reason: string,\n) =>\n  assert(\n    !(\n      (!isObject(value) && !isFunction(value)) ||\n      (!('family' in value) && !('graphite' in value))\n    ),\n    `${method}: expect ${valueName} to be a unit (store, event or effect)${reason}`,\n  )\n\nexport const assertNodeSet = (\n  value: any,\n  method: string,\n  valueName: string,\n) => {\n  if (Array.isArray(value)) {\n    forEach(value, (item, i) =>\n      assertNodeSetItem(item, method, `${i} item of ${valueName}`, ''),\n    )\n  } else {\n    assertNodeSetItem(value, method, valueName, ' or array of units')\n  }\n}\n","const idCount = () => {\n  let id = 0\n  return () => `${++id}`\n}\n\nexport const nextUnitID = idCount()\nexport const nextStepID = idCount()\nexport const nextNodeID = idCount()\n","import type {\n  StateRef,\n  Compute,\n  MovValueToRegister,\n  MovValueToStore,\n  MovStoreToRegister,\n  MovStoreToStore,\n  MovRegisterToStore,\n} from './index.h'\nimport {nextStepID} from './id'\nimport {EFFECT, REG_A, SAMPLER, STACK, STORE} from './tag'\nimport type {BarrierPriorityTag, Stack} from './kernel'\n\nconst cmd = (\n  type: 'compute' | 'mov',\n  data: any,\n  priority?: BarrierPriorityTag | false,\n  batch?: boolean,\n) => {\n  const result: any = {\n    id: nextStepID(),\n    type,\n    data,\n  }\n  if (priority) {\n    result.order = {priority}\n    if (batch) result.order.barrierID = ++nextBarrierID\n  }\n  return result\n}\n\nlet nextBarrierID = 0\n\nexport const mov: {\n  <T>(data: {\n    from: 'value'\n    store: T\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToStore<T>\n  <T>(data: {\n    from: 'value'\n    to: 'stack' | 'a' | 'b'\n    store: T\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToRegister<T>\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    to: 'a' | 'b' | 'stack'\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    store: StateRef\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovStoreToStore\n  (data: {\n    store: StateRef\n    to: 'stack' | 'a' | 'b'\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  (data: {\n    store: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  // (data: {\n  //   from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  //   to?: 'stack' | 'a' | 'b' | 'store'\n  //   store?: StateRef\n  //   target?: StateRef\n  // }): Mov\n} = ({\n  from = STORE,\n  store,\n  target,\n  to = target ? STORE : STACK,\n  batch,\n  priority,\n}: {\n  from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  to?: 'stack' | 'a' | 'b' | 'store'\n  store?: StateRef\n  target?: StateRef\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n}) => cmd('mov', {from, store, to, target}, priority, batch)\n\nexport const compute = ({\n  fn,\n  batch,\n  priority,\n  safe = false,\n  filter = false,\n}: {\n  fn?: (data: any, scope: {[key: string]: any}, stack: Stack) => any\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n  safe?: boolean\n  filter?: boolean\n}): Compute => cmd('compute', {fn, safe, filter}, priority, batch)\n\nexport const filter = ({\n  fn,\n}: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n}) => compute({fn, filter: true})\n\nexport const run = ({\n  fn,\n}: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n}) => compute({fn, priority: EFFECT})\n\nexport const calc = (\n  fn: (data: any, scope: {[key: string]: any}, stack: Stack) => any,\n  filter?: boolean,\n  isEffect?: boolean,\n) => compute({fn, safe: true, filter, priority: isEffect && EFFECT})\n\n/**\n * `read(ref, true, true)`: **reg.stack** with **sampler** batch\n *\n * `read(ref, true, false)`: **reg.stack** without batch\n *\n * `read(ref, false, true)`: **reg.a** with **sampler** batch\n *\n * `read(ref, false, false)`: **reg.a** without batch\n *\n */\nexport const read = (\n  store: StateRef,\n  toStack?: boolean,\n  samplerPriority?: boolean,\n) =>\n  mov({\n    store,\n    to: toStack ? STACK : REG_A,\n    priority: samplerPriority && SAMPLER,\n    batch: true,\n  })\n\nexport const step = {mov, compute, filter, run}\n","import type {StateRef, StateRefOp} from './index.h'\nimport {nextStepID} from './id'\nimport {add} from './collection'\n\nexport const createStateRef = (current?: any): StateRef => ({\n  id: nextStepID(),\n  current,\n})\nexport const readRef = ({current}: StateRef | {current: any}) => current\n\nexport const addRefOp = (ref: StateRef, op: StateRefOp) => {\n  if (!ref.before) ref.before = []\n  add(ref.before!, op as any)\n}\n","import type {Stack} from './kernel'\n\nexport const callStackAReg = (stack: any, {fn}: any, {a}: Stack) => fn(stack, a)\nexport const callARegStack = (stack: any, {fn}: any, {a}: Stack) => fn(a, stack)\nexport const callStack = (stack: any, {fn}: any, _: Stack) => fn(stack)\n","import type {Node, StateRef} from './index.h'\nimport type {Scope} from './unit.h'\n\nexport const getGraph = (graph: any): Node => graph.graphite || graph\nexport const getOwners = (node: Node) => node.family.owners\nexport const getLinks = (node: Node) => node.family.links\nexport const getStoreState = (store: any): StateRef => store.stateRef\nexport const getValue = (stack: any) => stack.value\nexport const getSubscribers = (store: any) => store.subscribers\nexport const getParent = (unit: any) => unit.parent\nexport const getForkPage = (val: any): Scope | void => val.scope\nexport const getMeta = (unit: any, field: string) => getGraph(unit).meta[field]\nexport const setMeta = (unit: any, field: string, value: any) =>\n  (getGraph(unit).meta[field] = value)\n","import type {NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {DOMAIN, CROSSLINK} from './tag'\nimport {add, forEach} from './collection'\n\nexport const own = (ownerUnit: NodeUnit, links: NodeUnit[]) => {\n  const owner = getGraph(ownerUnit)\n  forEach(links, _link => {\n    const link = getGraph(_link)\n    if (owner.family.type !== DOMAIN) link.family.type = CROSSLINK\n    add(getOwners(link), owner)\n    add(getLinks(owner), link)\n  })\n}\n","import {Node, NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks, getSubscribers, getMeta} from './getter'\nimport {is} from './is'\nimport {removeItem} from './collection'\nimport {CROSSLINK} from './tag'\n\nconst removeFromNode = (currentNode: Node, targetNode: Node) => {\n  removeItem(currentNode.next, targetNode)\n  removeItem(getOwners(currentNode), targetNode)\n  removeItem(getLinks(currentNode), targetNode)\n}\nconst clearNodeNormalized = (\n  targetNode: Node,\n  deep: boolean,\n  isDomainUnit: boolean,\n) => {\n  targetNode.next.length = 0\n  targetNode.seq.length = 0\n  //@ts-ignore\n  targetNode.scope = null\n  let currentNode\n  let list = getLinks(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (\n      deep ||\n      (isDomainUnit && getMeta(targetNode, 'op') !== 'sample') ||\n      currentNode.family.type === CROSSLINK\n    ) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n  list = getOwners(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (isDomainUnit && currentNode.family.type === CROSSLINK) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n}\nconst clearMap = (map: any) => map.clear()\nexport const clearNode = (\n  graphite: NodeUnit,\n  {\n    deep,\n  }: {\n    deep?: boolean\n  } = {},\n) => {\n  let isDomainUnit = false\n  //@ts-ignore\n  if (graphite.ownerSet) graphite.ownerSet.delete(graphite)\n  if (is.store(graphite)) {\n    clearMap(getSubscribers(graphite))\n  } else if (is.domain(graphite)) {\n    isDomainUnit = true\n    //@ts-ignore\n    const history = graphite.history\n    clearMap(history.events)\n    clearMap(history.effects)\n    clearMap(history.stores)\n    clearMap(history.domains)\n  }\n  clearNodeNormalized(getGraph(graphite), !!deep, isDomainUnit)\n}\n","import type {Subscription, NodeUnit} from './index.h'\nimport {clearNode} from './clearNode'\n\nexport const createSubscription = (node: NodeUnit): Subscription => {\n  const result = () => clearNode(node)\n  result.unsubscribe = result\n  return result\n}\n","import {processArgsToConfig} from './config'\nimport {createNode} from './createNode'\nimport type {Subscription, NodeUnit, Cmd} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assertNodeSet} from './is'\n\nexport const createLinkNode = (\n  parent: NodeUnit | NodeUnit[],\n  child: NodeUnit | NodeUnit[],\n  node?: Array<Cmd | false | void | null>,\n  op?: string,\n  scopeFn?: Function,\n) =>\n  createNode({\n    node,\n    parent,\n    child,\n    scope: {fn: scopeFn},\n    meta: {op},\n    family: {owners: [parent, child], links: child},\n    regional: true,\n  })\nexport const forward = (opts: {\n  from: NodeUnit | NodeUnit[]\n  to: NodeUnit | NodeUnit[]\n  meta?: Record<string, any>\n}): Subscription => {\n  const [{from, to}, config] = processArgsToConfig(opts, true)\n  assertNodeSet(from, 'forward', '\"from\"')\n  assertNodeSet(to, 'forward', '\"to\"')\n  return createSubscription(\n    createNode({\n      parent: from,\n      child: to,\n      meta: {op: 'forward', config},\n      family: {},\n      regional: true,\n    }),\n  )\n}\n","import {run} from './step'\nimport {callStack} from './caller'\nimport {createNode} from './createNode'\nimport {Subscription, NodeUnit} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assert} from './throw'\nimport {isFunction} from './is'\n\nexport const watchUnit = (\n  unit: NodeUnit,\n  handler: (payload: any) => any,\n): Subscription => {\n  assert(isFunction(handler), '.watch argument should be a function')\n  return createSubscription(\n    createNode({\n      scope: {fn: handler},\n      node: [run({fn: callStack})],\n      parent: unit,\n      meta: {op: 'watch'},\n      family: {owners: unit},\n      regional: true,\n    }),\n  )\n}\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","import {h, spec} from 'effector-dom';\nimport {createEvent, createStore, forward, sample} from 'effector';\nimport {Title} from './title';\nimport {appended} from './model';\n\nexport const Header = () => {\n  h('header', () => {\n    Title();\n\n    h('input', () => {\n      const keypress = createEvent();\n      const input = createEvent();\n\n      // создадим фильтруемое событие,\n      const submit = keypress.filter({fn: e => e.key === 'Enter'});\n\n      // стор с текущим значением инпута\n      const $value = createStore('')\n        .on(input, (_, e) => e.target.value)\n        .reset(appended); // заодно очистим при отправке\n\n      // для перенаправления события в другое в эффекторе есть forward({from, to})\n      forward({\n        // возьмем текущее значение $value по триггеру submit,\n        // и сразу сделаем фильтрацию для проверки значения\n        from: sample($value, submit).filter({fn: Boolean}),\n        to: appended,\n      });\n\n      spec({\n        attr: {\n          class: \"new-todo\",\n          placeholder: 'What needs to be done?',\n          value: $value\n        },\n        handler: {keypress, input},\n      })\n    });\n  });\n};\n","import {h} from 'effector-dom';\n\nexport const Title = () => {\n  h('h1', {text: 'todos'});\n};\n","// src/model.js\nimport {createStore, createEvent, combine} from 'effector';\nimport connectLocalStorage from \"effector-localstorage/sync\";\n\n// сторы\n\nconst $todosLocalStorage = connectLocalStorage(\"todos\")\n  .onError((err) => console.log(err)) // setup error callback\n//   .onChange(setCounter) // call event on external storage change\n\n// все задачи\nexport const $todos = createStore($todosLocalStorage.init([]));\n$todos.watch($todosLocalStorage)\n\n// текущий фильтр, для простоты будет null/true/false\nexport const $activeFilter = createStore(null);\n\n// отфильтрованные задачи\nexport const $filteredTodos = combine(\n  $todos,\n  $activeFilter,\n  (todos, filter) => filter === null\n    ? todos\n    : todos.filter(todo => todo.completed === filter)\n);\n\n// все ли завершены\nexport const $isAllCompleted = $todos.map((todos) => todos.every(todo => todo.completed ));\n\n// события\n\n// добавление новой задачи\nexport const appended = createEvent();\n\n// выполнение/снятие выполнения задачи\nexport const toggled = createEvent();\n\n// удаление задачи\nexport const removed = createEvent();\n\n// выполнение всех задач\nexport const allCompleted = createEvent();\n\n// удаление выполненных задач\nexport const completedRemoved = createEvent();\n\n// фильтрация задач\nexport const filtered = createEvent();\n$todos\n  // добавление новой задачи\n  .on(appended, (state, title) => [...state, {title, completed: false}])\n  // удаление задачи. Для простоты будем проверять title\n  .on(removed, (state, title) => state.filter(item => item.title !== title))\n  // выполнение/снятие выполнения\n  .on(toggled, (state, title) => state.map(item => item.title === title\n    ? ({...item, completed: !item.completed})\n    : item))\n  // выполнение всех задач\n  .on(allCompleted, (state) => { const val = !$isAllCompleted.getState(); return state.map(item => item.completed === val\n    ? item\n    : ({...item, completed: val}))\n  })\n  // удаление выполненных задач\n  .on(completedRemoved, state => state.filter(item => !item.completed));\n\n$activeFilter\n  // фильтрация\n  .on(filtered, (_, filter) => filter);\n","function connectStorage (key) {\n  var errorHandler\n\n  function holder (value) {\n    try {\n      localStorage.setItem(key, JSON.stringify(value))\n    } catch (err) {\n      errorHandler && errorHandler(err)\n    }\n  }\n\n  holder.onError = function (handler) {\n    errorHandler = handler\n    return holder\n  }\n\n  holder.onChange = function (event) {\n    addEventListener('storage', function (e) {\n      e.key === key && event(holder.init())\n    })\n    return holder\n  }\n\n  holder.init = function (value) {\n    try {\n      var item = localStorage.getItem(key)\n      return item === null ? value : JSON.parse(item)\n    } catch (err) {\n      errorHandler && errorHandler(err)\n    }\n    return value\n  }\n\n  return holder\n}\n\nmodule.exports = connectStorage\n","// src/view/main.js\nimport {h, spec, list} from 'effector-dom';\nimport {TodoItem} from './todoItem';\nimport {$filteredTodos, allCompleted, $isAllCompleted} from './model';\n\nexport const Main = (a) => {\n  h('section', () => {\n    spec({attr: {class: 'main'}});\n\n    // выбор всех задач\n    h('input', {\n      attr: {id: 'toggle-all', class: 'toggle-all', type: 'checkbox', checked: $isAllCompleted},\n\t  handler: {change: allCompleted}\n    });\n    h('label', {attr: {for: 'toggle-all'}});\n\n    // список задач\n    h('ul', () => {\n      spec({attr: {class: \"todo-list\"}});\n      list({\n        source: $filteredTodos,\n        key: 'title',\n        fields: ['title', 'completed']\n        // в fields окажутся сторы с их значениям\n      }, ({fields: [title, completed], key}) => TodoItem({title, completed, key}));\n    });\n  });\n};\n","import {h, spec} from 'effector-dom';\nimport {toggled, removed} from './model';\n\n// title и completed - сторы с конкретными значениями\nexport const TodoItem = ({title, completed, key}) => {\n  h('li', () => {\n    // новый наследуемый стор с классом по флагу\n    spec({attr: {class: completed.map(flag => flag ? 'completed' : false)}});\n\n    h('div', () => {\n      spec({attr: {class: 'view'}});\n\n      h('input', {\n        attr: {class: 'toggle', type: 'checkbox', checked: completed},\n        // новое событие с предустановкой параметров\n        handler: {click: toggled.prepend(() => key)},\n      });\n\n      h('label', {text: title});\n\n      h('button', {\n        attr: {class: 'destroy'},\n        // новое событие с предустановкой параметров\n        handler: {click: removed.prepend(() => key)},\n      });\n    });\n  });\n};\n","import {h, spec} from 'effector-dom';\nimport {$todos, $activeFilter, filtered, completedRemoved} from './model';\n\nexport const Footer = () => {\n  h('footer', () => {\n    spec({attr: {class: 'footer'}});\n\n    h('span', () => { // Каунтер активных задач\n      spec({attr: {class: 'todo-count'}});\n\n      const $activeCount = $todos.map(\n        todos => todos.filter(todo => !todo.completed).length\n      );\n\n      h('strong', {text: $activeCount});\n      h('span', {text: $activeCount.map(count => count === 1\n        ? ' item left'\n        : ' items left'\n      )});\n    });\n\n    h('ul', () => { // кнопки фильтров, ничего нового\n      spec({attr: {class: 'filters'}});\n\n      h('li', () => {\n        h('a', {\n          attr: {class: $activeFilter.map(active => active === null\n            ? 'selected'\n            : false\n          )},\n          text: 'All',\n          handler: {click: filtered.prepend(() => null)},\n        });\n      });\n\n      h('li', () => {\n        h('a', {\n          attr: {class: $activeFilter.map(completed => completed === false\n            ? 'selected'\n            : false\n          )},\n          text: 'Active',\n          handler: {click: filtered.prepend(() => false)},\n        });\n      });\n\n      h('li', () => {\n        h('a', {\n          attr: {class: $activeFilter.map(completed => completed === true\n            ? 'selected'\n            : false\n          )},\n          text: 'Completed',\n          handler: {click: filtered.prepend(() => true)},\n        });\n      });\n    });\n\n    h('button', {\n      attr: {class: 'clear-completed'},\n      text: 'Clear completed',\n      handler: {click: completedRemoved},\n    });\n  });\n};\n"],"names":["own","ownerUnit","ownedUnits","owner","getGraph","i","length","link","family","type","owners","getOwners","links","getLinks","includes","push","makeSiblings","left","right","setRightSibling","setLeftSibling","target","value","locality","sibling","ref","createSignal","scope","stack","parent","activeStack","get","signal","createNode","node","clearLocality","sendSelf","filter","Boolean","meta","unit","self","escapeTag","String","replace","invalidToken","escapeTagValue","invalidValue","using","cb","namespaceURI","tag","tagName","toLowerCase","ns","parentStack","namespace","targetElement","svgRoot","child","first","last","pure","attr","data","visible","text","styleVar","styleProp","handler","transform","focus","blur","mountStatus","nodeStack","append","reverse","withRegion","appendBatch","pop","frag","document","createDocumentFragment","appendChild","prepend","forwardStacks","seq","removeFromParent","createWatch","fn","runner","op","batchRAFrs","isBatched","executeTasks","backpressureEvent","trigger","priority","taskID","nextTaskID","result","createEvent","is","store","updates","pushSingleValue","targets","set","runBatchFn","unwrapFail","dropEmptyList","unwrapDone","priorities","dynamicQueueFlat","timeout","Infinity","batchWindow","retries","mark","shortName","prepared","map","inserted","now","retry","processed","list","start","interrupted","done","batched","item","timeNow","undefined","j","fail","dynamicQueue","flatten","items","block","noDebounceRaf","source","watch","debounceRaf","toDomOp","domOp","launch","getState","domOperation","immediate","findLastVisibleNode","fromIndex","visibleChild","findNearestVisibleNode","found","indexOf","isFalse","val","applyData","dataset","field","applyVisible","contains","nearestVisible","after","remove","bindVisible","element","bind","applyAttr","checked","setAttribute","removeAttribute","applyTransform","svg","transformList","key","createSVGTransform","x","y","combine","xShape","yShape","normalizeTranslateShape","appendItem","setText","textNode","replaceData","textContent","setFocus","setBlur","h","opts","noAppend","parentNS","createElementNS","createElement","draft","currentStack","succ","initNode","spec","merged","getElementNode","options","passive","prevent","evt","e","preventDefault","stop","stopPropagation","href","mergeNodeDraft","bindAttr","bindData","handlers","addEventListener","finalizeHandler","bindHandler","style","propName","applyStyleProp","bindStyleProp","applyStyleVal","bindStyleVar","operationsSeq","baseVal","operations","transformResolvers","bindTransform","stores","createTextNode","bindText","events","bindFocus","bindBlur","applyNodeDraft","remap","shape","Array","isArray","readField","owned","storeField","tree","currentKey","childList","getID","indexIDGetter","keyIDGetter","parentSignal","context","parentNode","fields","createStore","update","clearParentSignal","sample","clock","records","input","skipNode","fill","keys","newRecords","resultRecords","removedRecords","record","index","params","defer","active","removeNodesFromDOM","lastItem","id","nodes","applyNewRecordsEvent","insertElement","before","explicitUnmount","unmountOn","signalOwn","assertElementNode","extensionName","Error","nodeMethod","method","args","__STATIC__","prop","capture","console","error","originalCombine","variant","cases","caseList","Object","entries","caseListWithVisibility","[object Object]","currentActiveStack","graphite","clearSelf","step","run","clearNode","compute","_","next","CSSStyle","this","create","property","properties","DOMSVGTransformList","newItem","DOMSVGTransform","tx","ty","sx","sy","angle","cx","cy","isFragment","nextChild","firstChild","attributes","offset","content","slice","isBody","doc","upd","splice","beginMark","endMark","label","performance","process","hrtime","hr","Date","rafID","bonusTime","raf","requestAnimationFrame","setTimeout","cancelRaf","cancelAnimationFrame","clearTimeout","Map","importantTasks","tasks","startTime","executionEndMark","size","delete","taskList","values","removeEventListener","variableName","removeProperty","setProperty","setTranslate","setScale","setRotate","setSkewX","setSkewY","appendBatchEvent","listItem","appended","listItemStack","k","allRecords","forIn","obj","forEach","assert","condition","message","regionStack","template","getMeta","readTemplate","sidRoot","getParent","from","to","familyRaw","regional","sources","arrifyNodes","add","nextNodeID","getValue","payload","upsert","pageForLaunch","currentPage","stackForLaunch","forkPageForLaunch","forkPage","page","getForkPage","pushFirstHeapItem","isRoot","skip","reg","lastStartedState","isWatch","kernelLoop","deleteMin","idx","hasPageReg","hasScopeReg","local","stepn","order","barrierID","fullID","barriers","has","pushHeap","STACK","pageForRef","getPageForRef","initRefInScope","softRead","readRef","getPageRef","current","computationResult","safe","tryRun","finalValue","nextNode","fxCount","storeChange","additionalLinks","unitObjectName","objOrArr","name","comma","getCompostite","fullName","toString","setStoreName","rawName","assign","createName","path","composite","concat","processArgsToConfig","singleArgument","rawConfig","assertObject","and","or","applyTemplate","nameOrConfig","maybeConfig","event","deprecate","oldPage","setCurrentPage","callCreate","initUnit","watchUnit","deriveEvent","MAP","callStack","filterMap","calc","isVoid","contramapped","createLinkNode","applyParentHook","defaultState","props","plainState","createStateRef","createNamedEvent","plainStateId","subscribers","stateRef","reachedPage","targetRef","setState","state","reset","units","on","nodeSet","assertNodeSet","off","getSubscribers","createSubscription","updateStore","callARegStack","currentSubscription","firstState","config","lastResult","isObject","storeState","innerStore","derived","linkNode","callStackAReg","addRefOp","getStoreState","noInit","eventOrFn","subscription","isFunction","updateFilter","defaultConfig","b","read","a","mov","sid","setMeta","structStoreShape","shapeReady","noArraySpread","rawHandler","storeCombination","createStoreObject","createDefer","req","Promise","rs","rj","catch","err","createEffect","instance","kind","use","getCurrent","anyway","finally","named","status","doneData","failData","handlerId","getType","scope_","handler_","onResolve","onSettled","onReject","ok","runFn","then","fx","savedFork","setForkPage","inFlight","pending","amount","attach","injected","effect","mapParams","attached","runnerSteps","runnerFnStep","computedParams","sourceData","isEffectHandler","createApi","setters","metadata","createDomain","history","hooks","Event","Effect","Store","Domain","factory","lowerCaseTag","acc","Set","res","ownerSet","hook","fromObservable","observable","observableItem","observableSymbol","subscribe","disposer","complete","merge","validateSampleConfig","atLeastOneFieldExists","sampleConfigFields","fieldErrorMessage","greedy","groupInputs","isUpward","sourceRef","hasSource","clockState","guard","METHOD","filterFn","filterIsUnit","restore","domain","split","match","knownCases","matchIsUnit","matchIsFunction","matchIsShape","__","splitterSeq","caseNames","scopeTargets","launchCase","lastValues","needBarrier","storeOrFn","updater","storeRef","caseName","allSettled","ctx","reject","parentFork","defers","launchUnits","launchParams","traverseStores","root","visit","normalizeValues","assertEach","fork","domainOrConfig","optiionalConfig","forkInFlightCounter","fxID","batch","resolve","storeStack","storeNode","sidIdMap","sidValuesMap","resultScope","cloneOf","createScope","valuesSidMap","hydrate","traverseTarget","needToAssign","normalizedValues","valuesSidList","getOwnPropertyNames","storeNodes","storeValues","scopeBind","savedForkPage","serialize","ignoredStores","ignore","onlyChanges","Symbol","removeItem","pos","subject","suggestion","assertNodeSetItem","valueName","reason","idCount","nextUnitID","nextStepID","cmd","nextBarrierID","isEffect","toStack","samplerPriority","graph","_link","readSidRoot","withFactory","loc","flat","heap","ret","v","getPriority","r","l","queue","ix","bucket","t","newForkPage","newPage","isGetState","isKernelCall","refsMap","isFresh","compositeName","flattenConfig","part","removeFromNode","currentNode","targetNode","clearNodeNormalized","deep","isDomainUnit","clearMap","clear","effects","domains","unsubscribe","scopeFn","forward","hookType","configA","configB","isDomain","unitId","thru","observer","nativeTemplate","mapped","caller","reader","needSpread","clone","stateNew","rawShape","storeStateRef","c","childRef","defaultShape","sidechain"],"version":3,"file":"index.69062844.js.map","sourceRoot":"/__parcel_source_root/"}