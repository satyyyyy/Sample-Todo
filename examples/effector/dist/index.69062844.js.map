{"mappings":"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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-e9b9bab3c5d2a580.js","js/app.js","node_modules/effector-dom/effector-dom.es.js","node_modules/effector-dom/effector-dom/own.ts","node_modules/effector-dom/effector-dom/render/locality.ts","node_modules/effector-dom/effector-dom/render/createSignal.ts","node_modules/effector-dom/effector-dom/render/document.ts","node_modules/effector-dom/effector-dom/render/using.ts","node_modules/effector-dom/effector-dom/render/createWatch.ts","node_modules/effector-dom/effector-dom/batch.ts","node_modules/effector-dom/effector-dom/env.ts","node_modules/effector-dom/effector-dom/render/renderer.ts","node_modules/effector-dom/effector-dom/render/nearestNode.ts","node_modules/effector-dom/effector-dom/render/bindings.ts","node_modules/effector-dom/effector-dom/render/h.ts","node_modules/effector-dom/effector-dom/render/bind.ts","node_modules/effector-dom/effector-dom/storeField.ts","node_modules/effector-dom/effector-dom/render/list.ts","node_modules/effector-dom/effector-dom/h.ts","node_modules/effector-dom/effector-dom/op.ts","node_modules/effector-dom/effector-dom/variant.ts","node_modules/effector-dom/effector-dom/render/stack.ts","node_modules/effector-dom/effector-dom/render/documentResolver.ts","node_modules/effector-dom/effector-dom/render/mark.ts","node_modules/effector-dom/effector-dom/render/platform/now.ts","node_modules/process/browser.js","node_modules/effector/effector.es.js","node_modules/effector/effector/createNode.js","node_modules/effector/effector/naming.js","node_modules/effector/effector/region.js","node_modules/effector/effector/createUnit.js","node_modules/effector/effector/combine.js","node_modules/effector/effector/sample.js","node_modules/effector/effector/split.js","node_modules/effector/effector/merge.js","node_modules/effector/effector/fromObservable.js","node_modules/effector/effector/createEffect.js","node_modules/effector/effector/defer.js","node_modules/effector/effector/createDomain.js","node_modules/effector/effector/restore.js","node_modules/effector/effector/createApi.js","node_modules/effector/effector/guard.js","node_modules/effector/effector/stdlib/kind.js","node_modules/effector/effector/validate.js","node_modules/effector/effector/stdlib/bind.js","node_modules/effector/effector/stdlib/refcount.js","node_modules/effector/effector/stdlib/step.js","node_modules/effector/effector/stdlib/getter.js","node_modules/effector/effector/stdlib/family.js","node_modules/effector/effector/stdlib/stateref.js","node_modules/effector/effector/stdlib/caller.js","node_modules/effector/effector/kernel.js","node_modules/effector/effector/config.js","node_modules/effector/effector/clearNode.js","node_modules/effector/effector/subscription.js","node_modules/effector/effector/forward.js","node_modules/effector/effector/watch.js","node_modules/effector/effector/blocks.js","node_modules/symbol-observable/es/index.js","node_modules/symbol-observable/es/ponyfill.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","js/header.js","js/title.js","js/model.js","node_modules/effector-localstorage/sync.js","js/main.js","js/todoItem.js","js/footer.js"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"4a236f9275d0a351\";module.bundle.HMR_BUNDLE_ID = \"b884aa5669062844\";\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */\n\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: mixed;\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function accept(fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function dispose(fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData = undefined;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets\n/*: {|[string]: boolean|} */\n, acceptedAssets\n/*: {|[string]: boolean|} */\n, assetsToAccept\n/*: Array<[ParcelRequire, string]> */\n;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\n\nfunction getPort() {\n  return HMR_PORT || location.port;\n} // eslint-disable-next-line no-redeclare\n\n\nvar parent = module.bundle.parent;\n\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe\n\n  ws.onmessage = function (event\n  /*: {data: string, ...} */\n  ) {\n    checkedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    acceptedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    assetsToAccept = [];\n    var data\n    /*: HMRMessage */\n    = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n\n      var assets = data.assets.filter(function (asset) {\n        return asset.envHash === HMR_ENV_HASH;\n      }); // Handle HMR Update\n\n      var handled = assets.every(function (asset) {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n\n      if (handled) {\n        console.clear();\n        assets.forEach(function (asset) {\n          hmrApply(module.bundle.root, asset);\n        });\n\n        for (var i = 0; i < assetsToAccept.length; i++) {\n          var id = assetsToAccept[i][1];\n\n          if (!acceptedAssets[id]) {\n            hmrAcceptRun(assetsToAccept[i][0], id);\n          }\n        }\n      } else {\n        window.location.reload();\n      }\n    }\n\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var ansiDiagnostic = _step.value;\n          var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n          console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe\n\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\n\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  var errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n\n  var _iterator2 = _createForOfIteratorHelper(diagnostics),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var diagnostic = _step2.value;\n      var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;\n      errorHTML += \"\\n      <div>\\n        <div style=\\\"font-size: 18px; font-weight: bold; margin-top: 20px;\\\">\\n          \\uD83D\\uDEA8 \".concat(diagnostic.message, \"\\n        </div>\\n        <pre>\").concat(stack, \"</pre>\\n        <div>\\n          \").concat(diagnostic.hints.map(function (hint) {\n        return '<div>💡 ' + hint + '</div>';\n      }).join(''), \"\\n        </div>\\n        \").concat(diagnostic.documentation ? \"<div>\\uD83D\\uDCDD <a style=\\\"color: violet\\\" href=\\\"\".concat(diagnostic.documentation, \"\\\" target=\\\"_blank\\\">Learn more</a></div>\") : '', \"\\n      </div>\\n    \");\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\n\nfunction getParents(bundle, id)\n/*: Array<[ParcelRequire, string]> */\n{\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n\n  newLink.setAttribute('href', // $FlowFixMe\n  link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe\n\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\n\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href\n      /*: string */\n      = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;\n\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nfunction hmrApply(bundle\n/*: ParcelRequire */\n, asset\n/*:  HMRAsset */\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n\n    if (deps) {\n      var fn = new Function('require', 'module', 'exports', asset.output);\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\n\nfunction hmrAcceptCheck(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n\n  if (checkedAssets[id]) {\n    return true;\n  }\n\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  var parents = getParents(module.bundle.root, id); // If no parents, the asset is new. Prevent reloading the page.\n\n  if (!parents.length) {\n    return true;\n  }\n\n  return parents.some(function (v) {\n    return hmrAcceptCheck(v[0], v[1], null);\n  });\n}\n\nfunction hmrAcceptRun(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n  cached = bundle.cache[id];\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n\n  acceptedAssets[id] = true;\n}","import {h, spec, using} from 'effector-dom';\nimport {Header} from './header';\nimport {Main} from './main';\nimport {Footer} from './footer';\n\nexport const App = () => {\n  // создадим section элемент\n  h('section', () => {\n    // и укажем ему класс\n    spec({attr: {class: 'todoapp'}});\n\n    // также выведем остальные части приложения\n    Header();\n    Main();\n    Footer();\n  });\n};\n\nusing(document.body, () => {\n  App();\n});\n",null,"export function own(ownerUnit, ownedUnits) {\n  const owner = getGraph(ownerUnit)\n  for (let i = 0; i < ownedUnits.length; i++) {\n    const link = getGraph(ownedUnits[i])\n    link.family.type = 'crosslink'\n    const owners = getOwners(link)\n    const links = getLinks(owner)\n    if (!owners.includes(owner)) owners.push(owner)\n    if (!links.includes(link)) links.push(link)\n  }\n}\n\nconst getGraph = unit => unit.graphite || unit\nconst getOwners = node => node.family.owners\nconst getLinks = node => node.family.links\n","import {Stack} from './index.h'\n\nexport function makeSiblings(left: Stack | null, right: Stack | null) {\n  setRightSibling(left, right)\n  setLeftSibling(right, left)\n}\n\nexport function setRightSibling(target: Stack | null, value: Stack | null) {\n  if (!target) return\n  if (target === value) return\n  target.locality.sibling.right.ref = value\n}\n\nexport function setLeftSibling(target: Stack | null, value: Stack | null) {\n  if (!target) return\n  if (target === value) return\n  target.locality.sibling.left.ref = value\n}\n\nexport function getRightSibling(target: Stack | null): Stack | null {\n  if (!target) return null\n  return target.locality.sibling.right.ref\n}\n","import {step, createNode, clearNode} from 'effector'\nimport {activeStack} from './stack'\nimport {Signal, Stack} from './index.h'\nimport {makeSiblings, setRightSibling, setLeftSibling} from './locality'\n\nconst clearSelf = createNode({\n  node: [\n    step.run({\n      fn(self) {\n        clearNode(self)\n      },\n    }),\n  ],\n})\nconst clearLocality = step.compute({\n  fn(_, scope: {stack: Stack | null; self: Signal}) {\n    scope.self.next.push(clearSelf)\n    const {stack} = scope\n    const {parent} = stack\n    const {left, right} = stack.locality.sibling\n    if (parent) {\n      if (parent.locality.child.last.ref === stack) {\n        parent.locality.child.last.ref = left.ref\n      }\n      if (parent.locality.child.first.ref === stack) {\n        parent.locality.child.first.ref = right.ref\n      }\n    }\n    if (\n      left.ref &&\n      left.ref.locality.sibling.right.ref === stack &&\n      right.ref &&\n      right.ref.locality.sibling.left.ref === stack\n    ) {\n      makeSiblings(left.ref, right.ref)\n    } else if (left.ref && left.ref.locality.sibling.right.ref === stack) {\n      setRightSibling(left.ref, null)\n    } else if (right.ref && right.ref.locality.sibling.left.ref === stack) {\n      setLeftSibling(right.ref, null)\n    }\n  },\n})\nconst sendSelf = step.compute({\n  fn: (_, {self}) => self,\n})\nexport function createSignal(): Signal {\n  const scope = {stack: null} as any\n  const parent = activeStack.get()\n  const signal = createNode({\n    node: [clearLocality, sendSelf],\n    //@ts-ignore\n    parent: [parent && parent.signal].filter(Boolean),\n    meta: {unit: 'signal'},\n    scope,\n  })\n  scope.self = signal\n  return signal\n}\n","import {DOMElement} from './index.h'\nconst invalidToken = /[^a-zA-Z0-9\\-]/g\nconst invalidValue = /[\\\\<>\"]/g\nconst dataValue = /[A-Z]/g\nconst escaped = /[&<>'\"]/g\n\nclass DOMNode {\n  child: {\n    first: DOMNode | null\n    last: DOMNode | null\n  } = {\n    first: null,\n    last: null,\n  }\n  sibling: {\n    left: DOMNode | null\n    right: DOMNode | null\n  } = {\n    left: null,\n    right: null,\n  }\n  parent: DOMNode | null = null\n  tagName = ''\n  namespaceURI = 'http://www.w3.org/1999/xhtml' as const\n  dataset = Object.create(null)\n  style = new CSSStyle()\n  value?: string\n  firstChild: DOMNode | null = null\n  transform = {\n    baseVal: new DOMSVGTransformList(),\n  }\n  isFragment = true\n  attributes: {[attributeName: string]: string} = Object.create(null)\n  textContent: string | null = null\n  __STATIC__ = true\n  appendChild(node: DOMNode): void {\n    if (node.parent) node.remove()\n    if (node.isFragment && node.textContent === null) {\n      let child = node.firstChild\n      let nextChild\n      while (child) {\n        nextChild = child.sibling.right\n        this.appendChild(child)\n        child = nextChild\n      }\n      return\n    }\n    if (!this.child.last) {\n      this.child.first = node\n      this.firstChild = node\n    } else {\n      this.child.last.sibling.right = node\n      node.sibling.left = this.child.last\n    }\n    this.child.last = node\n    node.parent = this\n  }\n  prepend(node: DOMNode): void {\n    if (node.parent) node.remove()\n    if (!this.child.last) {\n      this.child.first = node\n      this.child.last = node\n    } else {\n      this.child.first!.sibling.left = node\n      node.sibling.right = this.child.first\n    }\n    this.child.first = node\n    this.firstChild = node\n    node.parent = this\n  }\n  contains(node: DOMNode): boolean {\n    let parent: DOMNode | null = node\n    while (parent) {\n      if (parent === this) return true\n      parent = parent.parent\n    }\n    return false\n  }\n  remove(): void {\n    if (!this.parent) return\n    const {parent} = this\n    if (parent.child.first === this && parent.child.last === this) {\n      parent.firstChild = null\n      parent.child.first = null\n      parent.child.last = null\n    } else if (parent.child.first === this) {\n      parent.child.first = this.sibling.right\n      parent.firstChild = this.sibling.right\n      this.sibling.right!.sibling.left = null\n    } else if (parent.child.last === this) {\n      parent.child.last = this.sibling.left\n      this.sibling.left!.sibling.right = null\n    } else {\n      this.sibling.right!.sibling.left = this.sibling.left\n      this.sibling.left!.sibling.right = this.sibling.right\n    }\n    this.sibling.left = null\n    this.sibling.right = null\n    this.parent = null\n  }\n  addEventListener(key: string, fn: Function, options: object): void {}\n  removeEventListener(key: string, fn: Function, options: object): void {}\n  setAttribute(property: string, value: string): void {\n    this.attributes[escapeTag(property)] = escapeTagValue(value)\n  }\n  removeAttribute(property: string): void {\n    delete this.attributes[escapeTag(property)]\n  }\n  replaceWith(node: DOMNode): void {\n    if (!this.parent) return\n    const {parent} = this\n    if (node.parent) node.remove()\n    if (parent.child.first === this && parent.child.last === this) {\n      parent.firstChild = node\n      parent.child.first = node\n      parent.child.last = node\n    } else if (parent.child.first === this) {\n      parent.child.first = node\n      parent.firstChild = node\n      this.sibling.right!.sibling.left = node\n    } else if (parent.child.last === this) {\n      parent.child.last = node\n      this.sibling.left!.sibling.right = node\n    } else {\n      this.sibling.right!.sibling.left = node\n      this.sibling.left!.sibling.right = node\n    }\n    node.sibling.left = this.sibling.left\n    node.sibling.right = this.sibling.right\n    node.parent = parent\n    this.sibling.left = null\n    this.sibling.right = null\n    this.parent = null\n  }\n  focus(): void {}\n  blur(): void {}\n  createSVGTransform(): DOMSVGTransform {\n    return new DOMSVGTransform()\n  }\n}\nclass CSSStyle {\n  properties = Object.create(null)\n  setProperty(property: string, value: string): void {\n    this.properties[escapeTag(property)] = escapeTagValue(value)\n  }\n  removeProperty(property: string): void {\n    delete this.properties[escapeTag(property)]\n  }\n}\nclass DOMSVGTransformList {\n  items: DOMSVGTransform[] = []\n  appendItem(newItem: DOMSVGTransform) {\n    this.items.push(newItem)\n  }\n}\nclass DOMSVGTransform {\n  value = ''\n  setTranslate(tx: number, ty: number): void {\n    this.value = `translate(${tx} ${ty})`\n  }\n  setScale(sx: number, sy: number): void {\n    this.value = `scale(${sx} ${sy})`\n  }\n  setRotate(angle: number, cx: number, cy: number): void {\n    if (cx !== 0 || cy !== 0) {\n      this.value = `rotate(${angle} ${cx} ${cy})`\n    } else {\n      this.value = `rotate(${angle})`\n    }\n  }\n  setSkewX(angle: number): void {\n    this.value = `skewX(${angle})`\n  }\n  setSkewY(angle: number): void {\n    this.value = `skewY(${angle})`\n  }\n}\nfunction convertDataChar(char: string) {\n  return `-${char.toLowerCase()}`\n}\nfunction convertDataAttr(value: string) {\n  return escapeTag(value).replace(dataValue, convertDataChar)\n}\nfunction escapeContentHandler(char: string) {\n  switch (char) {\n    case '&':\n      return '&amp;'\n    case '<':\n      return '&lt;'\n    case '>':\n      return '&gt;'\n    case '\"':\n      return '&quot;'\n    case \"'\":\n      return '&#39;'\n    default:\n      return char\n  }\n}\nfunction escapeTag(value: string) {\n  value = String(value)\n  switch (value) {\n    case '__proto__':\n    case '__defineGetter__':\n    case '__defineSetter__':\n    case 'constructor':\n    case 'prototype':\n    case 'hasOwnProperty':\n    case 'toString':\n    case 'valueOf':\n      return 'blacklisted'\n    default:\n      return value.replace(invalidToken, '')\n  }\n}\nfunction escapeTagValue(value: string) {\n  return String(value).replace(invalidValue, '')\n}\nfunction escapeContent(value: string) {\n  return String(value).replace(escaped, escapeContentHandler)\n}\n\nexport const body = new DOMNode()\n//@ts-ignore\nbody.isBody = true\nexport function createTextNode(text: string) {\n  const node = new DOMNode()\n  node.textContent = escapeContent(text)\n  return node\n}\nexport function createElement(tag: string) {\n  const node = new DOMNode()\n  node.tagName = escapeTag(tag)\n  node.isFragment = false\n  return node\n}\nexport function createElementNS(\n  namespace: 'http://www.w3.org/1999/xhtml' | 'http://www.w3.org/2000/svg',\n  tag: string,\n) {\n  switch (namespace) {\n    case 'http://www.w3.org/1999/xhtml':\n    case 'http://www.w3.org/2000/svg':\n      break\n    default:\n      namespace = 'http://www.w3.org/1999/xhtml'\n  }\n  const node = new DOMNode()\n  node.tagName = escapeTag(tag)\n  //@ts-ignore\n  node.namespaceURI = namespace\n  node.isFragment = false\n  return node\n}\n\nexport function createDocumentFragment(): DOMNode & DOMElement {\n  //@ts-ignore\n  return new DOMNode()\n}\n\nfunction renderPart(node: DOMNode, parts: string[]) {\n  if (node.textContent !== null) {\n    parts.push(node.textContent)\n  }\n  if (node.isFragment) {\n    let child = node.firstChild\n    while (child) {\n      renderPart(child, parts)\n      child = child.sibling.right\n    }\n    return\n  }\n  parts.push('<', node.tagName)\n  for (const key in node.attributes) {\n    parts.push(' ', key, '=', '\"', escapeTagValue(node.attributes[key]), '\"')\n  }\n  for (const key in node.dataset) {\n    parts.push(\n      ' ',\n      'data-',\n      convertDataAttr(key),\n      '=',\n      '\"',\n      escapeTagValue(node.dataset[key]),\n      '\"',\n    )\n  }\n  const styles = [] as string[]\n  for (const property in node.style.properties) {\n    if (property.startsWith('--')) {\n      styles.push(`${property}: ${node.style.properties[property]}`)\n    } else {\n      const dashedProperty = property.replace(\n        /[A-Z]/,\n        char => `-${char.toLowerCase()}`,\n      )\n      styles.push(`${dashedProperty}: ${node.style.properties[property]}`)\n    }\n  }\n  if (styles.length > 0) {\n    parts.push(' ', 'style', '=', '\"', styles.join(';'), '\"')\n  }\n  if (node.transform.baseVal.items.length > 0) {\n    parts.push(' ', 'transform', '=', '\"')\n    const transforms = node.transform.baseVal.items.map(({value}) => value)\n    parts.push(transforms.join(' '), '\"')\n  }\n  if (!node.firstChild) {\n    if (node.tagName === 'meta' || node.tagName === 'link') {\n      parts.push('>')\n    } else {\n      parts.push('/>')\n    }\n    return\n  }\n  parts.push('>')\n  let child: DOMNode | null = node.firstChild\n  while (child) {\n    renderPart(child, parts)\n    child = child.sibling.right\n  }\n  parts.push('</', node.tagName, '>')\n}\n\nexport function render(node: DOMNode) {\n  const parts = []\n  renderPart(node, parts)\n  const content = parts.join('')\n  if (detectFullPageRender(node)) {\n    return `<!DOCTYPE html>${content}`\n  }\n  return content\n}\n\nfunction detectFullPageRender(node: DOMNode): boolean {\n  if (node.tagName === 'html') return true\n  if (node.isFragment && node.textContent === null) {\n    const firstChild = node.firstChild\n    if (firstChild && node.child.last === firstChild) {\n      return detectFullPageRender(firstChild)\n    }\n  }\n  return false\n}\n","import {step, withRegion} from 'effector'\nimport {nodeStack, activeStack} from './stack'\nimport {DOMElement, NSType, Stack} from './index.h'\nimport {createSignal} from './createSignal'\nimport {document} from './documentResolver'\n\nexport function using(node: DOMElement, cb: () => any): void {\n  const namespaceURI = node.namespaceURI\n  const tag = node.tagName.toLowerCase()\n  const ns: NSType =\n    namespaceURI === 'http://www.w3.org/2000/svg'\n      ? 'svg'\n      : tag === 'foreignObject'\n      ? 'foreignObject'\n      : 'html'\n  const parentStack = activeStack.get()\n  const stack: Stack = {\n    parent: parentStack,\n    signal:\n      parentStack && parentStack.signal ? parentStack.signal : createSignal(),\n    namespace: ns,\n    targetElement: node,\n    svgRoot:\n      tag === 'svg' ? (node as any) : parentStack ? parentStack.svgRoot : null,\n    child: [],\n    locality: {\n      sibling: {\n        left: {ref: null},\n        right: {ref: null},\n      },\n      child: {\n        first: {ref: null},\n        last: {ref: null},\n      },\n    },\n    node: {\n      type: 'using',\n      pure: false,\n      attr: [],\n      data: [],\n      visible: [],\n      text: [],\n      styleVar: [],\n      styleProp: [],\n      handler: [],\n      transform: [],\n      focus: [],\n      blur: [],\n    },\n    mountStatus: 'initial',\n    visible: true,\n  }\n  // if (!parentStack || !parentStack.signal) {\n  //   stack.signal.scope.stack = stack\n  // }\n  activeStack.replace(stack)\n  nodeStack.push({node, append: [], reverse: false})\n  try {\n    withRegion(stack.signal, cb)\n  } finally {\n    appendBatch(nodeStack.pop()!)\n    activeStack.replace(parentStack)\n  }\n}\nexport function appendBatch({node, append, reverse = false}) {\n  if (append.length === 0) return\n  const frag = document.createDocumentFragment()\n  if (!reverse) {\n    for (let i = 0; i < append.length; i++) {\n      frag.appendChild(append[i])\n    }\n    node.appendChild(frag)\n  } else {\n    for (let i = append.length - 1; i >= 0; i--) {\n      frag.appendChild(append[i])\n    }\n    node.prepend(frag)\n  }\n}\n\nexport function forwardStacks(parent: Stack, child: Stack) {\n  child.parent = parent\n  child.signal.seq.push(removeFromParent)\n  child.signal.scope.stack = child\n  parent.child.push(child)\n}\n\nconst removeFromParent = step.compute({\n  fn(upd, scope: {stack: Stack}) {\n    if (!scope.stack) return upd\n    const {stack} = scope\n    //@ts-ignore\n    scope.stack = null\n    const index = stack.parent!.child.indexOf(stack)\n    if (index !== -1) {\n      stack.parent!.child.splice(index, 1)\n    }\n    stack.parent = null\n    return upd\n  },\n})\n","import {step, createNode} from 'effector'\nimport {Signal} from './index.h'\n\nconst runner = step.run({\n  fn(upd, {fn}) {\n    fn(upd)\n  },\n})\n\nexport function createWatch(parent: Signal, fn) {\n  return createNode({\n    node: [runner],\n    //@ts-ignore\n    parent,\n    meta: {op: 'watch'},\n    scope: {fn},\n    family: {\n      type: 'crosslink',\n      owners: [parent],\n    },\n  })\n}\n","import {createEvent, launch, Store, Event, is, createNode, step} from 'effector'\nimport {own} from './own'\nimport {beginMark, endMark} from './render/mark'\nimport {TASK_DEADLINE} from './env'\nimport {now} from './render/platform/now'\n\nexport type Priority = 'low' | 'high'\n\nconst runner =\n  typeof queueMicrotask !== 'undefined'\n    ? queueMicrotask\n    : function runner(cb) {\n        cb()\n      }\nconst executeTasks = createEvent()\nlet bonusTime = false\nlet isBatched = false\nlet rafID\nfunction batchRAFrs() {\n  isBatched = false\n  beginMark('batchRAF')\n  executeTasks()\n  endMark('batchRAF')\n}\nconst raf =\n  typeof requestAnimationFrame !== 'undefined'\n    ? requestAnimationFrame\n    : cb => setTimeout(cb, 0)\nconst cancelRaf =\n  typeof cancelAnimationFrame !== 'undefined'\n    ? cancelAnimationFrame\n    : clearTimeout\nconst batchWindow = () => {\n  if (isBatched) return\n  isBatched = true\n  rafID = raf(batchRAFrs)\n}\n\nconst targets = new Map<number, Store<any> | Event<any>>()\nconst importantTasks = new Map<number, any>()\nconst tasks = new Map<number, any>()\nconst priorities = new Map<number, Priority>()\n\nlet nextTaskID = 0\nlet startTime = 0\nfunction getTaskList(taskID: number) {\n  return priorities.get(taskID) === 'high' ? importantTasks : tasks\n}\nfunction watchBatchEvent(taskID: number, isList: boolean, value) {\n  const taskList = getTaskList(taskID)\n  let list: any[] = taskList.get(taskID)\n  if (!list) {\n    list = []\n    taskList.set(taskID, list)\n  }\n  if (isList) {\n    for (let i = 0; i < value.length; i++) {\n      list.push(value[i])\n    }\n  } else {\n    list.push(value)\n  }\n  batchWindow()\n}\nexport function batchEvent<T>(trigger: Event<T> | Store<T>): Event<T[]> {\n  const taskID = ++nextTaskID\n  const result = createEvent<T[]>()\n  const unit = is.store(trigger) ? trigger.updates : trigger\n  unit.watch(watchBatchEvent.bind(null, taskID, false))\n  own(trigger, [result])\n  targets.set(taskID, result)\n  priorities.set(taskID, 'low')\n  return result\n}\nconst executionEndMark = createNode({\n  node: [\n    step.run({fn: () => {}}),\n    step.filter({\n      fn() {\n        if (importantTasks.size === 0 && tasks.size === 0) return false\n        if (now() - startTime >= TASK_DEADLINE) return false\n        cancelRaf(rafID)\n        bonusTime = true\n        isBatched = false\n        return true\n      },\n    }),\n  ],\n  child: [executeTasks],\n})\nexecuteTasks.watch(() => {\n  if (isBatched) return\n  if (importantTasks.size === 0 && tasks.size === 0) {\n    bonusTime = false\n    return\n  }\n  let interrupted = false\n  if (!bonusTime) {\n    startTime = now()\n  }\n  bonusTime = false\n  beginMark('plan')\n  for (const [id, data] of importantTasks) {\n    if (now() - startTime >= TASK_DEADLINE) {\n      batchWindow()\n      interrupted = true\n      break\n    }\n    importantTasks.delete(id)\n    launch({\n      target: targets.get(id)!,\n      params: data,\n      defer: true,\n    })\n  }\n  if (!interrupted) {\n    for (const [id, data] of tasks) {\n      if (now() - startTime >= TASK_DEADLINE) {\n        batchWindow()\n        interrupted = true\n        break\n      }\n      tasks.delete(id)\n      launch({\n        target: targets.get(id)!,\n        params: data,\n        defer: true,\n      })\n    }\n  }\n  launch({\n    target: executionEndMark,\n    params: null,\n    defer: true,\n  })\n  endMark('plan')\n})\nconst unwrapDone = step.compute({\n  fn: ({done}) => done,\n})\nconst unwrapFail = step.compute({\n  fn: ({fail}) => fail,\n})\nconst dropEmptyList = step.filter({\n  fn: list => list.length > 0,\n})\nconst pushBatchList = step.compute({\n  fn(values, {taskID}) {\n    watchBatchEvent(taskID, true, values)\n  },\n})\nconst pushSingleValue = step.compute({\n  fn(value, {taskID, flat}) {\n    watchBatchEvent(taskID, flat, value)\n  },\n})\nconst runBatchFn = step.run({\n  fn(values, {fn}) {\n    return fn(values, startTime)\n  },\n})\n\n//@ts-ignore\nexport function backpressureEvent<T, S>(\n  trigger: Event<T> | Store<T>,\n  fn: (\n    values: T[],\n    start: number,\n  ) => {\n    done: S[]\n    fail: T[]\n  },\n): Event<S[]>\nexport function backpressureEvent<T, S>(\n  trigger: Event<T[]> | Store<T[]>,\n  fn: (\n    values: T[],\n    start: number,\n  ) => {\n    done: S[]\n    fail: T[]\n  },\n  flat: boolean,\n  priority: Priority,\n): Event<S[]>\nexport function backpressureEvent(\n  trigger,\n  fn,\n  flat: boolean = false,\n  priority: Priority = 'low',\n) {\n  const taskID = ++nextTaskID\n  const result = createEvent()\n  const unit = eventify(trigger)\n  const family = {\n    type: 'crosslink',\n    owners: [unit, result],\n  }\n  createNode({\n    node: [pushSingleValue],\n    //@ts-ignore\n    parent: [unit],\n    scope: {taskID, flat},\n    family,\n  })\n\n  own(trigger, [result])\n  targets.set(\n    taskID,\n    createNode({\n      node: [runBatchFn],\n      child: [\n        createNode({\n          node: [unwrapFail, dropEmptyList, pushBatchList],\n          scope: {taskID},\n          //@ts-ignore\n          family,\n        }),\n        createNode({\n          node: [unwrapDone, dropEmptyList],\n          child: [result],\n          //@ts-ignore\n          family,\n        }),\n      ],\n      scope: {fn},\n      //@ts-ignore\n      family,\n    }),\n  )\n\n  priorities.set(taskID, priority)\n  return result\n}\nconst toArray = step.compute({\n  fn: e => [e],\n})\ntype Time = number\ntype QueuedItem<T> = {\n  inserted: Time\n  retry: number\n  value: T\n}\nexport function dynamicQueueFlat<T, R = null>({\n  trigger = createEvent(),\n  fn,\n  priority = 'low',\n  timeout = Infinity,\n  batchWindow = 0,\n  retries = Infinity,\n  mark = trigger.shortName,\n}: {\n  trigger?: Event<T>\n  fn: ((item: T) => R | undefined) | ((item: T) => void)\n  priority?: Priority\n  timeout?: number\n  batchWindow?: number\n  retries?: number\n  mark?: string\n}): {\n  trigger: Event<T>\n  processed: Event<R[]>\n  connect: (source: Event<T> | Store<T>) => void\n} {\n  const prepared = trigger.map(value => [\n    {\n      inserted: now(),\n      retry: 0,\n      value,\n    } as QueuedItem<T>,\n  ])\n  const processed = backpressureEvent(\n    prepared,\n    (list, start) => {\n      let interrupted = false\n      let i\n      const done = [] as R[]\n      const batched = [] as Array<QueuedItem<T>>\n      beginMark(mark)\n      for (i = 0; i < list.length; i++) {\n        const item = list[i]\n        const timeNow = now()\n        if (item.inserted + batchWindow > timeNow) {\n          batched.push(item)\n          continue\n        }\n        if (item.inserted + timeout < timeNow) continue\n        if (timeNow - start >= TASK_DEADLINE) {\n          interrupted = true\n          break\n        }\n        const result = fn(item.value)\n        if (result === undefined) continue\n        //@ts-ignore\n        done.push(result)\n      }\n      if (interrupted) {\n        for (let j = i; j < list.length; j++) {\n          const item = list[j]\n          item.retry += 1\n          if (item.retry >= retries) continue\n          batched.push(item)\n        }\n      }\n      endMark(mark)\n      return {done, fail: batched}\n    },\n    true,\n    priority,\n  )\n  const connect = (source: Store<T> | Event<T>) => {\n    createNode({\n      node: [],\n      //@ts-ignore\n      parent: source,\n      //@ts-ignore\n      child: trigger,\n      //@ts-ignore\n      family: {\n        type: 'crosslink',\n        owners: [source, trigger],\n      },\n    })\n  }\n  return {\n    trigger,\n    processed,\n    connect,\n  }\n}\nexport function dynamicQueue<T, S, R>({\n  trigger = createEvent(),\n  fn,\n  priority = 'low',\n  timeout = Infinity,\n  batchWindow = 0,\n  retries = Infinity,\n  mark = trigger.shortName,\n  flatten,\n}: {\n  trigger?: Event<T[]>\n  fn: (item: S) => R | undefined\n  priority?: Priority\n  timeout?: number\n  batchWindow?: number\n  retries?: number\n  mark?: string\n  flatten: (item: T) => S[]\n}) {\n  const prepared = trigger.map(items => {\n    const result = [] as Array<QueuedItem<S>>\n    const inserted = now()\n    for (let i = 0; i < items.length; i++) {\n      const block = flatten(items[i])\n      for (let j = 0; j < block.length; j++) {\n        result.push({\n          inserted,\n          retry: 0,\n          value: block[j],\n        })\n      }\n    }\n    return result\n  })\n  const processed = backpressureEvent(\n    prepared,\n    (list, start) => {\n      let interrupted = false\n      let i\n      const done = [] as R[]\n      const batched = [] as Array<QueuedItem<S>>\n      beginMark(mark)\n      for (i = 0; i < list.length; i++) {\n        const item = list[i]\n        const timeNow = now()\n        if (item.inserted + batchWindow > timeNow) {\n          batched.push(item)\n          continue\n        }\n        if (item.inserted + timeout < timeNow) continue\n        if (timeNow - start >= TASK_DEADLINE) {\n          interrupted = true\n          break\n        }\n        const result = fn(item.value)\n        if (result === undefined) continue\n        done.push(result)\n      }\n      if (interrupted) {\n        for (let j = i; j < list.length; j++) {\n          const item = list[j]\n          item.retry += 1\n          if (item.retry >= retries) continue\n          batched.push(item)\n        }\n      }\n      endMark(mark)\n      return {done, fail: batched}\n    },\n    true,\n    priority,\n  )\n  const connect = (source: Store<T> | Event<T>) => {\n    createNode({\n      node: [toArray],\n      //@ts-ignore\n      parent: source,\n      //@ts-ignore\n      child: trigger,\n      //@ts-ignore\n      family: {\n        type: 'crosslink',\n        owners: [source, trigger],\n      },\n    })\n  }\n  return {\n    trigger,\n    processed,\n    connect,\n  }\n}\n\nfunction eventify<T>(source: Store<T> | Event<T>): Event<T> {\n  return is.store(source) ? source.updates : source\n}\n","export const USE_PERF = false\n\nexport const TASK_DEADLINE = 10\n","import {is, createNode, step, launch} from 'effector'\nimport {Signal} from './index.h'\nimport {createWatch} from './createWatch'\nimport {dynamicQueueFlat} from '../batch'\n\nfunction noDebounceRaf<T>(signal: Signal, source: any, cb: (data: T) => any) {\n  createWatch(signal, source.watch(cb))\n}\n\nconst toDomOp = step.run({\n  fn: (data, {handler}) => ({data, handler}),\n})\nexport function debounceRaf<T>(\n  signal: Signal,\n  source: any,\n  cb: (data: T) => any,\n) {\n  createNode({\n    node: [toDomOp],\n    //@ts-ignore\n    parent: source,\n    child: [domOp],\n    //@ts-ignore\n    family: {\n      type: 'crosslink',\n      owners: signal,\n    },\n    scope: {handler: cb},\n    meta: {op: 'debounceRaf'},\n  })\n  if (is.store(source)) {\n    //@ts-ignore\n    launch(domOp, {data: source.getState(), handler: cb}, true)\n  }\n}\n\nconst {trigger: domOp} = dynamicQueueFlat<{\n  data: any\n  handler: (data: any) => void\n}>({\n  priority: 'high',\n  mark: 'domOperation',\n  fn({handler, data}) {\n    handler(data)\n  },\n})\n\nexport function domOperation(\n  immediate: boolean,\n  signal: Signal,\n  data: any,\n  handler: (data: any) => void,\n) {\n  if (is.unit(data)) {\n    ;(immediate ? noDebounceRaf : debounceRaf)(signal, data, handler)\n  } else {\n    handler(data)\n  }\n}\n","import {Stack} from './index.h'\n\nfunction findLastVisibleNode(\n  stack: Stack,\n  fromIndex: number = stack.child.length - 1,\n): Stack | null {\n  for (let i = fromIndex; i >= 0; i--) {\n    const item = stack.child[i]\n    switch (item.node.type) {\n      case 'element':\n      case 'using':\n        if (!item.visible) continue\n        return item\n    }\n    const visibleChild = findLastVisibleNode(item)\n    if (visibleChild) return visibleChild\n  }\n  return null\n}\nexport function findNearestVisibleNode(stack: Stack) {\n  if (!stack.parent) return null\n  switch (stack.parent.node.type) {\n    case 'element':\n    case 'using': {\n      const found = findLastVisibleNode(\n        stack.parent,\n        stack.parent.child.indexOf(stack) - 1,\n      )\n      if (found) return found\n      break\n    }\n    case 'list':\n    case 'listItem': {\n      let child = stack\n      let target: Stack | null = stack.parent\n      while (target) {\n        const found = findLastVisibleNode(\n          target,\n          target.child.indexOf(child) - 1,\n        )\n        if (found) return found\n        child = target\n        target = target.parent\n      }\n      break\n    }\n  }\n  return null\n}\n","import {is, Store, Event, combine} from 'effector'\nimport {debounceRaf, domOperation} from './renderer'\n\nimport {\n  PropertyMap,\n  TransformMap,\n  StoreOrData,\n  StylePropertyMap,\n  Signal,\n  DOMElement,\n  HandlerRecord,\n  DOMProperty,\n  Stack,\n} from './index.h'\nimport {activeStack} from './stack'\nimport {createWatch} from './createWatch'\nimport {document} from './documentResolver'\nimport {findNearestVisibleNode} from './nearestNode'\n\nfunction isFalse(val) {\n  return (\n    val !== '' &&\n    val !== 0 &&\n    (val === false || val === undefined || val === null)\n  )\n}\nconst finalizeHandler = (\n  element: DOMElement,\n  {map, options}: HandlerRecord,\n) => {\n  for (const key in map) {\n    element.removeEventListener(key, map[key], options)\n  }\n}\nexport function bindHandler(\n  element: DOMElement,\n  signal: Signal,\n  handlers: HandlerRecord[],\n) {\n  for (let i = 0; i < handlers.length; i++) {\n    const {options, map} = handlers[i]\n    for (const key in map) {\n      element.addEventListener(key, map[key], options)\n    }\n    createWatch(signal, finalizeHandler.bind(null, element, handlers[i]))\n  }\n}\nfunction applyData(dataset, field, value) {\n  if (isFalse(value)) {\n    delete dataset[field]\n  } else {\n    dataset[field] = `${value}`\n  }\n}\n\nexport function bindData(\n  element: DOMElement,\n  signal: Signal,\n  dataset: PropertyMap,\n) {\n  for (const field in dataset) {\n    domOperation(\n      false,\n      signal,\n      dataset[field],\n      applyData.bind(null, element.dataset, field),\n    )\n  }\n}\n\nfunction applyVisible(\n  node: DOMElement,\n  parent: DOMElement,\n  stack: Stack,\n  visible: boolean,\n) {\n  stack.visible = visible\n  if (visible) {\n    if (!parent.contains(node)) {\n      const nearestVisible = findNearestVisibleNode(stack)\n      if (nearestVisible && parent.contains(nearestVisible.targetElement)) {\n        nearestVisible.targetElement.after(node)\n      } else {\n        parent.appendChild(node)\n      }\n    }\n  } else {\n    node.remove()\n  }\n}\n\nexport function bindVisible(\n  element: DOMElement,\n  signal: Signal,\n  visible: Store<boolean> | null,\n) {\n  if (visible === null) return\n  const parent = activeStack.get().parent!.targetElement\n  debounceRaf(\n    signal,\n    visible,\n    applyVisible.bind(null, element, parent, activeStack.get()),\n  )\n}\nconst applyStyleProp = (style: CSSStyleDeclaration, propName, value) => {\n  if (isFalse(value)) {\n    delete style[propName]\n  } else {\n    style[propName] = value\n  }\n}\nconst applyStyleVal = (style: CSSStyleDeclaration, variableName, value) => {\n  if (isFalse(value)) {\n    style.removeProperty(variableName)\n  } else {\n    style.setProperty(variableName, value)\n  }\n}\nexport function bindStyleProp(\n  element: DOMElement,\n  signal: Signal,\n  map: StylePropertyMap,\n) {\n  const style = element.style\n  for (const propName in map) {\n    domOperation(\n      false,\n      signal,\n      map[propName],\n      applyStyleProp.bind(null, style, propName),\n    )\n  }\n}\nexport function bindStyleVar(\n  element: DOMElement,\n  signal: Signal,\n  map: PropertyMap,\n) {\n  const style = element.style\n  for (const propName in map) {\n    domOperation(\n      false,\n      signal,\n      map[propName],\n      applyStyleVal.bind(null, style, `--${propName}`),\n    )\n  }\n}\n\nfunction applyAttr(element: DOMElement, attr, value) {\n  if (isFalse(value)) {\n    switch (attr) {\n      case 'value':\n        //@ts-ignore\n        delete element.value\n        break\n      case 'checked':\n        //@ts-ignore\n        element.checked = false\n        break\n      case 'spellcheck':\n        if (value === false) {\n          element.setAttribute('spellcheck', 'false')\n          return\n        }\n        break\n    }\n    element.removeAttribute(attr)\n  } else {\n    switch (attr) {\n      case 'value':\n        //@ts-ignore\n        element.value = `${value}`\n        break\n      case 'checked':\n        //@ts-ignore\n        element.checked = `${value}`\n        break\n    }\n    element.setAttribute(attr, `${value}`)\n  }\n}\n\nexport function bindAttr(\n  element: DOMElement,\n  signal: Signal,\n  map: PropertyMap,\n) {\n  for (const attr in map) {\n    domOperation(\n      attr !== 'value' &&\n        attr !== 'checked' &&\n        attr !== 'min' &&\n        attr !== 'max',\n      signal,\n      map[attr],\n      applyAttr.bind(null, element, attr),\n    )\n  }\n}\nconst xShape = (y: number, x: number) => ({x, y})\nconst yShape = (x: number, y: number) => ({x, y})\nfunction normalizeTranslateShape(\n  data:\n    | Store<{x?: number; y?: number}>\n    | {x?: StoreOrData<number>; y?: StoreOrData<number>},\n): StoreOrData<{\n  x?: number\n  y?: number\n}> {\n  if (is.store(data)) return data\n  if (is.store(data.x)) {\n    if (is.store(data.y)) return combine({x: data.x, y: data.y})\n    return data.x.map(xShape.bind(null, data.y))\n  }\n  if (is.store(data.y)) return data.y.map(yShape.bind(null, data.x))\n  return data as any\n}\n\nfunction applyTransform<T>(\n  svg: SVGSVGElement,\n  signal: Signal,\n  transformList: SVGTransformList,\n  data: StoreOrData<T>,\n  handler: (transform: SVGTransform, data: T) => void,\n  key: keyof typeof transformResolvers,\n) {\n  const transform = svg.createSVGTransform()\n  switch (key) {\n    case 'translate':\n    case 'scale':\n      data = normalizeTranslateShape(data) as any\n      break\n  }\n  domOperation(false, signal, data, handler.bind(null, transform))\n  transformList.appendItem(transform)\n}\nconst transformResolvers = {\n  translate(transform: SVGTransform, {x = 0, y = 0}: {x?: number; y?: number}) {\n    transform.setTranslate(x, y)\n  },\n  scale(transform: SVGTransform, {x = 0, y = 0}: {x?: number; y?: number}) {\n    transform.setScale(x, y)\n  },\n  rotate(\n    transform: SVGTransform,\n    data:\n      | number\n      | {\n          angle?: number\n          x?: number\n          y?: number\n        },\n  ) {\n    if (typeof data === 'number') {\n      transform.setRotate(data, 0, 0)\n    } else {\n      transform.setRotate(data.angle || 0, data.x || 0, data.y || 0)\n    }\n  },\n  skewX(transform: SVGTransform, angle: number) {\n    transform.setSkewX(angle)\n  },\n  skewY(transform: SVGTransform, angle: number) {\n    transform.setSkewY(angle)\n  },\n}\nexport function bindTransform(\n  element: DOMElement,\n  signal: Signal,\n  operationsSeq: Partial<TransformMap>[],\n) {\n  const stack = activeStack.get()\n  if (stack.namespace !== 'svg') return\n  if (operationsSeq.length === 0) return\n  //@ts-ignore\n  const transformList: SVGTransformList = element.transform.baseVal\n  const svg = stack.svgRoot\n  for (let i = 0; i < operationsSeq.length; i++) {\n    const operations = operationsSeq[i]\n    for (const key in operations) {\n      applyTransform(\n        svg!,\n        signal,\n        transformList,\n        operations[key],\n        transformResolvers[key],\n        key as any,\n      )\n    }\n  }\n}\nfunction setText(node, text) {\n  const textNode = document.createTextNode(`${text}`)\n  const firstChild = node.firstChild\n  if (firstChild) {\n    firstChild.replaceWith(textNode)\n  } else {\n    node.appendChild(textNode)\n  }\n}\n\nexport function bindText(\n  element: DOMElement,\n  signal: Signal,\n  store: StoreOrData<DOMProperty>,\n) {\n  if (store === null) return\n  if (is.unit(store)) {\n    debounceRaf(signal, store, setText.bind(null, element))\n  } else {\n    setText(element, store)\n  }\n}\nfunction setFocus(element: DOMElement) {\n  element.focus()\n}\nexport function bindFocus(\n  element: DOMElement,\n  signal: Signal,\n  events: Event<any>[],\n) {\n  for (let i = 0; i < events.length; i++) {\n    domOperation(true, signal, events[i], setFocus.bind(null, element))\n  }\n}\nfunction setBlur(element: DOMElement) {\n  element.blur()\n}\nexport function bindBlur(\n  element: DOMElement,\n  signal: Signal,\n  events: Event<any>[],\n) {\n  for (let i = 0; i < events.length; i++) {\n    domOperation(true, signal, events[i], setBlur.bind(null, element))\n  }\n}\n","import {Store, Event, withRegion} from 'effector'\n\nimport {\n  DOMElement,\n  Stack,\n  ElementDraft,\n  MergedBindings,\n  NSType,\n  PropertyMap,\n  TransformMap,\n  StoreOrData,\n  DOMProperty,\n  StylePropertyMap,\n  Signal,\n} from './index.h'\nimport {nodeStack, activeStack} from './stack'\nimport {appendBatch, forwardStacks} from './using'\nimport {createSignal} from './createSignal'\nimport {\n  bindAttr,\n  bindData,\n  bindHandler,\n  bindStyleProp,\n  bindStyleVar,\n  bindTransform,\n  bindText,\n  bindVisible,\n  bindFocus,\n  bindBlur,\n} from './bindings'\nimport {document} from './documentResolver'\nimport {spec} from '../h'\n\n//@ts-ignore\nexport function h(tag: string, cb: () => void): DOMElement\nexport function h(\n  tag: string,\n  spec: {\n    attr?: PropertyMap\n    data?: PropertyMap\n    transform?: Partial<TransformMap>\n    text?: StoreOrData<DOMProperty>\n    visible?: Store<boolean>\n    style?: StylePropertyMap\n    styleVar?: PropertyMap\n    focus?: {\n      focus?: Event<any>\n      blur?: Event<any>\n    }\n    handler?: Partial<\n      {[K in keyof HTMLElementEventMap]: Event<HTMLElementEventMap[K]>}\n    >\n  },\n)\nexport function h(\n  tag: string,\n  opts: {type?: 'svg'; noAppend?: boolean},\n  cb?: () => void,\n): DOMElement\nexport function h(tag, opts, cb?: any) {\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  }\n  if (opts === undefined) opts = {}\n  const {noAppend = false} = opts\n  const parent = activeStack.get()\n  const parentNS: NSType = parent ? parent.namespace : 'html'\n  let ns: NSType = parentNS\n  let type = 'html'\n  if ('type' in opts) {\n    type = opts.type\n    ns = opts.type\n  } else {\n    ns = type = parentNS === 'svg' ? 'svg' : 'html'\n  }\n  if (tag === 'svg') {\n    type = 'svg'\n    ns = 'svg'\n  }\n  const node =\n    type === 'svg'\n      ? document.createElementNS('http://www.w3.org/2000/svg', tag)\n      : document.createElement(tag)\n  if (parentNS === 'foreignObject') {\n    node.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml')\n    ns = 'html'\n  } else if (tag === 'svg') {\n    node.setAttribute('xmlns', 'http://www.w3.org/2000/svg')\n    ns = 'svg'\n  } else if (tag === 'foreignObject') {\n    ns = 'foreignObject'\n  }\n  const signal = createSignal()\n  const draft: ElementDraft = {\n    type: 'element',\n    pure: false,\n    tag,\n    attr: [],\n    data: [],\n    visible: [],\n    text: [],\n    styleVar: [],\n    styleProp: [],\n    handler: [],\n    transform: [],\n    focus: [],\n    blur: [],\n  }\n  const currentStack: Stack = {\n    parent: null,\n    signal,\n    namespace: ns,\n    targetElement: node,\n    svgRoot: null,\n    child: [],\n    locality: {\n      sibling: {\n        left: {ref: null},\n        right: {ref: null},\n      },\n      child: {\n        first: {ref: null},\n        last: {ref: null},\n      },\n    },\n    node: draft,\n    mountStatus: 'initial',\n    visible: true,\n  }\n  if (parent) {\n    forwardStacks(parent, currentStack)\n  }\n  if (tag === 'svg') {\n    currentStack.svgRoot = node\n  } else if (parent) {\n    currentStack.svgRoot = parent.svgRoot\n  }\n  activeStack.replace(currentStack)\n  // node.__SIGNAL__ = signal\n  if (cb) {\n    initNode(signal, node, parent, cb)\n  } else {\n    draft.pure = true\n    spec(opts)\n  }\n  const merged = applyNodeDraft()\n  activeStack.replace(parent)\n  currentStack.visible = !merged.visible || merged.visible.getState()\n  if (!noAppend) {\n    if (nodeStack.length > 0) {\n      if (currentStack.visible)\n        nodeStack[nodeStack.length - 1].append.push(node)\n    }\n  }\n}\n\nfunction applyNodeDraft() {\n  const merged = mergeNodeDraft()\n  const stack = activeStack.get()\n  const element = stack.targetElement\n  const signal = stack.signal\n  bindAttr(element, signal, merged.attr)\n  bindData(element, signal, merged.data)\n  bindHandler(element, signal, merged.handler)\n  bindStyleProp(element, signal, merged.styleProp)\n  bindStyleVar(element, signal, merged.styleVar)\n  bindTransform(element, signal, merged.transform)\n  bindText(element, signal, merged.text)\n  bindVisible(element, signal, merged.visible)\n  bindFocus(element, signal, merged.focus)\n  bindBlur(element, signal, merged.blur)\n  return merged\n}\n\nfunction mergeNodeDraft() {\n  const draft = activeStack.getElementNode()\n  const merged: MergedBindings = {\n    attr: {},\n    data: {},\n    visible: null,\n    text: null,\n    styleVar: {},\n    styleProp: {},\n    handler: [],\n    transform: draft.transform,\n    focus: draft.focus,\n    blur: draft.blur,\n  }\n  for (let i = 0; i < draft.handler.length; i++) {\n    const {options, map} = draft.handler[i]\n    options.passive = options.prevent ? false : options.passive\n\n    for (const key in map) {\n      const evt = map[key]\n      map[key] = function(e) {\n        if (options.prevent) e.preventDefault()\n        if (options.stop) e.stopPropagation()\n        evt(e)\n      }\n    }\n    merged.handler.push({options, map})\n  }\n  for (let i = 0; i < draft.attr.length; i++) {\n    const map = draft.attr[i]\n    for (const key in map) {\n      merged.attr[key] = map[key]\n    }\n  }\n  for (let i = 0; i < draft.data.length; i++) {\n    const map = draft.data[i]\n    for (const key in map) {\n      merged.data[key] = map[key]\n    }\n  }\n  if (draft.visible.length > 0) {\n    merged.visible = draft.visible[draft.visible.length - 1]\n  }\n  if (draft.text.length > 0) {\n    merged.text = draft.text[draft.text.length - 1]\n  }\n  for (let i = 0; i < draft.styleVar.length; i++) {\n    const map = draft.styleVar[i]\n    for (const key in map) {\n      merged.styleVar[key] = map[key]\n    }\n  }\n  for (let i = 0; i < draft.styleProp.length; i++) {\n    const map = draft.styleProp[i]\n    for (const key in map) {\n      merged.styleProp[key] = map[key]\n    }\n  }\n  return merged\n}\n\nfunction initNode(\n  signal: Signal,\n  node: DOMElement,\n  parent: Stack,\n  cb: () => void,\n) {\n  let succ = false\n  nodeStack.push({node, append: [], reverse: false})\n  try {\n    withRegion(signal, cb)\n    succ = true\n  } finally {\n    appendBatch(nodeStack.pop()!)\n    if (!succ) {\n      activeStack.replace(parent)\n    }\n  }\n}\n","export function bind<A, R>(cb: (a: A) => R, a: A): (() => R)\nexport function bind<A, B, R>(cb: (a: A, b: B) => R, a: A): ((b: B) => R)\nexport function bind<A, B, C, R>(cb: (a: A, b: B, c: C) => R, a: A): ((b: B, c: C) => R)\nexport function bind<A, B, C, D, R>(cb: (a: A, b: B, c: C, d: D) => R, a: A): ((b: B, c: C, d: D) => R)\nexport function bind(cb: Function, data: any) {\n  return cb.bind(null, data)\n}\n","import {Store} from 'effector'\nimport {activeStack} from './render/stack'\nimport {own} from './own'\nimport {bind} from './render/bind'\n\nexport function remap<T extends {[field: string]: any}, S extends keyof T>(\n  store: Store<T>,\n  key: S,\n): Store<T[S]>\nexport function remap<\n  T extends {[field: string]: any},\n  S extends {[field: number]: keyof T} | {[field: string]: keyof T}\n>(\n  store: Store<T>,\n  shape: S,\n): {[K in keyof S]: S[K] extends keyof T ? Store<T[S[K]]> : never}\n\nexport function remap(\n  store: Store<any>,\n  shape: string | Array<any> | {[field: string]: any},\n) {\n  const stack = activeStack.get()\n  if (Array.isArray(shape)) {\n    const result = [] as any\n    for (let i = 0; i < shape.length; i++) {\n      result[i] = store.map(bind(readField, shape[i]))\n    }\n    if (stack) {\n      own(stack.signal, result)\n    }\n    return result\n  }\n  if (typeof shape === 'object' && shape !== null) {\n    const owned = [] as any[]\n    const result = {} as any\n    for (const key in shape) {\n      result[key] = store.map(bind(readField as any, shape[key]))\n      owned.push(result[key])\n    }\n    if (stack) {\n      own(stack.signal, owned)\n    }\n    return result\n  }\n  const result = store.map(bind(readField as any, shape))\n  if (stack) {\n    own(stack.signal, result)\n  }\n  return result\n}\n\nexport function storeField<T extends {[field: string]: any}, K extends keyof T>(\n  store: Store<T>,\n  key: K,\n): Store<T[K]> {\n  const result = store.map(bind(readField, key))\n  const stack = activeStack.get()\n  if (stack) {\n    own(stack.signal, [result])\n  }\n  return result\n}\n\nfunction readField<T extends {[field: string]: any}, K extends keyof T>(\n  key: K,\n  value: T,\n) {\n  return value[key]\n}\n","import {\n  Store,\n  createStore,\n  createEvent,\n  is,\n  launch,\n  sample,\n  withRegion,\n} from 'effector'\nimport {Signal, DOMElement, Stack, ListItemType} from './index.h'\nimport {own} from '../own'\nimport {beginMark, endMark} from './mark'\nimport {nodeStack, activeStack} from './stack'\nimport {forwardStacks} from './using'\nimport {createSignal} from './createSignal'\nimport {createWatch} from './createWatch'\nimport {dynamicQueue, dynamicQueueFlat} from '../batch'\nimport {bind} from './bind'\nimport {remap} from '../storeField'\nimport {setRightSibling, setLeftSibling, makeSiblings} from './locality'\nimport {findNearestVisibleNode} from './nearestNode'\nimport {document} from './documentResolver'\n\ntype ListContext = {\n  parentNode: DOMElement\n  cb: (opts: any) => void\n  shortName: string\n  reverse: boolean\n  parentStack: Stack\n  getID: (item: any, i: number) => string | number | symbol\n  fields: string[] | null\n}\n\nexport function tree<T, K extends keyof T, C extends keyof T>(\n  {\n    key,\n    child,\n    source,\n  }: {\n    key: T[K] extends string | number | symbol ? K : never\n    child: T[C] extends T[] ? C : never\n    source: Store<T[]>\n  },\n  cb: (\n    opts: {store: Store<T>; key: T[K]; signal: Signal},\n    child: () => void,\n  ) => void,\n) {\n  list({source, key}, ({store, key: currentKey, signal}) => {\n    const childList = remap(store, child)\n    cb({store, key: currentKey, signal}, () => {\n      //@ts-ignore\n      tree({key, child, source: childList as Store<T[]>}, cb)\n    })\n  })\n}\n\nexport function list<T>(\n  source: Store<T[]>,\n  cb: (opts: {store: Store<T>; index: number; signal: Signal}) => void,\n): void\nexport function list<\n  T,\n  K extends keyof T,\n  Query extends [keyof T] | ReadonlyArray<keyof T> | (keyof T)[]\n>(\n  opts: {\n    key: T[K] extends string | number ? K : never\n    source: Store<T[]>\n    fields: Query\n  },\n  cb: (opts: {\n    store: Store<T>\n    fields: {\n      [K in keyof Query]: Query[K] extends keyof T ? Store<T[Query[K]]> : never\n    }\n    key: T[K]\n    signal: Signal\n  }) => void,\n): void\nexport function list<T, K extends keyof T>(\n  {\n    key,\n    source,\n    reverse,\n  }: {\n    key: T[K] extends string | number | symbol ? K : never\n    source: Store<T[]>\n    reverse?: boolean\n  },\n  cb: (opts: {store: Store<T>; key: T[K]; signal: Signal}) => void,\n): void\nexport function list<T, K extends keyof T>(\n  {\n    key,\n    source,\n    reverse,\n    fields,\n  }: {\n    key: T[K] extends string | number | symbol ? K : never\n    source: Store<T[]>\n    reverse?: boolean\n    fields?: string[]\n  },\n  cb: (opts: {store: Store<T>; key: T[K]; signal: Signal}) => void,\n): void\nexport function list<T>(opts, cb: (opts: any) => void) {\n  let source\n  let reverse = false\n  let getID: (item: T, i: number) => string | number | symbol\n  if (is.store(opts)) {\n    getID = indexIDGetter\n    source = opts\n  } else {\n    const key = opts.key\n    getID = bind(keyIDGetter, key)\n    source = opts.source\n    reverse = !!opts.reverse\n  }\n  const parentStack = activeStack.get()\n\n  const parentSignal = createSignal()\n  const currentStack: Stack = {\n    parent: parentStack,\n    signal: parentSignal,\n    namespace: parentStack.namespace,\n    targetElement: parentStack.targetElement,\n    svgRoot: parentStack.svgRoot,\n    child: [],\n    locality: {\n      sibling: {\n        left: {ref: null},\n        right: {ref: null},\n      },\n      child: {\n        first: {ref: null},\n        last: {ref: null},\n      },\n    },\n    node: {\n      type: 'list',\n      pure: false,\n      reverse,\n      key: is.store(opts) ? {type: 'index'} : {type: 'key', key: opts.key},\n      store: source,\n      cb,\n    },\n    mountStatus: 'initial',\n    visible: true,\n  }\n  // parentSignal.scope.stack = currentStack\n  forwardStacks(parentStack, currentStack)\n  activeStack.replace(currentStack)\n\n  const context: ListContext = {\n    parentNode: parentStack.targetElement,\n    cb,\n    shortName: source.shortName,\n    reverse,\n    parentStack: currentStack,\n    getID,\n    fields: opts.fields ? opts.fields : null,\n  }\n\n  const updates = createStore(update(context, [], source.getState()))\n  own(parentSignal, [updates])\n\n  createWatch(parentSignal, bind(clearParentSignal, updates))\n  sample({\n    source: updates,\n    clock: source,\n    fn: bind(update, context),\n    target: updates,\n  })\n  activeStack.replace(parentStack)\n}\n\nfunction update<T>(context: ListContext, records: Stack[], input: T[]) {\n  beginMark('list update [' + context.shortName + ']')\n  const skipNode: boolean[] = Array(input.length).fill(false)\n  const keys = input.map(context.getID)\n  const newRecords: Stack[] = []\n  const resultRecords: Stack[] = []\n  const removedRecords: Stack[] = []\n  for (let i = 0; i < records.length; i++) {\n    const stack = records[i]\n    const record = stack.node as ListItemType\n    const index = keys.indexOf(record.key)\n    if (index !== -1) {\n      resultRecords.push(stack)\n      skipNode[index] = true\n      if (record.store.getState() !== input[index])\n        //@ts-ignore\n        launch(record.store, input[index], true)\n    } else {\n      removedRecords.push(stack)\n    }\n  }\n  if (removedRecords.length > 0) {\n    for (let i = 0; i < removedRecords.length; i++) {\n      const item = removedRecords[i]\n      const {node, locality} = item\n      ;(node as ListItemType).active = false\n      //@ts-ignore\n      ;(node as ListItemType).store = null\n      const left = locality.sibling.left.ref\n      const right = locality.sibling.right.ref\n      makeSiblings(left, right)\n      setRightSibling(item, null)\n      setLeftSibling(item, null)\n    }\n    //@ts-ignore\n    launch(removeNodesFromDOM, removedRecords, true)\n  }\n  let lastItem: Stack | null =\n    resultRecords.length > 0 ? resultRecords[resultRecords.length - 1] : null\n  for (let i = 0; i < input.length; i++) {\n    if (skipNode[i]) continue\n    const item = input[i]\n    const store = createStore(item)\n    const signal = createSignal()\n    const fields = context.fields ? remap(store, context.fields as any[]) : null\n    own(signal, [store])\n    const id = context.getID(item, i)\n    const stack: Stack = {\n      parent: context.parentStack,\n      signal,\n      namespace: context.parentStack.namespace,\n      targetElement: context.parentStack.targetElement,\n      svgRoot: context.parentStack.svgRoot,\n      child: [],\n      locality: {\n        sibling: {\n          left: {ref: null},\n          right: {ref: null},\n        },\n        child: {\n          first: {ref: null},\n          last: {ref: null},\n        },\n      },\n      node: {\n        type: 'listItem',\n        pure: false,\n        key: id as any,\n        index: id as any,\n        store,\n        signal,\n        active: true,\n        nodes: [],\n        fields,\n        visible: [],\n      },\n      mountStatus: 'initial',\n      visible: true,\n    }\n    makeSiblings(lastItem, stack)\n    lastItem = stack\n    forwardStacks(context.parentStack, stack)\n    newRecords.push(stack)\n    resultRecords.push(stack)\n  }\n  if (newRecords.length > 0) {\n    //@ts-ignore\n    launch(applyNewRecordsEvent, {context, list: newRecords}, true)\n  }\n  endMark('list update [' + context.shortName + ']')\n  return resultRecords\n}\ntype AppendElements = {\n  node: DOMElement\n  append: Array<{\n    listItemStack: Stack\n    listItem: ListItemType\n    appended: DOMElement[]\n  }>\n  reverse: boolean\n}\n\nconst {trigger: appendBatchEvent} = dynamicQueueFlat<AppendElements>({\n  mark: 'append DOM nodes',\n  fn: function appendDOMNode(block) {\n    for (let i = 0; i < block.append.length; i++) {\n      const child = block.append[i]\n      if (child.listItem.active === false) continue\n      if (child.appended.length === 0) continue\n      const frag = document.createDocumentFragment()\n      if (!block.reverse) {\n        for (let j = 0; j < child.appended.length; j++) {\n          frag.appendChild(child.appended[j])\n        }\n      } else {\n        for (let j = child.appended.length - 1; j >= 0; j--) {\n          frag.appendChild(child.appended[j])\n        }\n      }\n      insertElement(child.listItemStack, frag, block.reverse, block.node)\n    }\n  },\n})\n\nfunction insertElement(\n  stack: Stack,\n  element: Node,\n  reverse: boolean,\n  parent: DOMElement,\n) {\n  const nearestVisible = findNearestVisibleNode(stack)\n  if (nearestVisible && parent.contains(nearestVisible.targetElement)) {\n    if (reverse) {\n      nearestVisible.targetElement.before(element)\n    } else {\n      nearestVisible.targetElement.after(element)\n    }\n  } else {\n    parent.appendChild(element)\n  }\n}\n\ntype AddRecords = {\n  context: ListContext\n  list: Stack[]\n}\n\nconst {trigger: applyNewRecordsEvent} = dynamicQueueFlat<AddRecords>({\n  mark: 'addRecords',\n  fn: function addRecords({context, list}) {\n    const {shortName, parentStack, parentNode, cb, reverse} = context\n    beginMark('initRecord ' + shortName)\n    const currentActiveStack = activeStack.get()\n    activeStack.replace(parentStack)\n\n    const nodes = [] as {\n      listItemStack: Stack\n      listItem: ListItemType\n      appended: DOMElement[]\n    }[]\n    const appended = [] as DOMElement[]\n    nodeStack.push({\n      node: parentNode,\n      append: appended,\n      reverse,\n    })\n    for (let j = 0; j < list.length; j++) {\n      const stack: Stack = list[j]\n      const item = stack.node as ListItemType\n      if (!item.active) continue\n      activeStack.replace(stack)\n      withRegion(stack.signal, bind(cb, item))\n      for (let k = 0; k < appended.length; k++) {\n        item.nodes.push(appended[k])\n      }\n      if (item.visible.length > 0) {\n        withRegion(stack.signal, () => {\n          const visible = item.visible[item.visible.length - 1]\n          visible.updates.watch(visible => {\n            if (item.active === false) return\n            if (visible) {\n              const frag = document.createDocumentFragment()\n              if (!reverse) {\n                for (let j = 0; j < item.nodes.length; j++) {\n                  frag.appendChild(item.nodes[j])\n                }\n              } else {\n                for (let j = item.nodes.length - 1; j >= 0; j--) {\n                  frag.appendChild(item.nodes[j])\n                }\n              }\n              insertElement(stack, frag, reverse, parentNode)\n            } else {\n              for (let i = 0; i < item.nodes.length; i++) {\n                item.nodes[i].remove()\n              }\n            }\n          })\n          if (visible.getState()) {\n            nodes.push({\n              listItemStack: stack,\n              appended: appended.slice(),\n              listItem: item,\n            })\n          }\n        })\n      } else {\n        nodes.push({\n          listItemStack: stack,\n          appended: appended.slice(),\n          listItem: item,\n        })\n      }\n      appended.length = 0\n    }\n    nodeStack.pop()\n    if (nodes.length > 0) {\n      launch({\n        target: appendBatchEvent,\n        params: {\n          node: parentNode,\n          append: nodes,\n          reverse,\n        },\n        defer: true,\n      })\n    }\n    activeStack.replace(currentActiveStack)\n    endMark('initRecord ' + shortName)\n  },\n})\n\nconst indexIDGetter = (item, i) => i\nconst keyIDGetter = (key, item, i) => item[key]\n\nconst removeNodesFromDOM = createEvent<Stack[]>()\n\ndynamicQueue<Stack, Signal, any>({\n  trigger: removeNodesFromDOM,\n  priority: 'high',\n  mark: 'runSignals',\n  flatten: ({signal}) => [signal],\n  fn: function launchSignal(signal) {\n    if (!signal.scope) return\n    //@ts-ignore\n    launch(signal, null, false)\n  },\n})\n\ndynamicQueue<Stack, DOMElement, DOMElement>({\n  trigger: removeNodesFromDOM,\n  priority: 'high',\n  mark: 'remove DOM nodes',\n  flatten({node}) {\n    const {nodes} = node as ListItemType\n    return nodes\n  },\n  fn: function removeDOMNode(item) {\n    item.remove()\n    return item\n  },\n})\n\nconst clearParentSignal = (updates: Store<Stack[]>) => {\n  const allRecords = updates.getState()\n  for (let i = 0; i < allRecords.length; i++) {\n    const listItem = allRecords[i].node as ListItemType\n    listItem.active = false\n    //@ts-ignore\n    listItem.store = null\n  }\n  //@ts-ignore\n  launch(removeNodesFromDOM, allRecords, true)\n}\n","import {Store, Event, createNode} from 'effector'\n\nimport {\n  PropertyMap,\n  TransformMap,\n  StoreOrData,\n  StylePropertyMap,\n  DOMProperty,\n  DOMElement,\n} from './render/index.h'\nimport {activeStack} from './render/stack'\nimport {own} from './own'\n\nexport {using} from './render/using'\nexport {h} from './render/h'\n// export {Signal} from './render/index.h'\nexport {list, tree} from './render/list'\n\nexport function explicitUnmount(unmountOn: Event<any>) {\n  const stack = activeStack.get()\n  if (stack) {\n    createNode({\n      node: [],\n      //@ts-ignore\n      parent: unmountOn,\n      //@ts-ignore\n      child: stack.signal,\n      //@ts-ignore\n      family: {\n        type: 'crosslink',\n        owners: [stack.signal, unmountOn],\n      },\n    })\n  }\n}\n\nexport function signalOwn<T>(value: T): T {\n  const stack = activeStack.get()\n  if (stack) {\n    own(stack.signal, [value])\n  }\n  return value\n}\n\nfunction assertElementNode(extensionName: string) {\n  const stack = activeStack.get()\n  if (stack.node.type !== 'element' && stack.node.type !== 'using') {\n    throw Error(\n      `\"${extensionName}\" extension can be used only with element nodes, got \"${stack.node.type}\"`,\n    )\n  }\n}\n\nexport function nodeMethod<K extends keyof DOMElement>(\n  method: K,\n): DOMElement[K] extends Function ? DOMElement[K] : never\nexport function nodeMethod<T extends DOMElement, K extends keyof T>(\n  method: K,\n): T[K] extends Function ? T[K] : never\nexport function nodeMethod<K extends keyof DOMElement>(\n  method: K,\n): DOMElement[K] extends Function ? DOMElement[K] : never {\n  let item: DOMElement\n  node(e => {\n    item = e\n  })\n  return ((...args) => {\n    if (!item) {\n      // throw Error('node not mounted yet')\n      return\n    }\n    return item[method](...args)\n  }) as any\n}\n\nexport function node(fn: (node: DOMElement) => void) {\n  const stack = activeStack.get()\n  //@ts-ignore\n  if (!stack.targetElement.__STATIC__) {\n    fn(stack.targetElement)\n  }\n}\nexport type Specification = {\n  attr?: PropertyMap\n  data?: PropertyMap\n  transform?: Partial<TransformMap>\n  text?: StoreOrData<DOMProperty>\n  visible?: Store<boolean>\n  style?: {\n    prop?: StylePropertyMap\n    val?: PropertyMap\n  }\n  focus?: {\n    focus?: Event<any>\n    blur?: Event<any>\n  }\n  handler?: Partial<\n    {[K in keyof HTMLElementEventMap]: Event<HTMLElementEventMap[K]>}\n  >\n}\nexport function spec(spec: {\n  attr?: PropertyMap\n  data?: PropertyMap\n  transform?: Partial<TransformMap>\n  text?: StoreOrData<DOMProperty>\n  visible?: Store<boolean>\n  style?: StylePropertyMap\n  styleVar?: PropertyMap\n  focus?: {\n    focus?: Event<any>\n    blur?: Event<any>\n  }\n  handler?: Partial<\n    {[K in keyof HTMLElementEventMap]: Event<HTMLElementEventMap[K]>}\n  >\n}) {\n  if (spec.attr) attr(spec.attr)\n  if (spec.data) data(spec.data)\n  if (spec.transform) transform(spec.transform)\n  //@ts-ignore\n  if ('text' in spec) text(spec.text)\n  //@ts-ignore\n  if ('visible' in spec) visible(spec.visible)\n  if (spec.style || spec.styleVar)\n    style({\n      prop: spec.style,\n      val: spec.styleVar,\n    })\n  if (spec.focus) focus(spec.focus)\n  if (spec.handler) handler(spec.handler)\n}\n\nexport function attr(map: PropertyMap) {\n  assertElementNode('attr')\n  activeStack.getElementNode().attr.push(map)\n}\nexport function data(dataset: PropertyMap) {\n  assertElementNode('data')\n  activeStack.getElementNode().data.push(dataset)\n}\nexport function transform(operations: Partial<TransformMap>) {\n  assertElementNode('transform')\n  activeStack.getElementNode().transform.push(operations)\n}\nexport function text(store: StoreOrData<DOMProperty>) {\n  assertElementNode('text')\n  activeStack.getElementNode().text.push(store)\n}\nexport function visible(visible: Store<boolean>) {\n  const stack = activeStack.get()\n  if (\n    stack.node.type !== 'element' &&\n    stack.node.type !== 'using' &&\n    stack.node.type !== 'listItem'\n  ) {\n    throw Error(\n      `\"visible\" extension can be used only with element or listItem nodes, got \"${stack.node.type}\"`,\n    )\n  }\n  activeStack.getElementNode().visible.push(visible)\n}\n\nexport function style({\n  prop,\n  val,\n}: {\n  prop?: StylePropertyMap\n  val?: PropertyMap\n}) {\n  assertElementNode('style')\n  if (prop) {\n    activeStack.getElementNode().styleProp.push(prop)\n  }\n  if (val) {\n    activeStack.getElementNode().styleVar.push(val)\n  }\n}\n\nexport function handler(\n  map: Partial<\n    {[K in keyof HTMLElementEventMap]: Event<HTMLElementEventMap[K]>}\n  >,\n): void\nexport function handler(\n  options: {passive?: boolean; capture?: boolean},\n  map: Partial<\n    {[K in keyof HTMLElementEventMap]: Event<HTMLElementEventMap[K]>}\n  >,\n): void\nexport function handler(options, map?: any) {\n  assertElementNode('handler')\n  if (map === undefined) {\n    map = options\n    options = {}\n  }\n  const {\n    passive = true,\n    capture = false,\n    prevent = false,\n    stop = false,\n  } = options\n  activeStack.getElementNode().handler.push({\n    options: {passive, capture, prevent, stop},\n    map,\n  })\n}\n\nexport function focus({focus, blur}: {focus?: Event<any>; blur?: Event<any>}) {\n  assertElementNode('focus')\n  const node = activeStack.getElementNode()\n  if (focus) node.focus.push(focus)\n  if (blur) node.blur.push(blur)\n}\n","import {combine as originalCombine, Store} from 'effector'\nimport {signalOwn} from './h'\n\ntype Tuple<T = unknown> = [T] | T[]\ntype Combinable = {[key: string]: Store<any>} | Tuple<Store<any>>\ntype GetCombinedValue<T> = {\n  [K in keyof T]: T[K] extends Store<infer U> ? U : never\n}\n\nexport function map<T, S>(\n  store: Store<T>,\n  {fn}: {fn: (value: T) => S},\n): Store<S> {\n  console.error('separate map method is deprecated, use store.map as usual')\n  return signalOwn(store.map(fn))\n}\n\nexport function combine<A extends Combinable, B>({\n  source,\n  fn,\n}: {\n  source: A\n  fn(source: GetCombinedValue<A>): B\n}): Store<B> {\n  console.error('separate combine method is deprecated, use common combine method as usual')\n  return signalOwn(originalCombine(source, fn))\n}\n","import {Store, createStore, combine} from 'effector'\nimport {list} from './render/list'\nimport {spec} from './h'\n\nexport function variant<State extends {[key: string]: any}>(\n  key: Store<keyof State>,\n  cases: Partial<{[K in keyof State]: () => void}>,\n) {\n  const caseList = createStore(\n    Object.entries(cases).map(([key, val]) => ({key, val: val!})),\n  )\n  list(\n    {source: caseList, key: 'key', fields: ['key', 'val']},\n    ({fields: [field, val]}) => {\n      spec({\n        visible: combine(field, key, (field, key) => field === key),\n      })\n      val.getState()()\n    },\n  )\n}\n","import {StackRecord, Stack, BindingsDraft} from './index.h'\n\nexport const nodeStack: StackRecord[] = []\n\nlet currentActiveStack: Stack\n\nexport const activeStack = {\n  get: () => currentActiveStack,\n  replace(stack: Stack) {\n    currentActiveStack = stack\n  },\n  getElementNode: () => currentActiveStack.node as BindingsDraft\n}\n","import * as customDocument from './document'\nexport const domDocument = typeof document !== 'undefined' ? document : null\nexport {customDocument}\nlet doc = domDocument!\nexport {doc as document}\nexport const useCustomDocument = () => {\n  //@ts-ignore\n  doc = customDocument\n}\n\nexport const useDOMDocument = () => {\n  //@ts-ignore\n  doc = domDocument\n}\n","import {USE_PERF} from '../env'\n\nexport let beginMark: (label: string) => void\nexport let endMark: (label: string) => void\nif (USE_PERF && typeof performance !== 'undefined' && performance.mark) {\n  beginMark = label => {\n    performance.mark('☄️ ' + label + ' start')\n  }\n  endMark = label => {\n    try {\n      performance.measure('☄️ ' + label, '☄️ ' + label + ' start')\n    } catch (err) {} // Clear marks immediately to avoid growing buffer.\n\n    performance.clearMarks('☄️ ' + label + ' start')\n    performance.clearMeasures('☄️ ' + label)\n  }\n} else {\n  beginMark = label => {}\n  endMark = label => {}\n}\n","export let now: () => number\n\nif (typeof performance !== 'undefined' && performance.now) {\n  now = () => performance.now()\n} else if (typeof process !== 'undefined' && process.hrtime) {\n  now = () => {\n    const hr = process.hrtime()\n    return (hr[0] * 1e9 + hr[1]) / 1e6\n  }\n} else {\n  now = () => Date.now()\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n",null,"//@flow\n\nimport type {Graph, Graphite, Cmd, StateRef} from './stdlib/index.h'\n\nimport {getGraph, getOwners, getLinks} from './stdlib/getter'\nconst arrifyNodes = (list: Graphite | Graphite[] = []): Graph[] => {\n  const result = []\n  if (Array.isArray(list)) {\n    for (let i = 0; i < list.length; i++) {\n      if (Array.isArray(list[i])) result.push(...list[i])\n      else result.push(list[i])\n    }\n  } else {\n    result.push(list)\n  }\n  return result.map(getGraph)\n}\nexport const addToReg = ({hasRef, type, data}, reg) => {\n  let store\n  if (hasRef) {\n    store = data.store\n    reg[store.id] = store\n  }\n  if (type === 'mov' && data.to === 'store') {\n    store = data.target\n    reg[store.id] = store\n  }\n}\nexport function createNode({\n  node = [],\n  from,\n  source,\n  parent = from || source,\n  to,\n  target,\n  child = to || target,\n  scope = {},\n  meta = {},\n  family: familyRaw = {type: 'regular'},\n}: {\n  +node?: Array<Cmd | false | void | null>,\n  +from?: Graphite | Graphite[],\n  +source?: Graphite | Graphite[],\n  +parent?: Graphite | Graphite[],\n  +to?: Graphite | Graphite[],\n  +target?: Graphite | Graphite[],\n  +child?: Graphite | Graphite[],\n  scope?: {[name: string]: any, ...},\n  meta?: {[name: string]: any, ...},\n  family?: {\n    type?: 'regular' | 'crosslink' | 'domain',\n    links?: Graphite | Graphite[],\n    owners?: Graphite | Graphite[],\n    ...\n  },\n  ...\n}): Graph {\n  const sources = arrifyNodes(parent)\n  const links = arrifyNodes(familyRaw.links)\n  const owners = arrifyNodes(familyRaw.owners)\n  const seq: Cmd[] = []\n  const reg: {[id: string]: StateRef} = {}\n  for (let i = 0; i < node.length; i++) {\n    const item = node[i]\n    if (!item) continue\n    seq.push(item)\n    addToReg(item, reg)\n  }\n  const result: Graph = {\n    seq,\n    next: arrifyNodes(child),\n    meta,\n    scope,\n    family: {\n      type: familyRaw.type || 'crosslink',\n      links,\n      owners,\n    },\n    reg,\n  }\n  for (let i = 0; i < links.length; i++) {\n    getOwners(links[i]).push(result)\n  }\n  for (let i = 0; i < owners.length; i++) {\n    getLinks(owners[i]).push(result)\n  }\n  for (let i = 0; i < sources.length; i++) {\n    sources[i].next.push(result)\n  }\n  return result\n}\n","//@flow\n\nimport type {Store, Event, Effect, Domain} from './unit.h'\nimport {is} from './is'\n\nexport const joinName = (unit: any, tag: string) => '' + unit.shortName + tag\n\nexport const mapName = (unit: any, name: ?string) =>\n  name == null ? joinName(unit, ' → *') : name\n\nexport function unitObjectName(\n  objOrArr:\n    | $ReadOnlyArray<\n        Store<any> | Event<any> | Effect<any, any, any> | any | null,\n      >\n    | {\n        [key: string]:\n          | Store<any>\n          | Event<any>\n          | Effect<any, any, any>\n          | any\n          | null,\n        ...,\n      },\n  method: string = 'combine',\n) {\n  let name = method + '('\n  let comma = ''\n  let i = 0\n  //$todo\n  for (const key in objOrArr) {\n    //$todo\n    const unit = objOrArr[key]\n    if (unit != null) {\n      name += comma\n      //$todo\n      name += is.unit(unit) ? unit.compositeName.fullName : unit.toString()\n    }\n    i += 1\n    /* inlined max object names constant */\n    if (i === 25) break\n    comma = ', '\n  }\n  name += ')'\n  return name\n}\n\nexport function setStoreName<State>(store: Store<State>, rawName: string) {\n  const compositeName = createName(rawName, store.parent)\n  store.shortName = rawName\n  if (!store.compositeName) {\n    store.compositeName = compositeName\n    return\n  }\n  //$todo\n  store.compositeName.path = compositeName.path\n  //$todo\n  store.compositeName.shortName = compositeName.shortName\n  //$todo\n  store.compositeName.fullName = compositeName.fullName\n}\n\nexport type CompositeName = {\n  shortName: string,\n  fullName: string,\n  path: string[],\n}\n\nexport function createName(name: string, parent?: Domain): CompositeName {\n  let path\n  let fullName\n  let composite\n  const shortName = name\n  if (!parent) {\n    if (name.length === 0) {\n      path = ([]: string[])\n    } else {\n      path = [name]\n    }\n    fullName = name\n  } else {\n    composite = parent.compositeName\n    if (name.length === 0) {\n      path = composite.path\n      fullName = composite.fullName\n    } else {\n      path = composite.path.concat([name])\n      if (composite.fullName.length === 0) {\n        fullName = name\n      } else {\n        fullName = '' + composite.fullName + '/' + name\n      }\n    }\n  }\n  return {shortName, fullName, path}\n}\n","//@flow\n\nimport {own} from './stdlib'\n\nexport const addToRegion = unit => {\n  if (regionStack) own(regionStack.value, [unit])\n  return unit\n}\n\nlet regionStack = null\n\nexport function withRegion(unit: any, cb: () => void) {\n  regionStack = {\n    parent: regionStack,\n    value: unit,\n  }\n  try {\n    return cb()\n  } finally {\n    regionStack = regionStack.parent\n  }\n}\n","//@flow\n\nimport $$observable from 'symbol-observable'\n\nimport {is} from './is'\nimport type {Store, Event, Effect} from './unit.h'\n\nimport {\n  own,\n  step,\n  createStateRef,\n  readRef,\n  bind,\n  getGraph,\n  nextUnitID,\n  callStackAReg,\n  callARegStack,\n  callStack,\n} from './stdlib'\nimport {createNode} from './createNode'\nimport {launch} from './kernel'\n\nimport type {Subscription, Subscriber} from './index.h'\nimport {\n  normalizeConfig,\n  type EventConfigPart,\n  type StoreConfigPart as ConfigPart,\n  type Config,\n} from './config'\nimport {type CompositeName, createName, mapName, joinName} from './naming'\nimport {createLinkNode} from './forward'\nimport {watchUnit} from './watch'\nimport {createSubscription} from './subscription'\nimport {addToRegion} from './region'\n\nexport const applyParentEventHook = ({parent}, target) => {\n  if (parent) parent.hooks.event(target)\n}\n\nlet isStrict\nexport const initUnit = (kind, unit, rawConfigA, rawConfigB) => {\n  const config = normalizeConfig({\n    name: rawConfigB,\n    config: rawConfigA,\n  })\n  const id = nextUnitID()\n  const {parent = null, sid = null, strict = true, named = null} = config\n  const name = named ? named : config.name || (kind === 'domain' ? '' : id)\n  const compositeName = createName(name, parent)\n  unit.kind = kind\n  unit.id = id\n  unit.sid = sid\n  unit.shortName = name\n  unit.parent = parent\n  unit.compositeName = compositeName\n  unit.defaultConfig = config\n  unit.thru = bind(thru, unit)\n  unit.getType = () => compositeName.fullName\n  isStrict = strict\n  return {unit: kind, name, sid, named}\n}\nexport const createNamedEvent = (named: string) => createEvent({named})\n\nconst createComputation = (from, to, op, fn) =>\n  createLinkNode(from, to, {\n    scope: {fn},\n    node: [step.compute({fn: callStack})],\n    meta: {op},\n  })\n\nconst createEventFiltration = (event, op, fn, node) => {\n  const mapped = createEvent(joinName(event, ' →? *'))\n  createLinkNode(event, mapped, {\n    scope: {fn},\n    node,\n    meta: {op},\n  })\n  return mapped\n}\n\ndeclare export function createEvent<Payload>(\n  name?: string | EventConfigPart,\n  config?: Config<EventConfigPart>,\n): Event<Payload>\nexport function createEvent<Payload>(\n  nameOrConfig: any,\n  maybeConfig: any,\n): Event<Payload> {\n  const event: any = (payload: Payload, ...args: any[]) =>\n    event.create(payload, args, args)\n  event.graphite = createNode({\n    meta: initUnit('event', event, maybeConfig, nameOrConfig),\n  })\n  //eslint-disable-next-line no-unused-vars\n  event.create = (payload, _, args) => {\n    launch(event, payload)\n    return payload\n  }\n  event.watch = bind(watchUnit, event)\n  event.map = (fn: Function) => {\n    let config\n    let name\n    if (typeof fn === 'object') {\n      config = fn\n      name = fn.name\n      fn = fn.fn\n    }\n    const mapped = createEvent(mapName(event, name), config)\n    createComputation(event, mapped, 'map', fn)\n    return mapped\n  }\n  event.filter = fn => {\n    if (typeof fn === 'function') {\n      console.error('.filter(fn) is deprecated, use .filterMap instead')\n      return filterMapEvent(event, fn)\n    }\n    return createEventFiltration(event, 'filter', fn.fn, [\n      step.filter({fn: callStack}),\n    ])\n  }\n  event.filterMap = bind(filterMapEvent, event)\n  event.prepend = fn => {\n    const contramapped: Event<any> = createEvent('* → ' + event.shortName, {\n      parent: event.parent,\n    })\n    createComputation(contramapped, event, 'prepend', fn)\n    applyParentEventHook(event, contramapped)\n    return contramapped\n  }\n  event.subscribe = observer =>\n    watchUnit(event, payload => observer.next(payload))\n  event[$$observable] = () => event\n  return addToRegion(event)\n}\n\nfunction filterMapEvent(\n  event: Event<any> | Effect<any, any, any>,\n  fn: any => any | void,\n): any {\n  return createEventFiltration(event, 'filterMap', fn, [\n    step.compute({fn: callStack}),\n    step.check.defined(),\n  ])\n}\n\nexport function createStore<State>(\n  currentState: State,\n  props: {\n    +config: ConfigPart,\n    +parent?: CompositeName,\n    ...\n  },\n): Store<State> {\n  const plainState = createStateRef(currentState)\n  const oldState = createStateRef(currentState)\n  const updates = createNamedEvent('updates')\n  const store: any = {\n    subscribers: new Map(),\n    updates,\n    defaultState: currentState,\n    stateRef: plainState,\n    getState: bind(readRef, plainState),\n    setState(state) {\n      launch({\n        target: store,\n        params: state,\n        defer: true,\n      })\n    },\n  }\n  store.graphite = createNode({\n    scope: {state: plainState},\n    node: [\n      step.check.defined(),\n      step.update({\n        store: plainState,\n      }),\n      step.check.changed({\n        store: oldState,\n      }),\n      step.update({\n        store: oldState,\n      }),\n    ],\n    child: updates,\n    meta: initUnit('store', store, props),\n  })\n  if (isStrict && currentState === undefined)\n    throw Error(\"current state can't be undefined, use null instead\")\n\n  store.watch = store.subscribe = bind(watch, store)\n  store.reset = (...units) => {\n    for (const unit of units) store.on(unit, () => store.defaultState)\n    return store\n  }\n  store.on = (event, fn) => {\n    store.off(event)\n    store.subscribers.set(\n      event,\n      createSubscription(updateStore(event, store, 'on', true, fn)),\n    )\n    return store\n  }\n  store.off = bind(off, store)\n  store.map = (fn, firstState?: any) => {\n    let config\n    let name\n    if (typeof fn === 'object') {\n      config = fn\n      name = fn.name\n      firstState = fn.firstState\n      fn = fn.fn\n    }\n    let lastResult\n    const storeState = store.getState()\n    if (storeState !== undefined) {\n      lastResult = fn(storeState, firstState)\n    }\n\n    const innerStore: Store<any> = createStore(lastResult, {\n      name: mapName(store, name),\n      config,\n      strict: false,\n    })\n    updateStore(store, innerStore, 'map', false, fn)\n    return innerStore\n  }\n  store[$$observable] = () => ({\n    subscribe(observer: Subscriber<any>) {\n      if (observer !== Object(observer))\n        throw Error('expect observer to be an object') // or function\n      return watch(store, state => {\n        if (observer.next) {\n          observer.next(state)\n        }\n      })\n    },\n    [$$observable]() {\n      return this\n    },\n  })\n  own(store, [updates])\n  return addToRegion(store)\n}\n\nfunction off(store: Store<any>, event: Event<any>) {\n  const currentSubscription = store.subscribers.get(event)\n  if (currentSubscription !== undefined) {\n    currentSubscription()\n    store.subscribers.delete(event)\n  }\n  return store\n}\n\nconst updateStore = (\n  from,\n  {graphite, stateRef}: Store<any>,\n  op,\n  stateFirst: boolean,\n  fn: Function,\n) =>\n  createLinkNode(from, graphite, {\n    scope: {fn},\n    node: [\n      step.mov({store: stateRef, to: 'a'}),\n      step.compute({\n        fn: stateFirst ? callARegStack : callStackAReg,\n      }),\n      step.check.defined(),\n      step.check.changed({store: stateRef}),\n      step.update({store: stateRef}),\n    ],\n    meta: {op},\n  })\n\nfunction watch(\n  storeInstance: Store<any>,\n  eventOrFn: Event<*> | Function,\n  fn?: Function,\n) {\n  if (!fn || !is.unit(eventOrFn)) {\n    if (typeof eventOrFn !== 'function')\n      throw Error('watch requires function handler')\n    eventOrFn(storeInstance.getState())\n    return watchUnit(storeInstance, eventOrFn)\n  }\n  if (typeof fn !== 'function')\n    throw Error('second argument should be a function')\n  return eventOrFn.watch(payload => fn(storeInstance.getState(), payload))\n}\n\nconst thru = (instance: any, fn: Function) => fn(instance)\n","//@flow\n\nimport type {Store} from './unit.h'\nimport {createStore} from './createUnit'\nimport {step, createStateRef, getStoreState, type StateRef} from './stdlib'\nimport {is} from './is'\nimport {unitObjectName} from './naming'\nimport {createLinkNode} from './forward'\n\n//eslint-disable-next-line no-unused-vars\ndeclare export function combine<State: $ReadOnlyArray<Store<any> | any>>(\n  obj: State,\n): Store<\n  $TupleMap<\n    State,\n    //prettier-ignore\n    <S>(field: Store<S> | S) => S,\n  >,\n>\ndeclare export function combine<State: {-[key: string]: Store<any> | any, ...}>(\n  obj: State,\n): Store<\n  $ObjMap<\n    State,\n    //prettier-ignore\n    <S>(field: Store<S> | S) => S,\n  >,\n>\ndeclare export function combine<R>(fn: () => R): Store<R>\ndeclare export function combine<A, R>(a: Store<A>, fn: (a: A) => R): Store<R>\ndeclare export function combine<A, B, R>(\n  a: Store<A>,\n  b: Store<B>,\n  fn: (a: A, b: B) => R,\n): Store<R>\ndeclare export function combine<A, B, C, R>(\n  a: Store<A>,\n  b: Store<B>,\n  c: Store<C>,\n  fn: (a: A, b: B, c: C) => R,\n): Store<R>\ndeclare export function combine<A, B, C, D, R>(\n  a: Store<A>,\n  b: Store<B>,\n  c: Store<C>,\n  d: Store<D>,\n  fn: (a: A, b: B, c: C, d: D) => R,\n): Store<R>\ndeclare export function combine<A, B, C, D, E, R>(\n  a: Store<A>,\n  b: Store<B>,\n  c: Store<C>,\n  d: Store<D>,\n  e: Store<E>,\n  fn: (a: A, b: B, c: C, d: D, e: E) => R,\n): Store<R>\ndeclare export function combine<A, B, C, D, E, F, R>(\n  a: Store<A>,\n  b: Store<B>,\n  c: Store<C>,\n  d: Store<D>,\n  e: Store<E>,\n  f: Store<F>,\n  fn: (a: A, b: B, c: C, d: D, e: E, f: F) => R,\n): Store<R>\ndeclare export function combine<A, B, C, D, E, F, G, R>(\n  a: Store<A>,\n  b: Store<B>,\n  c: Store<C>,\n  d: Store<D>,\n  e: Store<E>,\n  f: Store<F>,\n  g: Store<G>,\n  fn: (a: A, b: B, c: C, d: D, e: E, f: F, g: G) => R,\n): Store<R>\ndeclare export function combine<A, B, C, D, E, F, G, H, R>(\n  a: Store<A>,\n  b: Store<B>,\n  c: Store<C>,\n  d: Store<D>,\n  e: Store<E>,\n  f: Store<F>,\n  g: Store<G>,\n  h: Store<H>,\n  fn: (a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H) => R,\n): Store<R>\ndeclare export function combine<A, B, C, D, E, F, G, H, I, R>(\n  a: Store<A>,\n  b: Store<B>,\n  c: Store<C>,\n  d: Store<D>,\n  e: Store<E>,\n  f: Store<F>,\n  g: Store<G>,\n  h: Store<H>,\n  i: Store<I>,\n  fn: (a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I) => R,\n): Store<R>\ndeclare export function combine<A, B, C, D, E, F, G, H, I, J, R>(\n  a: Store<A>,\n  b: Store<B>,\n  c: Store<C>,\n  d: Store<D>,\n  e: Store<E>,\n  f: Store<F>,\n  g: Store<G>,\n  h: Store<H>,\n  i: Store<I>,\n  j: Store<J>,\n  fn: (a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J) => R,\n): Store<R>\ndeclare export function combine<A, B, C, D, E, F, G, H, I, J, K, R>(\n  a: Store<A>,\n  b: Store<B>,\n  c: Store<C>,\n  d: Store<D>,\n  e: Store<E>,\n  f: Store<F>,\n  g: Store<G>,\n  h: Store<H>,\n  i: Store<I>,\n  j: Store<J>,\n  k: Store<K>,\n  fn: (a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K) => R,\n): Store<R>\n\nexport function combine(...args: Array<Store<any>>): Store<any> {\n  if (args.length === 0) throw Error('at least one argument required')\n  let handler\n  let stores\n  let config\n  if ('ɔ' in args[0]) {\n    config = args[0].config\n    args = args[0].ɔ\n  }\n  {\n    const rawHandler = args[args.length - 1]\n    if (typeof rawHandler === 'function') {\n      stores = args.slice(0, -1)\n      handler = rawHandler\n    } else {\n      stores = args\n    }\n  }\n\n  let structStoreShape\n  let shapeReady\n  if (stores.length === 1) {\n    const obj = stores[0]\n    /*\n      without edge case combine(Color, (Color) => '~')\n      */\n    if (!is.store(obj)) {\n      /*\n      case combine([R,G,B], ([R,G,B]) => '~')\n      case combine({R,G,B}, ({R,G,B}) => '~')\n\n      edge case combine([Color], ([Color]) => '~')\n      edge case combine({Color}, ({Color}) => '~')\n\n      edge case combine([R,G,B])\n      edge case combine({R,G,B})\n\n      edge case combine([Color])\n      edge case combine({Color})\n      */\n      structStoreShape = obj\n      shapeReady = true\n    }\n  }\n  if (!shapeReady) {\n    /*\n    case combine(R,G,B, (R,G,B) => '~')\n    */\n    structStoreShape = stores\n    /*\n    without edge case combine(R,G,B)\n    without edge case combine(Color)\n    */\n    if (handler) {\n      handler = spreadArgs(handler)\n    }\n  }\n  //$off\n  const mergedStore = Array.isArray(structStoreShape)\n    ? storeCombination(\n      structStoreShape,\n      list => list.slice(),\n      [],\n      config,\n      handler,\n    )\n    : storeCombination(\n      structStoreShape,\n      obj => Object.assign({}, obj),\n      {},\n      config,\n      handler,\n    )\n  return mergedStore\n}\n\nconst spreadArgs = fn => list => fn(...list)\n\ntype CombinationScope = {\n  key: any,\n  target: StateRef,\n  clone(value: any): any,\n  isFresh: StateRef,\n  ...\n}\n\nconst storeCombination = (\n  obj: any,\n  clone: Function,\n  defaultState: any,\n  config?: string,\n  fn?: Function,\n) => {\n  const stateNew = clone(defaultState)\n  const store = createStore(stateNew, {\n    name: config ? config : unitObjectName(obj),\n  })\n  const target = createStateRef(stateNew)\n  const isFresh = createStateRef(true)\n  const node = [\n    step.check.defined(),\n    step.mov({\n      store: target,\n      to: 'a',\n    }),\n    //prettier-ignore\n    step.filter({\n      fn: (upd, {key}, {a}) => upd !== a[key],\n    }),\n    step.mov({\n      store: isFresh,\n      to: 'b',\n    }),\n    step.compute({\n      fn(upd, {clone, key}: CombinationScope, reg) {\n        if (reg.b) {\n          reg.a = clone(reg.a)\n        }\n        reg.a[key] = upd\n      },\n    }),\n    step.mov({\n      from: 'a',\n      target,\n    }),\n    step.mov({\n      from: 'value',\n      store: false,\n      target: isFresh,\n    }),\n    step.barrier({priority: 'barrier'}),\n    step.mov({\n      from: 'value',\n      store: true,\n      target: isFresh,\n    }),\n    step.mov({store: target}),\n    fn && step.compute({fn}),\n    step.check.changed({\n      store: getStoreState(store),\n    }),\n  ]\n\n  for (const key in obj) {\n    const child = obj[key]\n    if (!is.store(child)) {\n      stateNew[key] = defaultState[key] = child\n      continue\n    }\n    defaultState[key] = child.defaultState\n    stateNew[key] = child.getState()\n    createLinkNode(child, store, {\n      scope: {key, clone},\n      node,\n      meta: {op: 'combine'},\n    })\n  }\n\n  store.defaultShape = obj\n  store.defaultState = fn\n    ? (getStoreState(store).current = fn(stateNew))\n    : defaultState\n  return store\n}\n","//@flow\nimport {combine} from './combine'\nimport {\n  type Graphite,\n  step,\n  createStateRef,\n  readRef,\n  own,\n  callStackAReg,\n  callARegStack,\n  getStoreState,\n} from './stdlib'\nimport {is} from './is'\nimport {createStore} from './createUnit'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {createNode} from './createNode'\nimport {addToRegion} from './region'\n\nexport const shapeToStore = shape => (is.unit(shape) ? shape : combine(shape))\n\nexport function sample(...args): any {\n  let target\n  let name\n  let metadata\n  if ('ɔ' in args[0]) {\n    metadata = args[0].config\n    args = args[0].ɔ\n  }\n  let [source, clock, fn, greedy = false] = args\n\n  //config case\n  if (clock === undefined && 'source' in source) {\n    if ('clock' in source && source.clock == null)\n      throw Error('config.clock should be defined')\n    clock = source.clock\n    fn = source.fn\n    greedy = source.greedy\n    //optional target & name accepted only from config\n    target = source.target\n    name = source.name\n    source = source.source\n  }\n  if (clock === undefined) {\n    //still undefined!\n    clock = source\n  }\n  name = metadata || name || source.shortName\n  source = shapeToStore(source)\n  clock = shapeToStore(clock)\n  if (typeof fn === 'boolean') {\n    greedy = fn\n    fn = null\n  }\n  if (!target) {\n    if (is.store(source) && is.store(clock)) {\n      const initialState = fn\n        ? fn(readRef(getStoreState(source)), readRef(getStoreState(clock)))\n        : readRef(getStoreState(source))\n      target = createStore(initialState, {name})\n    } else {\n      target = createEvent(name)\n    }\n  }\n  if (is.store(source)) {\n    own(source, [\n      addToRegion(\n        createLinkNode(clock, target, {\n          scope: {fn},\n          node: [\n            //$off\n            !greedy && step.barrier({priority: 'sampler'}),\n            step.mov({\n              store: getStoreState(source),\n              to: fn ? 'a' : 'stack',\n            }),\n            fn && step.compute({fn: callARegStack}),\n          ],\n          meta: {op: 'sample', sample: 'store'},\n        }),\n      ),\n    ])\n  } else {\n    const hasSource = createStateRef(false)\n    const sourceState = createStateRef()\n    const clockState = createStateRef()\n    addToRegion(\n      createNode({\n        parent: source,\n        node: [\n          step.update({store: sourceState}),\n          step.mov({\n            from: 'value',\n            store: true,\n            target: hasSource,\n          }),\n        ],\n        family: {\n          owners: [source, target, clock],\n          links: target,\n        },\n        meta: {op: 'sample', sample: 'source'},\n      }),\n    )\n    own(source, [\n      addToRegion(\n        createLinkNode(clock, target, {\n          scope: {fn},\n          node: [\n            step.update({store: clockState}),\n            step.mov({store: hasSource}),\n            step.filter({fn: hasSource => hasSource}),\n            //$off\n            !greedy && step.barrier({priority: 'sampler'}),\n            step.mov({store: sourceState}),\n            step.mov({\n              store: clockState,\n              to: 'a',\n            }),\n            fn && step.compute({fn: callStackAReg}),\n          ],\n          meta: {op: 'sample', sample: 'clock'},\n        }),\n      ),\n    ])\n  }\n  return target\n}\n","//@flow\nimport type {Event} from './unit.h'\nimport {bind} from './stdlib'\nimport {is} from './is'\n\n//eslint-disable-next-line no-unused-vars\ndeclare export function split<\n  S,\n  Obj: {-[name: string]: (payload: S) => boolean, ...},\n>(\n  source: Event<S>,\n  cases: Obj,\n): $ObjMap<Obj, (h: (payload: S) => boolean) => Event<S>>\n\nconst invertCondition = (fn, data) => !fn(data)\n\nexport function split<S>(\n  unit: Event<S>,\n  cases: {[key: string]: (s: S) => boolean, ...},\n): {[key: string]: Event<S>, ...} {\n  const result = {}\n  let current: Event<S> = is.store(unit) ? (unit: any).updates : unit\n  for (const key in cases) {\n    result[key] = current.filter({fn: cases[key]})\n    current = current.filter({\n      fn: bind(invertCondition, cases[key]),\n    })\n  }\n  result.__ = current\n  return result\n}\n","// @flow\n\nimport type {Store, Event, Effect} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {forward} from './forward'\nimport {unitObjectName} from './naming'\n\nexport function merge<T>(\n  events: $ReadOnlyArray<Event<T> | Store<T> | Effect<T, any, any>>,\n): Event<T> {\n  const result = createEvent(unitObjectName(events, 'merge'))\n  forward({\n    from: events,\n    to: result,\n    meta: {op: 'merge'},\n  })\n  return result\n}\n","//@flow\n\nimport $$observable from 'symbol-observable'\nimport type {Event} from './unit.h'\nimport {clearNode} from './clearNode'\nimport {createEvent} from './createUnit'\nimport {bind2} from './stdlib'\n\nexport function fromObservable<T>(observable: mixed): Event<T> {\n  if (observable !== Object(observable))\n    throw Error('expect observable to be an object') // or function\n  const observableItem: any =\n    //$off\n    ($$observable: '@@observable') in observable\n      ? //$off\n      observable[(($$observable: any): '@@observable')]()\n      : observable\n  if (!observableItem.subscribe)\n    throw Error('expect observable to have .subscribe')\n  const event: Event<T> = createEvent()\n  const disposer = bind2(clearNode, event, undefined)\n  observableItem.subscribe({\n    next: event,\n    error: disposer,\n    complete: disposer,\n  })\n  return event\n}\n","//@flow\n\nimport type {Event, Effect} from './unit.h'\nimport {step, own, bind, getGraph} from './stdlib'\nimport {createNode} from './createNode'\nimport {launch} from './kernel'\nimport {createNamedEvent, createStore, createEvent} from './createUnit'\nimport type {EffectConfigPart, Config} from './config'\nimport {createDefer} from './defer'\n\ndeclare export function createEffect<Payload, Done>(\n  name?: string | EffectConfigPart<Payload, Done>,\n  config?: Config<EffectConfigPart<Payload, Done>>,\n): Effect<Payload, Done, *>\nexport function createEffect<Payload, Done>(\n  nameOrConfig: any,\n  maybeConfig: any,\n): Effect<Payload, Done, *> {\n  //$off\n  const instance: Effect<Payload, Done, any> = createEvent(\n    nameOrConfig,\n    maybeConfig,\n  )\n  let handler =\n    instance.defaultConfig.handler ||\n    (value => {\n      console.error(`no handler used in ${instance.getType()}`)\n      return Promise.resolve()\n    })\n\n  getGraph(instance).meta.onCopy = ['runner']\n  getGraph(instance).meta.unit = 'effect'\n  const done: Event<{|\n    params: Payload,\n    result: Done,\n  |}> = createNamedEvent('done')\n  const fail: Event<{|\n    params: Payload,\n    error: *,\n  |}> = createNamedEvent('fail')\n  const anyway: Event<\n    | {|\n        +status: 'done',\n        +params: Payload,\n        +result: Done,\n      |}\n    | {|\n        +status: 'fail',\n        +params: Payload,\n        +error: *,\n      |},\n  > = createNamedEvent('finally')\n\n  instance.done = done\n  instance.fail = fail\n  instance.finally = anyway\n  instance.use = fn => {\n    handler = fn\n    return instance\n  }\n  const getCurrent = () => handler\n  instance.use.getCurrent = getCurrent\n  instance.kind = 'effect'\n  const effectRunner = createNode({\n    scope: {\n      done,\n      fail,\n      anyway,\n      getHandler: getCurrent,\n    },\n    node: [\n      step.run({\n        fn({params, req}, {getHandler, done, fail, anyway}) {\n          runEffect(\n            getHandler(),\n            params,\n            bind(onSettled, {\n              event: done,\n              anyway,\n              params,\n              fn: req.rs,\n              ok: true,\n            }),\n            bind(onSettled, {\n              event: fail,\n              anyway,\n              params,\n              fn: req.rj,\n              ok: false,\n            }),\n          )\n          return params\n        },\n      }),\n    ],\n    meta: {op: 'fx', fx: 'runner', onCopy: ['done', 'fail', 'anyway']},\n  })\n  getGraph(instance).scope.runner = effectRunner\n  getGraph(instance).seq.push(\n    step.compute({\n      fn(params, scope, stack) {\n        // empty stack means that this node was launched directly\n        if (!stack.parent) return params\n        return {\n          params,\n          req: {\n            rs(data) {},\n            rj(data) {},\n          },\n        }\n      },\n    }),\n    step.run({\n      fn(upd, {runner}) {\n        launch({\n          target: runner,\n          params: upd,\n          defer: true,\n        })\n        return upd.params\n      },\n    }),\n  )\n  instance.create = (params: Payload) => {\n    const req = createDefer()\n    launch(instance, {params, req})\n    return req.req\n  }\n\n  const inFlight = createStore(0, {named: 'inFlight'})\n    .on(instance, x => x + 1)\n    .on(done, x => x - 1)\n    .on(fail, x => x - 1)\n\n  const pending = inFlight.map({\n    fn: amount => amount > 0,\n    named: 'pending',\n  })\n  instance.inFlight = inFlight\n  instance.pending = pending\n\n  own(instance, [done, fail, anyway, pending, inFlight, effectRunner])\n  return instance\n}\nconst onSettled = ({event, anyway, params, fn, ok}, data) => {\n  launch({\n    target: [anyway, event, sidechain],\n    params: ok\n      ? [\n        {\n          status: 'done',\n          params,\n          result: data,\n        },\n        {\n          params,\n          result: data,\n        },\n        {\n          fn,\n          value: data,\n        },\n      ]\n      : [\n        {\n          status: 'fail',\n          params,\n          error: data,\n        },\n        {\n          params,\n          error: data,\n        },\n        {\n          fn,\n          value: data,\n        },\n      ],\n    defer: true,\n  })\n}\nconst sidechain = createNode({\n  node: [\n    step.run({\n      fn({fn, value}) {\n        fn(value)\n      },\n    }),\n  ],\n  meta: {op: 'fx', fx: 'sidechain'},\n})\n\nfunction runEffect(handler, params, onResolve, onReject) {\n  let failedSync = false\n  let syncError\n  let rawResult\n  try {\n    rawResult = handler(params)\n  } catch (err) {\n    failedSync = true\n    syncError = err\n  }\n  if (failedSync) {\n    onReject(syncError)\n    return\n  }\n  if (Object(rawResult) === rawResult && typeof rawResult.then === 'function') {\n    rawResult.then(onResolve, onReject)\n    return\n  }\n  onResolve(rawResult)\n}\n","//@flow\n\nexport function createDefer(): {\n  rs: (value: any) => any,\n  rj: (value: any) => any,\n  req: Promise<any>,\n  } {\n  const result = {}\n  result.req = new Promise((rs, rj) => {\n    result.rs = rs\n    result.rj = rj\n  })\n  result.req.catch(err => {})\n  return result\n}\n","//@flow\n\nimport type {Store, Event, Effect, Domain} from './unit.h'\nimport {nextUnitID, own} from './stdlib'\nimport {createNode} from './createNode'\nimport {\n  normalizeConfig,\n  type Config,\n  type EffectConfigPart,\n  type EventConfigPart,\n  type StoreConfigPart,\n  type DomainConfigPart,\n} from './config'\nimport {\n  createEvent,\n  createStore,\n  createNamedEvent,\n  initUnit,\n} from './createUnit'\nimport {createEffect} from './createEffect'\nimport {forward} from './forward'\nimport {addToRegion} from './region'\n\ntype DomainHooks = {|\n  domain: Event<Domain>,\n  effect: Event<Effect<any, any, any>>,\n  event: Event<Event<any>>,\n  store: Event<Store<any>>,\n|}\n\nconst createHook = (trigger: Event<any>, acc: Set<any>, node) => {\n  trigger.watch(data => {\n    own(node, [data])\n    acc.add(data)\n  })\n  own(node, [trigger])\n  return (hook: (data: any) => any) => {\n    acc.forEach(hook)\n    return trigger.watch(hook)\n  }\n}\n\ndeclare export function createDomain(\n  name?: string | DomainConfigPart,\n  config?: Config<DomainConfigPart>,\n): Domain\nexport function createDomain(nameOrConfig: any, maybeConfig: any): Domain {\n  const domains: Set<Domain> = new Set()\n  const stores: Set<Store<any>> = new Set()\n  const effects: Set<Effect<any, any, any>> = new Set()\n  const events: Set<Event<any>> = new Set()\n\n  const history = {\n    domains,\n    stores,\n    effects,\n    events,\n  }\n\n  const node = createNode({\n    family: {type: 'domain'},\n  })\n\n  const result = {\n    history,\n    graphite: node,\n  }\n\n  node.meta = initUnit('domain', result, maybeConfig, nameOrConfig)\n  const event = createNamedEvent('onEvent')\n  const effect = createNamedEvent('onEffect')\n  const store = createNamedEvent('onStore')\n  const domain = createNamedEvent('onDomain')\n\n  const hooks: {|\n    domain: Event<Domain>,\n    effect: Event<Effect<any, any, any>>,\n    event: Event<Event<any>>,\n    store: Event<any>,\n  |} = {\n    event,\n    effect,\n    store,\n    domain,\n  }\n  result.hooks = hooks\n  result.onCreateEvent = createHook(event, events, node)\n  result.onCreateEffect = createHook(effect, effects, node)\n  result.onCreateStore = createHook(store, stores, node)\n  result.onCreateDomain = createHook(domain, domains, node)\n\n  result.createEvent = result.event = <Payload>(\n    name?: string,\n    config?: Config<EventConfigPart>,\n  ): Event<Payload> =>\n      event(\n        createEvent(name, {\n          parent: result,\n          config,\n        }),\n      )\n  result.createEffect = result.effect = <Params, Done, Fail>(\n    name?: string,\n    config?: Config<EffectConfigPart<Params, Done>>,\n  ): Effect<Params, Done, Fail> =>\n      effect(\n        createEffect(name, {\n          parent: result,\n          config,\n        }),\n      )\n  result.createDomain = result.domain = (\n    name?: string,\n    config?: Config<DomainConfigPart>,\n  ) =>\n    createDomain({\n      name,\n      parent: result,\n      config,\n    })\n  result.createStore = result.store = <T>(\n    state: T,\n    config?: Config<StoreConfigPart>,\n  ): Store<T> =>\n      store(\n        createStore(state, {\n          parent: result,\n          config,\n        }),\n      )\n  addToRegion(result)\n  const parent = result.parent\n  if (parent) {\n    for (const key in hooks) {\n      forward({from: hooks[key], to: parent.hooks[key]})\n    }\n    parent.hooks.domain(result)\n  }\n  return result\n}\n","//@flow\nimport type {Store, Event, Effect} from './unit.h'\nimport {createStore} from './createUnit'\nimport {is} from './is'\n\n//eslint-disable-next-line no-unused-vars\ndeclare export function restore<Done>(\n  event: Effect<any, Done, any>,\n  defaultState: Done,\n): Store<Done>\ndeclare export function restore<E>(event: Event<E>, defaultState: E): Store<E>\ndeclare export function restore<State: {-[key: string]: Store<any> | any, ...}>(\n  obj: State,\n): $ObjMap<\n  State,\n  //prettier-ignore\n  <S>(field: Store<S> | S) => Store<S>,\n>\nexport function restore(obj: any, defaultState: any, config?: any): any {\n  if (is.store(obj)) {\n    return obj\n  }\n  if (is.unit(obj)) {\n    const domain = obj.parent\n    let result\n    if (is.event(obj)) {\n      result = createStore(defaultState, {\n        parent: domain,\n        name: obj.shortName,\n        ɔ: config,\n      }).on(obj, (_, v) => v)\n    }\n    if (is.effect(obj)) {\n      result = createStore(defaultState, {\n        parent: domain,\n        name: obj.shortName,\n        ɔ: config,\n      }).on(obj.done, (_, {result}) => result)\n    }\n    if (domain) domain.hooks.store(result)\n    return result\n  }\n  const result = {}\n  for (const key in obj) {\n    const value = obj[key]\n    if (is.store(value)) {\n      result[key] = value\n    } else {\n      result[key] = createStore(value, {name: key})\n    }\n  }\n  return result\n}\n\nexport {\n  restore as restoreEvent,\n  restore as restoreEffect,\n  restore as restoreObject,\n}\n","//@flow\n\nimport type {Store, Event} from './unit.h'\nimport {createEvent, applyParentEventHook} from './createUnit'\n\ndeclare export function createApi<\n  S,\n  Obj: {-[name: string]: (store: S, e: any) => S, ...},\n>(\n  store: Store<S>,\n  setters: Obj,\n): $ObjMap<Obj, <E>(h: (store: S, e: E) => S) => Event<E>>\n\nexport function createApi(\n  store: Store<any>,\n  setters: {[string]: Function, ...},\n) {\n  const result = {}\n  for (const key in setters) {\n    const event = (result[key] = createEvent(key, {parent: store.parent}))\n    store.on(event, setters[key])\n    applyParentEventHook(store, event)\n  }\n  return result\n}\n","//@flow\n\nimport type {Unit} from './stdlib'\nimport {createLinkNode} from './forward'\nimport {sample} from './sample'\nimport {createEvent} from './createUnit'\nimport {combine} from './combine'\nimport {step, callStack} from './stdlib'\nimport {is} from './is'\nimport {createNode} from './createNode'\n\nexport function guard(source: any, config: any) {\n  if (!config) {\n    config = source\n    source = config.source\n  }\n  const {filter, greedy, name = 'guard'} = config\n  const target = config.target || createEvent(name)\n  if (!is.unit(source)) source = combine(source)\n  const meta = {op: 'guard'}\n  if (is.unit(filter)) {\n    sample({\n      source: filter,\n      clock: source,\n      target: createNode({\n        node: [\n          step.filter({\n            fn: ({guard}) => guard,\n          }),\n          step.compute({\n            fn: ({data}) => data,\n          }),\n        ],\n        child: target,\n        meta,\n        family: {\n          owners: [source, filter, target],\n          links: target,\n        },\n      }),\n      fn: (guard, data) => ({guard, data}),\n      greedy,\n      name,\n    })\n  } else {\n    if (typeof filter !== 'function')\n      throw Error('`filter` should be function or unit')\n    createLinkNode(source, target, {\n      scope: {fn: filter},\n      node: [step.filter({fn: callStack})],\n      meta,\n    })\n  }\n  return target\n}\n","//@flow\n\nimport type {kind} from './index.h'\n\nexport const store: kind = 'store'\nexport const event: kind = 'event'\nexport const effect: kind = 'effect'\nexport const domain: kind = 'domain'\n","//@flow\n\nimport type {kind} from './stdlib/index.h'\nimport {\n  store as storeKind,\n  event as eventKind,\n  effect as effectKind,\n  domain as domainKind,\n} from './stdlib/kind'\n\nexport const unit = (obj: mixed) =>\n  (typeof obj === 'function' || (typeof obj === 'object' && obj !== null)) &&\n  //$off\n  'kind' in obj\n\n//$off\nconst is = (type: kind) => (obj: mixed) => unit(obj) && obj.kind === type\n\nexport const store = is(storeKind)\nexport const event = is(eventKind)\nexport const effect = is(effectKind)\nexport const domain = is(domainKind)\n","//@flow\n\nexport const bind = (fn: Function, target: any) => fn.bind(null, target)\nexport const bind2 = (fn: Function, target: any, arg: any) =>\n  fn.bind(null, target, arg)\n","//@flow\n\nconst stringRefcount = (): (() => string) => {\n  let id = 0\n  return () => (++id).toString(36)\n}\n\nexport const nextUnitID = stringRefcount()\nexport const nextStepID = stringRefcount()\n","//@flow\nimport type {\n  StateRef,\n  Run,\n  Tap,\n  Filter,\n  Compute,\n  Barrier,\n  Check,\n  Batch,\n  ID,\n  Graph,\n  Mov,\n} from './index.h'\nimport {nextStepID} from './refcount'\nimport {bind2} from './bind'\n\nconst cmd = (type: any, hasRef: boolean, data: any): any => ({\n  id: nextStepID(),\n  type,\n  data,\n  hasRef,\n})\n\nlet nextBarrierID = 0\n\nexport const barrier: (data: {|\n  +priority?: 'barrier' | 'sampler',\n|}) => Barrier = ({priority = 'barrier'}) =>\n  cmd('barrier', false, {\n    barrierID: ++nextBarrierID,\n    priority,\n  })\nexport const mov: (data: {|\n  from?: 'value' | 'store' | 'stack' | 'a' | 'b',\n  to?: 'stack' | 'a' | 'b',\n  store?: any,\n  target?: any,\n|}) => Mov = ({\n  from = 'store',\n  store,\n  target,\n  to = target ? 'store' : 'stack',\n}) => cmd('mov', from === 'store', {from, store, to, target})\nexport const check: {\n  defined(): Check,\n  changed({store: StateRef}): Check,\n} = {\n  defined: () => cmd('check', false, {type: 'defined'}),\n  changed: ({store}) => cmd('check', true, {type: 'changed', store}),\n}\nexport const compute: (data: {|\n  fn: (data: any, scope: {[string]: any, ...}) => any,\n|}) => Compute = bind2(cmd, 'compute', false)\nexport const filter: (data: {|\n  fn: (data: any, scope: {[string]: any, ...}) => any,\n|}) => Filter = bind2(cmd, 'filter', false)\nexport const run: (data: {|\n  fn: (data: any, scope: {[string]: any, ...}) => any,\n|}) => Run = bind2(cmd, 'run', false)\nexport const update: (data: {|\n  store: StateRef,\n|}) => Mov = ({store}) => mov({from: 'stack', target: store})\n","//@flow\n\nimport type {Graphite, Graph} from './index.h'\n\nexport const getGraph = (graph: Graphite): Graph =>\n  (graph: any).graphite || graph\nexport const getOwners = (node: Graph) => node.family.owners\nexport const getLinks = (node: Graph) => node.family.links\nexport const getStoreState = store => store.stateRef\n","//@flow\n\nimport type {Graphite} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\n\nexport const own = (ownerUnit: Graphite, links: Graphite[]) => {\n  const owner = getGraph(ownerUnit)\n  for (let i = 0; i < links.length; i++) {\n    const link = getGraph(links[i])\n    if (owner.family.type !== 'domain') link.family.type = 'crosslink'\n    getOwners(link).push(owner)\n    getLinks(owner).push(link)\n  }\n}\n","//@flow\nimport type {StateRef} from './index.h'\nimport {nextStepID} from './refcount'\nexport const createStateRef = (current: any): StateRef => ({\n  id: nextStepID(),\n  current,\n})\n\nexport const readRef = ({current}: StateRef | {current: any, ...}) => current\n","//@flow\n\nexport const callStackAReg = (stack, {fn}, {a}) => fn(stack, a)\nexport const callARegStack = (stack, {fn}, {a}) => fn(a, stack)\nexport const callStack = (stack, {fn}) => fn(stack)\n","//@flow\n\nimport type {Graphite, Graph, ID} from './stdlib'\nimport {getGraph, readRef} from './stdlib'\n\n/** Names of priority groups */\ntype PriorityTag = 'child' | 'pure' | 'barrier' | 'sampler' | 'effect'\n\n/**\n * Position in the current branch,\n * including call stack, priority type\n * and index of next step in the executed Graph\n */\ntype Layer = {|\n  /** index of first step */\n  +idx: number,\n  +stack: Stack,\n  +type: PriorityTag,\n  +id: number,\n|}\n\n/** Call stack */\ntype Stack = {\n  value: any,\n  a: any,\n  b: any,\n  parent: Stack | null,\n  node: Graph,\n}\n\n/** Queue as linked list */\ntype QueueItem = {\n  right: QueueItem | null,\n  value: Layer,\n}\ntype QueueBucket = {\n  first: QueueItem | null,\n  last: QueueItem | null,\n  size: number,\n}\n\n/** Queue as skew heap */\ntype Heap = {\n  /** heap node value */\n  v: Layer,\n  /** left heap node */\n  l: Heap | null,\n  /** right heap node */\n  r: Heap | null,\n}\n\n/** Dedicated local metadata */\ntype Local = {\n  skip: boolean,\n  fail: boolean,\n  ref: ID,\n  scope: {[key: string]: any, ...},\n}\n\nlet heap: Heap | null = null\n\nconst merge = (a: Heap | null, b: Heap | null): Heap | null => {\n  if (!a) return b\n  if (!b) return a\n\n  let ret\n  const isSameType = a.v.type === b.v.type\n  if (\n    /**\n     * if both nodes has the same PriorityType\n     * and first node is created after second one\n     */\n    (isSameType && a.v.id > b.v.id) ||\n    /** if first node is \"sampler\" and second node is \"barrier\" */\n    (!isSameType && a.v.type === 'sampler')\n  ) {\n    ret = a\n    a = b\n    b = ret\n  }\n  ret = merge(a.r, b)\n  a.r = a.l\n  a.l = ret\n\n  return a\n}\n\n/** queue buckets for each PriorityType */\nconst queue: QueueBucket[] = []\nlet ix = 0\nwhile (ix < 5) {\n  /**\n   * although \"sampler\" and \"barrier\" are using heap instead of linked list,\n   * their buckets are still useful: they maintains size of heap queue\n   */\n  queue.push({first: null, last: null, size: 0})\n  ix += 1\n}\n\nconst deleteMin = () => {\n  for (let i = 0; i < 5; i++) {\n    const list = queue[i]\n    if (list.size > 0) {\n      /**\n       * second bucket is for \"barrier\" PriorityType (used in combine)\n       * and third bucket is for \"sampler\" PriorityType (used in sample and guard)\n       */\n      if (i === 2 || i === 3) {\n        list.size -= 1\n        const value = heap.v\n        heap = merge(heap.l, heap.r)\n        return value\n      }\n      if (list.size === 1) {\n        list.last = null\n      }\n      const item = list.first\n      list.first = item.right\n      list.size -= 1\n      return item.value\n    }\n  }\n}\nconst pushFirstHeapItem = (\n  type: PriorityTag,\n  node: Graph,\n  parent: Stack | null,\n  value: any,\n) =>\n  pushHeap(\n    0,\n    ({\n      a: null,\n      b: null,\n      node,\n      parent,\n      value,\n    }: Stack),\n    type,\n  )\nconst pushHeap = (idx: number, stack: Stack, type: PriorityTag, id = 0) => {\n  const priority = getPriority(type)\n  const bucket: QueueBucket = queue[priority]\n  const value: Layer = {\n    idx,\n    stack,\n    type,\n    id,\n  }\n  /**\n   * second bucket is for \"barrier\" PriorityType (used in combine)\n   * and third bucket is for \"sampler\" PriorityType (used in sample and guard)\n   */\n  if (priority === 2 || priority === 3) {\n    heap = merge(heap, {v: value, l: 0, r: 0})\n  } else {\n    const item: QueueItem = {\n      right: null,\n      value,\n    }\n    if (bucket.size === 0) {\n      bucket.first = item\n    } else {\n      bucket.last.right = item\n    }\n    bucket.last = item\n  }\n  bucket.size += 1\n}\n\nconst getPriority = (t: PriorityTag) => {\n  switch (t) {\n    case 'child':\n      return 0\n    case 'pure':\n      return 1\n    case 'barrier':\n      return 2\n    case 'sampler':\n      return 3\n    case 'effect':\n      return 4\n    default:\n      return -1\n  }\n}\n\nconst barriers = new Set()\n\nlet alreadyStarted = false\n\n/** main execution method */\nconst exec = () => {\n  const lastStartedState = alreadyStarted\n  alreadyStarted = true\n  const meta = {\n    stop: false,\n  }\n  let graph\n  let value\n  mem: while ((value = deleteMin())) {\n    const {idx, stack, type} = value\n    graph = stack.node\n    const local: Local = {\n      skip: false,\n      fail: false,\n      ref: '',\n      scope: graph.scope,\n    }\n    for (let stepn = idx; stepn < graph.seq.length && !meta.stop; stepn++) {\n      const step = graph.seq[stepn]\n      const data = step.data\n      switch (step.type) {\n        case 'barrier': {\n          const id = data.barrierID\n          const priority = data.priority\n          if (stepn !== idx || type !== priority) {\n            if (!barriers.has(id)) {\n              barriers.add(id)\n              pushHeap(stepn, stack, priority, id)\n            }\n            continue mem\n          }\n          barriers.delete(id)\n          break\n        }\n        case 'mov': {\n          let value\n          //prettier-ignore\n          switch (data.from) {\n            case 'stack': value = stack.value; break\n            case 'a': value = stack.a; break\n            case 'b': value = stack.b; break\n            case 'value': value = data.store; break\n            case 'store':\n              value = readRef(graph.reg[data.store.id])\n              break\n          }\n          //prettier-ignore\n          switch (data.to) {\n            case 'stack': stack.value = value; break\n            case 'a': stack.a = value; break\n            case 'b': stack.b = value; break\n            case 'store':\n              graph.reg[data.target.id].current = value\n              break\n          }\n          break\n        }\n        case 'check':\n          switch (data.type) {\n            case 'defined':\n              local.skip = stack.value === undefined\n              break\n            case 'changed':\n              local.skip = stack.value === readRef(graph.reg[data.store.id])\n              break\n          }\n          break\n        case 'filter':\n          /**\n           * handled edge case: if step.fn will throw,\n           * tryRun will return null\n           * thereby forcing that branch to stop\n           */\n          local.skip = !tryRun(local, data, stack)\n          break\n        case 'run':\n          /** exec 'compute' step when stepn === idx */\n          if (stepn !== idx || type !== 'effect') {\n            pushHeap(stepn, stack, 'effect')\n            continue mem\n          }\n        case 'compute':\n          stack.value = tryRun(local, data, stack)\n          break\n      }\n      meta.stop = local.fail || local.skip\n    }\n    if (!meta.stop) {\n      for (let stepn = 0; stepn < graph.next.length; stepn++) {\n        pushFirstHeapItem('child', graph.next[stepn], stack, stack.value)\n      }\n    }\n    meta.stop = false\n  }\n  alreadyStarted = lastStartedState\n}\nexport const launch = (unit: Graphite, payload: any, upsert?: boolean) => {\n  if (unit.target) {\n    payload = unit.params\n    upsert = unit.defer\n    unit = unit.target\n  }\n  if (Array.isArray(unit)) {\n    for (let i = 0; i < unit.length; i++) {\n      pushFirstHeapItem('pure', getGraph(unit[i]), null, payload[i])\n    }\n  } else {\n    pushFirstHeapItem('pure', getGraph(unit), null, payload)\n  }\n  if (upsert && alreadyStarted) return\n  exec()\n}\n\n/** try catch for external functions */\nconst tryRun = (local: Local, {fn}, stack: Stack) => {\n  try {\n    return fn(stack.value, local.scope, stack)\n  } catch (err) {\n    console.error(err)\n    local.fail = true\n  }\n}\n","//@flow\n\nexport type SourceLocation = {|\n  file: string,\n  column: number,\n  line: number,\n|}\n\nexport type EffectConfigPart<Payload, Done> = {\n  handler?: (payload: Payload) => Promise<Done> | Done,\n  name?: string,\n  loc?: SourceLocation,\n  sid?: string,\n  named?: string,\n  ...\n}\n\nexport type StoreConfigPart = {\n  name?: string,\n  loc?: SourceLocation,\n  sid?: string,\n  named?: string,\n  ...\n}\n\nexport type EventConfigPart = {\n  name?: string,\n  loc?: SourceLocation,\n  sid?: string,\n  named?: string,\n  ...\n}\n\nexport type DomainConfigPart = {\n  name?: string,\n  loc?: SourceLocation,\n  sid?: string,\n  named?: string,\n  ...\n}\n\nexport type Config<Part> = {\n  ɔ?: Part,\n  ...$Exact<Part>,\n  ...\n}\n\nconst assignConfigPart = (part, config = {}) => {\n  if (Object(part) === part) {\n    assignConfigPart(part.config, config)\n    if (part.name != null) {\n      if (typeof part.name === 'object') assignConfigPart(part.name, config)\n      else config.name = part.name\n    }\n    if (part.loc) config.loc = part.loc\n    if (part.sid) config.sid = part.sid\n    if (part.handler) config.handler = part.handler\n    if (part.parent) config.parent = part.parent\n    if ('strict' in part) config.strict = part.strict\n    if (part.named) config.named = part.named\n    assignConfigPart(part.ɔ, config)\n  }\n  return config\n}\n//prettier-ignore\nexport const normalizeConfig:\n  & (<Params, Done>(config?: Config<EffectConfigPart<Params, Done>>) => EffectConfigPart<Params, Done>)\n  & ((config?: Config<StoreConfigPart>) => StoreConfigPart)\n  & ((config?: Config<EventConfigPart>) => EventConfigPart)\n  & ((config?: Config<DomainConfigPart>) => DomainConfigPart) =\n  assignConfigPart\n","//@flow\n\nimport {\n  type Graph,\n  type Graphite,\n  type Cmd,\n  getGraph,\n  getOwners,\n  getLinks,\n} from './stdlib'\nimport {is} from './is'\n\nconst removeItem = (list, item) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\nconst removeFromNode = (currentNode, targetNode) => {\n  removeItem(currentNode.next, targetNode)\n  removeItem(getOwners(currentNode), targetNode)\n  removeItem(getLinks(currentNode), targetNode)\n}\nconst clearNodeNormalized = (\n  targetNode: Graph,\n  deep: boolean,\n  isDomainUnit,\n) => {\n  targetNode.next.length = 0\n  targetNode.seq.length = 0\n  //$off\n  targetNode.scope = null\n  let currentNode\n  let list = getLinks(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (\n      deep ||\n      (isDomainUnit && !targetNode.meta.sample) ||\n      currentNode.family.type === 'crosslink'\n    ) {\n      clearNodeNormalized(currentNode, deep, isDomainUnit)\n    }\n  }\n  list = getOwners(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (isDomainUnit && currentNode.family.type === 'crosslink') {\n      clearNodeNormalized(currentNode, deep, isDomainUnit)\n    }\n  }\n}\nconst clearMap = (map: any) => map.clear()\nexport const clearNode = (\n  graphite: Graphite,\n  {\n    deep,\n  }: {\n    deep?: boolean,\n    ...\n  } = {},\n) => {\n  let isDomainUnit = false\n  if (is.store(graphite)) {\n    clearMap(graphite.subscribers)\n  } else if (is.domain(graphite)) {\n    isDomainUnit = true\n    const history = graphite.history\n    clearMap(history.events)\n    clearMap(history.effects)\n    clearMap(history.stores)\n    clearMap(history.domains)\n  }\n  clearNodeNormalized(getGraph(graphite), !!deep, isDomainUnit)\n}\n","//@flow\n\nimport type {Subscription} from './index.h'\nimport {type Graphite, bind2} from './stdlib'\nimport {clearNode} from './clearNode'\n\nexport const createSubscription = (node: Graphite): Subscription => {\n  const result = bind2(clearNode, node, undefined)\n  result.unsubscribe = result\n  return result\n}\n","//@flow\nimport {type Graphite, type Cmd} from './stdlib'\nimport {createNode} from './createNode'\nimport type {Subscription} from './index.h'\nimport {createSubscription} from './subscription'\n\nexport const createLinkNode = (\n  parent: Graphite,\n  child: Graphite,\n  {\n    node,\n    scope,\n    meta,\n  }: {|\n    +node?: Array<Cmd | false | void | null>,\n    scope?: {[name: string]: any, ...},\n    meta?: {[name: string]: any, ...},\n  |},\n) =>\n  createNode({\n    node,\n    parent,\n    child,\n    scope,\n    meta,\n    family: {\n      owners: [parent, child],\n      links: child,\n    },\n  })\nexport const forward = ({\n  from,\n  to,\n  meta = {op: 'forward'},\n}: {|\n  from: Graphite | Graphite[],\n  to: Graphite | Graphite[],\n  meta?: Object,\n|}): Subscription => {\n  if (!from || !to) throw Error('from and to fields should be defined')\n  return createSubscription(\n    createNode({\n      parent: from,\n      child: to,\n      meta,\n      family: {},\n    }),\n  )\n}\n","//@flow\n\nimport {type Unit, step, callStack} from './stdlib'\nimport {createNode} from './createNode'\nimport type {Subscription} from './index.h'\nimport {createSubscription} from './subscription'\nimport {addToRegion} from './region'\n\nexport const watchUnit = (\n  unit: Unit,\n  handler: (payload: any) => any,\n): Subscription =>\n  createSubscription(\n    addToRegion(\n      createNode({\n        scope: {fn: handler},\n        node: [step.run({fn: callStack})],\n        parent: unit,\n        meta: {op: 'watch'},\n        family: {\n          owners: unit,\n        },\n      }),\n    ),\n  )\n","//@flow\n\nimport {step, readRef} from './stdlib'\n\n//prettier-ignore\nexport const filterChanged = step.filter({\n  fn: (data, {state}) => (\n    data !== undefined &&\n    data !== readRef(state)\n  ),\n})\n\nexport const noop = step.compute({\n  fn: n => n,\n})\n","/* global window */\nimport ponyfill from './ponyfill.js';\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = ponyfill(root);\nexport default result;\n","export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\t\t\tresult = Symbol('observable');\n\t\t\tSymbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","import {h, spec} from 'effector-dom';\nimport {createEvent, createStore, forward, sample} from 'effector';\nimport {Title} from './title';\nimport {appended} from './model';\n\nexport const Header = () => {\n  h('header', () => {\n    Title();\n\n    h('input', () => {\n      const keypress = createEvent();\n      const input = createEvent();\n\n      // создадим фильтруемое событие,\n      const submit = keypress.filter({fn: e => e.key === 'Enter'});\n\n      // стор с текущим значением инпута\n      const $value = createStore('')\n        .on(input, (_, e) => e.target.value)\n        .reset(appended); // заодно очистим при отправке\n\n      // для перенаправления события в другое в эффекторе есть forward({from, to})\n      forward({\n        // возьмем текущее значение $value по триггеру submit,\n        // и сразу сделаем фильтрацию для проверки значения\n        from: sample($value, submit).filter({fn: Boolean}),\n        to: appended,\n      });\n\n      spec({\n        attr: {\n          class: \"new-todo\",\n          placeholder: 'What needs to be done?',\n          value: $value\n        },\n        handler: {keypress, input},\n      })\n    });\n  });\n};\n","import {h} from 'effector-dom';\n\nexport const Title = () => {\n  h('h1', {text: 'todos'});\n};\n","// src/model.js\nimport {createStore, createEvent, combine} from 'effector';\nimport connectLocalStorage from \"effector-localstorage/sync\";\n\n// сторы\n\nconst $todosLocalStorage = connectLocalStorage(\"todos\")\n  .onError((err) => console.log(err)) // setup error callback\n//   .onChange(setCounter) // call event on external storage change\n\n// все задачи\nexport const $todos = createStore($todosLocalStorage.init([]));\n$todos.watch($todosLocalStorage)\n\n// текущий фильтр, для простоты будет null/true/false\nexport const $activeFilter = createStore(null);\n\n// отфильтрованные задачи\nexport const $filteredTodos = combine(\n  $todos,\n  $activeFilter,\n  (todos, filter) => filter === null\n    ? todos\n    : todos.filter(todo => todo.completed === filter)\n);\n\n// все ли завершены\nexport const $isAllCompleted = $todos.map((todos) => todos.every(todo => todo.completed ));\n\n// события\n\n// добавление новой задачи\nexport const appended = createEvent();\n\n// выполнение/снятие выполнения задачи\nexport const toggled = createEvent();\n\n// удаление задачи\nexport const removed = createEvent();\n\n// выполнение всех задач\nexport const allCompleted = createEvent();\n\n// удаление выполненных задач\nexport const completedRemoved = createEvent();\n\n// фильтрация задач\nexport const filtered = createEvent();\n$todos\n  // добавление новой задачи\n  .on(appended, (state, title) => [...state, {title, completed: false}])\n  // удаление задачи. Для простоты будем проверять title\n  .on(removed, (state, title) => state.filter(item => item.title !== title))\n  // выполнение/снятие выполнения\n  .on(toggled, (state, title) => state.map(item => item.title === title\n    ? ({...item, completed: !item.completed})\n    : item))\n  // выполнение всех задач\n  .on(allCompleted, (state) => { const val = !$isAllCompleted.getState(); return state.map(item => item.completed === val\n    ? item\n    : ({...item, completed: val}))\n  })\n  // удаление выполненных задач\n  .on(completedRemoved, state => state.filter(item => !item.completed));\n\n$activeFilter\n  // фильтрация\n  .on(filtered, (_, filter) => filter);\n","function connectStorage (key) {\n  var errorHandler\n\n  function holder (value) {\n    try {\n      localStorage.setItem(key, JSON.stringify(value))\n    } catch (err) {\n      errorHandler && errorHandler(err)\n    }\n  }\n\n  holder.onError = function (handler) {\n    errorHandler = handler\n    return holder\n  }\n\n  holder.onChange = function (event) {\n    addEventListener('storage', function (e) {\n      e.key === key && event(holder.init())\n    })\n    return holder\n  }\n\n  holder.init = function (value) {\n    try {\n      var item = localStorage.getItem(key)\n      return item === null ? value : JSON.parse(item)\n    } catch (err) {\n      errorHandler && errorHandler(err)\n    }\n    return value\n  }\n\n  return holder\n}\n\nmodule.exports = connectStorage\n","// src/view/main.js\nimport {h, spec, list} from 'effector-dom';\nimport {TodoItem} from './todoItem';\nimport {$filteredTodos, allCompleted, $isAllCompleted} from './model';\n\nexport const Main = (a) => {\n  h('section', () => {\n    spec({attr: {class: 'main'}});\n\n    // выбор всех задач\n    h('input', {\n      attr: {id: 'toggle-all', class: 'toggle-all', type: 'checkbox', checked: $isAllCompleted},\n\t  handler: {change: allCompleted}\n    });\n    h('label', {attr: {for: 'toggle-all'}});\n\n    // список задач\n    h('ul', () => {\n      spec({attr: {class: \"todo-list\"}});\n      list({\n        source: $filteredTodos,\n        key: 'title',\n        fields: ['title', 'completed']\n        // в fields окажутся сторы с их значениям\n      }, ({fields: [title, completed], key}) => TodoItem({title, completed, key}));\n    });\n  });\n};\n","import {h, spec} from 'effector-dom';\nimport {toggled, removed} from './model';\n\n// title и completed - сторы с конкретными значениями\nexport const TodoItem = ({title, completed, key}) => {\n  h('li', () => {\n    // новый наследуемый стор с классом по флагу\n    spec({attr: {class: completed.map(flag => flag ? 'completed' : false)}});\n\n    h('div', () => {\n      spec({attr: {class: 'view'}});\n\n      h('input', {\n        attr: {class: 'toggle', type: 'checkbox', checked: completed},\n        // новое событие с предустановкой параметров\n        handler: {click: toggled.prepend(() => key)},\n      });\n\n      h('label', {text: title});\n\n      h('button', {\n        attr: {class: 'destroy'},\n        // новое событие с предустановкой параметров\n        handler: {click: removed.prepend(() => key)},\n      });\n    });\n  });\n};\n","import {h, spec} from 'effector-dom';\nimport {$todos, $activeFilter, filtered, completedRemoved} from './model';\n\nexport const Footer = () => {\n  h('footer', () => {\n    spec({attr: {class: 'footer'}});\n\n    h('span', () => { // Каунтер активных задач\n      spec({attr: {class: 'todo-count'}});\n\n      const $activeCount = $todos.map(\n        todos => todos.filter(todo => !todo.completed).length\n      );\n\n      h('strong', {text: $activeCount});\n      h('span', {text: $activeCount.map(count => count === 1\n        ? ' item left'\n        : ' items left'\n      )});\n    });\n\n    h('ul', () => { // кнопки фильтров, ничего нового\n      spec({attr: {class: 'filters'}});\n\n      h('li', () => {\n        h('a', {\n          attr: {class: $activeFilter.map(active => active === null\n            ? 'selected'\n            : false\n          )},\n          text: 'All',\n          handler: {click: filtered.prepend(() => null)},\n        });\n      });\n\n      h('li', () => {\n        h('a', {\n          attr: {class: $activeFilter.map(completed => completed === false\n            ? 'selected'\n            : false\n          )},\n          text: 'Active',\n          handler: {click: filtered.prepend(() => false)},\n        });\n      });\n\n      h('li', () => {\n        h('a', {\n          attr: {class: $activeFilter.map(completed => completed === true\n            ? 'selected'\n            : false\n          )},\n          text: 'Completed',\n          handler: {click: filtered.prepend(() => true)},\n        });\n      });\n    });\n\n    h('button', {\n      attr: {class: 'clear-completed'},\n      text: 'Clear completed',\n      handler: {click: completedRemoved},\n    });\n  });\n};\n"],"names":["own","ownerUnit","ownedUnits","owner","getGraph","i","length","link","family","type","owners","getOwners","links","getLinks","includes","push","makeSiblings","left","right","setRightSibling","setLeftSibling","target","value","locality","sibling","ref","createSignal","scope","stack","parent","activeStack","get","signal","createNode","node","clearLocality","sendSelf","filter","Boolean","meta","unit","self","escapeTag","String","replace","invalidToken","escapeTagValue","invalidValue","using","cb","namespaceURI","tag","tagName","toLowerCase","ns","parentStack","namespace","targetElement","svgRoot","child","first","last","pure","attr","data","visible","text","styleVar","styleProp","handler","transform","focus","blur","mountStatus","nodeStack","append","reverse","withRegion","appendBatch","pop","frag","document","createDocumentFragment","appendChild","prepend","forwardStacks","seq","removeFromParent","createWatch","fn","runner","op","batchRAFrs","isBatched","executeTasks","watchBatchEvent","taskID","isList","taskList","priorities","importantTasks","tasks","getTaskList","list","set","batchWindow","backpressureEvent","trigger","flat","priority","nextTaskID","result","createEvent","is","store","source","updates","pushSingleValue","targets","runBatchFn","unwrapFail","dropEmptyList","pushBatchList","unwrapDone","dynamicQueueFlat","timeout","Infinity","retries","mark","shortName","processed","map","inserted","now","retry","start","interrupted","done","batched","item","timeNow","undefined","j","fail","connect","dynamicQueue","flatten","items","block","toArray","noDebounceRaf","watch","debounceRaf","toDomOp","domOp","launch","getState","domOperation","immediate","findLastVisibleNode","fromIndex","visibleChild","findNearestVisibleNode","found","indexOf","isFalse","val","applyData","dataset","field","applyVisible","contains","nearestVisible","after","remove","bindVisible","element","bind","applyAttr","checked","setAttribute","removeAttribute","applyTransform","svg","transformList","key","createSVGTransform","x","y","combine","xShape","yShape","normalizeTranslateShape","appendItem","setText","textNode","createTextNode","firstChild","replaceWith","setFocus","setBlur","h","opts","noAppend","parentNS","createElementNS","createElement","draft","currentStack","succ","initNode","spec","merged","getElementNode","options","passive","prevent","evt","e","preventDefault","stop","stopPropagation","mergeNodeDraft","bindAttr","bindData","handlers","addEventListener","finalizeHandler","bindHandler","style","propName","applyStyleProp","bindStyleProp","applyStyleVal","bindStyleVar","operationsSeq","baseVal","operations","transformResolvers","bindTransform","bindText","events","bindFocus","bindBlur","applyNodeDraft","remap","shape","Array","isArray","readField","owned","storeField","tree","currentKey","childList","getID","indexIDGetter","keyIDGetter","parentSignal","context","parentNode","fields","createStore","update","clearParentSignal","sample","clock","records","input","skipNode","fill","keys","newRecords","resultRecords","removedRecords","record","index","active","removeNodesFromDOM","lastItem","id","nodes","applyNewRecordsEvent","insertElement","before","explicitUnmount","unmountOn","signalOwn","assertElementNode","extensionName","Error","nodeMethod","method","args","__STATIC__","prop","capture","console","error","originalCombine","variant","cases","Object","entries","currentActiveStack","[object Object]","graphite","clearSelf","step","run","clearNode","compute","_","next","CSSStyle","this","create","property","properties","DOMSVGTransformList","newItem","DOMSVGTransform","tx","ty","sx","sy","angle","cx","cy","isFragment","textContent","nextChild","attributes","isBody","doc","upd","splice","beginMark","endMark","label","performance","process","hrtime","hr","Date","rafID","bonusTime","raf","requestAnimationFrame","setTimeout","cancelRaf","cancelAnimationFrame","clearTimeout","Map","startTime","executionEndMark","size","delete","params","defer","values","removeEventListener","variableName","removeProperty","setProperty","setTranslate","setScale","setRotate","setSkewX","setSkewY","appendBatchEvent","listItem","appended","listItemStack","k","slice","allRecords","from","to","familyRaw","sources","arrifyNodes","reg","addToReg","unitObjectName","objOrArr","name","comma","compositeName","fullName","toString","setStoreName","rawName","createName","path","composite","concat","regionStack","nameOrConfig","maybeConfig","event","payload","initUnit","watchUnit","config","mapped","mapName","createComputation","filterMapEvent","createEventFiltration","callStack","filterMap","contramapped","applyParentEventHook","subscribe","observer","$$observable","addToRegion","defined","currentState","props","plainState","createStateRef","oldState","createNamedEvent","subscribers","defaultState","stateRef","readRef","setState","state","changed","isStrict","reset","units","on","off","createSubscription","updateStore","firstState","lastResult","storeState","innerStore","strict","currentSubscription","storeInstance","eventOrFn","stores","structStoreShape","shapeReady","ɔ","rawHandler","obj","spreadArgs","storeCombination","assign","metadata","greedy","shapeToStore","getStoreState","createLinkNode","callARegStack","hasSource","sourceState","clockState","callStackAReg","split","current","invertCondition","__","merge","forward","fromObservable","observable","observableItem","disposer","bind2","complete","createEffect","instance","defaultConfig","getType","Promise","resolve","onCopy","anyway","finally","use","getCurrent","kind","effectRunner","getHandler","req","onResolve","onReject","syncError","rawResult","failedSync","err","then","runEffect","onSettled","rs","ok","rj","fx","catch","createDefer","inFlight","named","pending","amount","createDomain","domains","Set","effects","history","effect","domain","hooks","onCreateEvent","createHook","onCreateEffect","onCreateStore","onCreateDomain","restore","v","createApi","setters","guard","arg","stringRefcount","nextUnitID","nextStepID","cmd","hasRef","nextBarrierID","barrier","barrierID","mov","check","graph","a","heap","b","ret","isSameType","r","l","queue","ix","deleteMin","pushFirstHeapItem","pushHeap","idx","getPriority","bucket","t","barriers","alreadyStarted","upsert","lastStartedState","mem","local","skip","stepn","has","add","tryRun","exec","assignConfigPart","part","loc","sid","normalizeConfig","joinName","removeItem","pos","removeFromNode","currentNode","targetNode","clearNodeNormalized","deep","isDomainUnit","clearMap","clear","unsubscribe","rawConfigA","rawConfigB","thru","stateFirst","clone","stateNew","isFresh","defaultShape","sidechain","status","acc","hook","forEach","n"],"version":3,"file":"index.69062844.js.map","sourceRoot":"/__parcel_source_root/"}